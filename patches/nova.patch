diff --git a/minecraft/block/Block.java b/minecraft/block/Block.java
index 25c6330..47fc02b 100644
--- a/minecraft/block/Block.java
+++ b/minecraft/block/Block.java
@@ -13,0 +14 @@ import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.Minecraft;
diff --git a/minecraft/block/BlockDynamicLiquid.java b/minecraft/block/BlockDynamicLiquid.java
index 36e9bbb..450fc58 100644
--- a/minecraft/block/BlockDynamicLiquid.java
+++ b/minecraft/block/BlockDynamicLiquid.java
@@ -56 +56 @@ public class BlockDynamicLiquid extends BlockLiquid
-            int j1 = this.func_189542_i(worldIn.getBlockState(pos.up()));
+            int j1 = this.getLightingValueOrSomething(worldIn.getBlockState(pos.up()));
@@ -263 +263 @@ public class BlockDynamicLiquid extends BlockLiquid
-        int i = this.func_189542_i(worldIn.getBlockState(pos));
+        int i = this.getLightingValueOrSomething(worldIn.getBlockState(pos));
diff --git a/minecraft/block/BlockLiquid.java b/minecraft/block/BlockLiquid.java
index c079ffc..6b1e503 100644
--- a/minecraft/block/BlockLiquid.java
+++ b/minecraft/block/BlockLiquid.java
@@ -67 +67 @@ public abstract class BlockLiquid extends Block
-    protected int func_189542_i(IBlockState p_189542_1_)
+    protected int getLightingValueOrSomething(IBlockState state)
@@ -69 +69 @@ public abstract class BlockLiquid extends Block
-        return p_189542_1_.getMaterial() == this.blockMaterial ? ((Integer)p_189542_1_.getValue(LEVEL)).intValue() : -1;
+        return state.getMaterial() == this.blockMaterial ? ((Integer)state.getValue(LEVEL)).intValue() : -1;
@@ -72 +72 @@ public abstract class BlockLiquid extends Block
-    protected int func_189545_x(IBlockState p_189545_1_)
+    protected int getLightingMax8(IBlockState state)
@@ -74 +74 @@ public abstract class BlockLiquid extends Block
-        int i = this.func_189542_i(p_189545_1_);
+        int i = this.getLightingValueOrSomething(state);
@@ -154 +154 @@ public abstract class BlockLiquid extends Block
-    protected Vec3d func_189543_a(IBlockAccess p_189543_1_, BlockPos p_189543_2_, IBlockState p_189543_3_)
+    protected Vec3d func_189543_a(IBlockAccess access, BlockPos pos, IBlockState state)
@@ -156,5 +156,5 @@ public abstract class BlockLiquid extends Block
-        double d0 = 0.0D;
-        double d1 = 0.0D;
-        double d2 = 0.0D;
-        int i = this.func_189545_x(p_189543_3_);
-        BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
+        double x = 0.0D;
+        double y = 0.0D;
+        double z = 0.0D;
+        int lighting = this.getLightingMax8(state);
+        BlockPos.PooledMutableBlockPos blockposPool = BlockPos.PooledMutableBlockPos.retain();
@@ -164,2 +164,2 @@ public abstract class BlockLiquid extends Block
-            blockpos$pooledmutableblockpos.func_189533_g(p_189543_2_).func_189536_c(enumfacing);
-            int j = this.func_189545_x(p_189543_1_.getBlockState(blockpos$pooledmutableblockpos));
+            blockposPool.func_189533_g(pos).func_189536_c(enumfacing);
+            int j = this.getLightingMax8(access.getBlockState(blockposPool));
@@ -169 +169 @@ public abstract class BlockLiquid extends Block
-                if (!p_189543_1_.getBlockState(blockpos$pooledmutableblockpos).getMaterial().blocksMovement())
+                if (!access.getBlockState(blockposPool).getMaterial().blocksMovement())
@@ -171 +171 @@ public abstract class BlockLiquid extends Block
-                    j = this.func_189545_x(p_189543_1_.getBlockState(blockpos$pooledmutableblockpos.down()));
+                    j = this.getLightingMax8(access.getBlockState(blockposPool.down()));
@@ -175,4 +175,4 @@ public abstract class BlockLiquid extends Block
-                        int k = j - (i - 8);
-                        d0 += (double)(enumfacing.getFrontOffsetX() * k);
-                        d1 += (double)(enumfacing.getFrontOffsetY() * k);
-                        d2 += (double)(enumfacing.getFrontOffsetZ() * k);
+                        int k = j - (lighting - 8);
+                        x += (double)(enumfacing.getFrontOffsetX() * k);
+                        y += (double)(enumfacing.getFrontOffsetY() * k);
+                        z += (double)(enumfacing.getFrontOffsetZ() * k);
@@ -184,4 +184,4 @@ public abstract class BlockLiquid extends Block
-                int l = j - i;
-                d0 += (double)(enumfacing.getFrontOffsetX() * l);
-                d1 += (double)(enumfacing.getFrontOffsetY() * l);
-                d2 += (double)(enumfacing.getFrontOffsetZ() * l);
+                int l = j - lighting;
+                x += (double)(enumfacing.getFrontOffsetX() * l);
+                y += (double)(enumfacing.getFrontOffsetY() * l);
+                z += (double)(enumfacing.getFrontOffsetZ() * l);
@@ -191 +191 @@ public abstract class BlockLiquid extends Block
-        Vec3d vec3d = new Vec3d(d0, d1, d2);
+        Vec3d vec3d = new Vec3d(x, y, z);
@@ -193 +193 @@ public abstract class BlockLiquid extends Block
-        if (((Integer)p_189543_3_.getValue(LEVEL)).intValue() >= 8)
+        if (((Integer)state.getValue(LEVEL)).intValue() >= 8)
@@ -197 +197 @@ public abstract class BlockLiquid extends Block
-                blockpos$pooledmutableblockpos.func_189533_g(p_189543_2_).func_189536_c(enumfacing1);
+                blockposPool.func_189533_g(pos).func_189536_c(enumfacing1);
@@ -199 +199 @@ public abstract class BlockLiquid extends Block
-                if (this.isBlockSolid(p_189543_1_, blockpos$pooledmutableblockpos, enumfacing1) || this.isBlockSolid(p_189543_1_, blockpos$pooledmutableblockpos.up(), enumfacing1))
+                if (this.isBlockSolid(access, blockposPool, enumfacing1) || this.isBlockSolid(access, blockposPool.up(), enumfacing1))
@@ -207 +207 @@ public abstract class BlockLiquid extends Block
-        blockpos$pooledmutableblockpos.release();
+        blockposPool.release();
@@ -302 +302 @@ public abstract class BlockLiquid extends Block
-    public static float func_189544_a(IBlockAccess p_189544_0_, BlockPos p_189544_1_, Material p_189544_2_, IBlockState p_189544_3_)
+    public static float func_189544_a(IBlockAccess blockAccess, BlockPos pos, Material material, IBlockState state)
@@ -304 +304 @@ public abstract class BlockLiquid extends Block
-        Vec3d vec3d = getFlowingBlock(p_189544_2_).func_189543_a(p_189544_0_, p_189544_1_, p_189544_3_);
+        Vec3d vec3d = getFlowingBlock(material).func_189543_a(blockAccess, pos, state);
diff --git a/minecraft/block/state/BlockStateContainer.java b/minecraft/block/state/BlockStateContainer.java
index 134ca55..0764fb0 100644
--- a/minecraft/block/state/BlockStateContainer.java
+++ b/minecraft/block/state/BlockStateContainer.java
@@ -432 +432 @@ public class BlockStateContainer
-        public boolean func_189547_a(World p_189547_1_, BlockPos p_189547_2_, int p_189547_3_, int p_189547_4_)
+        public boolean func_189547_a(World world, BlockPos eventPos, int eventId, int eventParam)
@@ -434 +434 @@ public class BlockStateContainer
-            return this.block.func_189539_a(this, p_189547_1_, p_189547_2_, p_189547_3_, p_189547_4_);
+            return this.block.func_189539_a(this, world, eventPos, eventId, eventParam);
diff --git a/minecraft/block/state/IBlockBehaviors.java b/minecraft/block/state/IBlockBehaviors.java
index b7099e0..26628d8 100644
--- a/minecraft/block/state/IBlockBehaviors.java
+++ b/minecraft/block/state/IBlockBehaviors.java
@@ -9 +9 @@ public interface IBlockBehaviors
-    boolean func_189547_a(World p_189547_1_, BlockPos p_189547_2_, int p_189547_3_, int p_189547_4_);
+    boolean func_189547_a(World world, BlockPos eventPos, int eventId, int eventParam);
diff --git a/minecraft/client/LoadingScreenRenderer.java b/minecraft/client/LoadingScreenRenderer.java
index 82af80c..d6c5a7e 100644
--- a/minecraft/client/LoadingScreenRenderer.java
+++ b/minecraft/client/LoadingScreenRenderer.java
@@ -164 +164 @@ public class LoadingScreenRenderer implements IProgressUpdate
-                this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
+                this.mc.getRenderEngine().bindTexture(Gui.OPTIONS_BACKGROUND);
diff --git a/minecraft/client/Minecraft.java b/minecraft/client/Minecraft.java
index ad84c84..c81d8e2 100644
--- a/minecraft/client/Minecraft.java
+++ b/minecraft/client/Minecraft.java
@@ -2,0 +3,2 @@ package net.minecraft.client;
+import com.continuum.nova.NovaNative;
+import com.continuum.nova.NovaRenderer;
@@ -24 +25,0 @@ import java.nio.ByteOrder;
-import java.nio.IntBuffer;
@@ -39,0 +41 @@ import javax.imageio.ImageIO;
+
@@ -192,3 +194,2 @@ import org.lwjgl.Sys;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.ContextCapabilities;
+import com.continuum.nova.input.Keyboard;
+import com.continuum.nova.input.Mouse;
@@ -197 +197,0 @@ import org.lwjgl.opengl.DisplayMode;
-import org.lwjgl.opengl.GLContext;
@@ -210 +210 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-    private static final List<DisplayMode> MAC_DISPLAY_MODES = Lists.newArrayList(new DisplayMode[] {new DisplayMode(2560, 1600), new DisplayMode(2880, 1800)});
+    private static final List<DisplayMode> MAC_DISPLAY_MODES = Lists.newArrayList(new DisplayMode(2560, 1600), new DisplayMode(2880, 1800));
@@ -385,0 +386,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+    private NovaRenderer nova = new NovaRenderer();
+
@@ -387,0 +390 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+
@@ -410,0 +414,5 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        nova.preInit();
+        inGameHasFocus = NovaNative.INSTANCE.display_is_active();
+        Mouse.create();
+        Keyboard.create();
+
@@ -509,0 +518 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        /*
@@ -513,0 +523 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        */
@@ -528 +538 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.fontRendererObj = new FontRenderer(this.gameSettings, new ResourceLocation("textures/font/ascii.png"), this.renderEngine, false);
+        this.fontRendererObj = new FontRenderer(this.gameSettings, new ResourceLocation("font/ascii"), this.renderEngine, false);
@@ -536 +546 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.standardGalacticFontRenderer = new FontRenderer(this.gameSettings, new ResourceLocation("textures/font/ascii_sga.png"), this.renderEngine, false);
+        this.standardGalacticFontRenderer = new FontRenderer(this.gameSettings, new ResourceLocation("font/ascii_sga"), this.renderEngine, false);
@@ -540,0 +551 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        mcResourceManager.registerReloadListener(nova);
@@ -555,0 +567 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        /*
@@ -568,0 +581,4 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        */
+
+
+
@@ -570,0 +587,3 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+
+
+
@@ -575 +593,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.mcResourceManager.registerReloadListener(this.modelManager);
@@ -576,0 +595,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        nova.loadShaderpack("default", this.blockColors);
+        this.mcResourceManager.registerReloadListener(this.modelManager);
@@ -782 +802 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        if (crashReportIn.getFile() != null)
+        if(crashReportIn.getFile() != null)
@@ -787 +807 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        else if (crashReportIn.saveToFile(file2))
+        else if(crashReportIn.saveToFile(file2))
@@ -793 +813 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        {
+            {
@@ -997,0 +1018,4 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        if(guiScreenIn == null) {
+            NovaNative.INSTANCE.clear_gui_buffers();
+        }
+
@@ -1003,2 +1027 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        if (guiScreenIn == null && this.theWorld == null)
-        {
+        if (guiScreenIn == null && this.theWorld == null) {
@@ -1018 +1041 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.currentScreen = (GuiScreen)guiScreenIn;
+        this.currentScreen = guiScreenIn;
@@ -1025,10 +1047,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-            while (Mouse.next())
-            {
-                ;
-            }
-
-            while (Keyboard.next())
-            {
-                ;
-            }
-
@@ -1038 +1051 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-            ((GuiScreen)guiScreenIn).setWorldAndResolution(this, i, j);
+            guiScreenIn.setWorldAndResolution(this, i, j);
@@ -1042 +1055 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        {
+            {
@@ -1150 +1162,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.framebufferMc.bindFramebuffer(true);
@@ -1158 +1170,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-            this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks, i);
+            this.entityRenderer.updateCamera(timer.renderPartialTicks, i);
+            nova.updateCameraAndRender(timer.renderPartialTicks, i, this);
@@ -1181 +1193,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.framebufferMc.unbindFramebuffer();
@@ -1184 +1195,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.framebufferMc.framebufferRender(this.displayWidth, this.displayHeight);
@@ -1187 +1197,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.entityRenderer.renderStreamIndicator(this.timer.renderPartialTicks);
@@ -1227 +1237 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        Display.update();
+        //Display.update();
@@ -1234 +1244 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        if (!this.fullscreen && Display.wasResized())
+        if (nova.wasResized())
@@ -1236,11 +1246,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-            int i = this.displayWidth;
-            int j = this.displayHeight;
-            this.displayWidth = Display.getWidth();
-            this.displayHeight = Display.getHeight();
-
-            if (this.displayWidth != i || this.displayHeight != j)
-            {
-                if (this.displayWidth <= 0)
-                {
-                    this.displayWidth = 1;
-                }
+            this.displayWidth = nova.getWidth();
+            this.displayHeight = nova.getHeight();
@@ -1248,4 +1248,0 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-                if (this.displayHeight <= 0)
-                {
-                    this.displayHeight = 1;
-                }
@@ -1252,0 +1250 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+           LOGGER.info("Window was resized to: " + displayWidth +"x" +displayHeight);
@@ -1255 +1253 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        }
+
@@ -1260 +1258 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        return this.theWorld == null && this.currentScreen != null ? 30 : this.gameSettings.limitFramerate;
+        return this.gameSettings.limitFramerate;
@@ -1463 +1461,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        if (Display.isActive())
+        boolean windowActive = NovaNative.INSTANCE.display_is_active();
+        if (windowActive)
@@ -1669,0 +1669,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+                NovaNative.INSTANCE.set_fullscreen(NovaNative.NativeBoolean.TRUE.ordinal());
+                /*
@@ -1682,0 +1684 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+                */
@@ -1685,0 +1688,3 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+                NovaNative.INSTANCE.set_fullscreen(NovaNative.NativeBoolean.FALSE.ordinal());
+
+                /*
@@ -1698,0 +1704 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+                */
@@ -1700,0 +1707 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+            /*
@@ -1711,0 +1719 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+            */
@@ -1734,2 +1742,4 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-        this.loadingScreen = new LoadingScreenRenderer(this);
-        this.updateFramebufferSize();
+       /*
+       this.loadingScreen = new LoadingScreenRenderer(this);
+       this.updateFramebufferSize();
+       */
@@ -2508,0 +2519,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        nova.setWorld(worldClientIn);
+
@@ -2982,0 +2995 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        /*
@@ -3087,0 +3101 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        */
@@ -3100,0 +3115 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+        /*
@@ -3112,0 +3128,2 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+         */
+        return NovaNative.INSTANCE.get_max_texture_size();
@@ -3221 +3238 @@ public class Minecraft implements IThreadListener, ISnooperInfo
-    public TextureManager getTextureManager()
+    public TextureManager getRenderEngine()
@@ -3416,0 +3434,12 @@ public class Minecraft implements IThreadListener, ISnooperInfo
+
+    public NovaRenderer getNovaRenderer() {
+        return nova;
+    }
+
+    public BlockRendererDispatcher getBlockRenderDispatcher() {
+        return blockRenderDispatcher;
+    }
+
+    public EntityRenderer getEntityRenderer() {
+        return entityRenderer;
+    }
diff --git a/minecraft/client/entity/AbstractClientPlayer.java b/minecraft/client/entity/AbstractClientPlayer.java
index d4fdecc..a95fe6e 100644
--- a/minecraft/client/entity/AbstractClientPlayer.java
+++ b/minecraft/client/entity/AbstractClientPlayer.java
@@ -111 +111 @@ public abstract class AbstractClientPlayer extends EntityPlayer
-        TextureManager texturemanager = Minecraft.getMinecraft().getTextureManager();
+        TextureManager texturemanager = Minecraft.getMinecraft().getRenderEngine();
diff --git a/minecraft/client/gui/FontRenderer.java b/minecraft/client/gui/FontRenderer.java
index 6439aa9..c7bfcbb 100644
--- a/minecraft/client/gui/FontRenderer.java
+++ b/minecraft/client/gui/FontRenderer.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -5,0 +7,2 @@ import com.ibm.icu.text.Bidi;
+
+import java.awt.*;
@@ -19,0 +23 @@ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+import net.minecraft.client.resources.IReloadableResourceManager;
@@ -25,0 +30,2 @@ import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
@@ -27,2 +33 @@ import org.apache.commons.io.IOUtils;
-public class FontRenderer implements IResourceManagerReloadListener
-{
+public class FontRenderer implements IResourceManagerReloadListener {
@@ -29,0 +35 @@ public class FontRenderer implements IResourceManagerReloadListener
+    private static final Logger LOG = LogManager.getLogger(FontRenderer.class);
@@ -47 +53 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private final int[] colorCode = new int[32];
+    private final int[] colorCodes = new int[32];
@@ -51 +57 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private final TextureManager renderEngine;
+    private final TextureManager textureManager;
@@ -92,0 +99,2 @@ public class FontRenderer implements IResourceManagerReloadListener
+    private Color color;
+
@@ -106 +114 @@ public class FontRenderer implements IResourceManagerReloadListener
-        this.renderEngine = textureManagerIn;
+        this.textureManager = textureManagerIn;
@@ -108 +115,0 @@ public class FontRenderer implements IResourceManagerReloadListener
-        textureManagerIn.bindTexture(this.locationFontTexture);
@@ -139 +146 @@ public class FontRenderer implements IResourceManagerReloadListener
-            this.colorCode[i] = (k & 255) << 16 | (l & 255) << 8 | i1 & 255;
+            this.colorCodes[i] = (k & 255) << 16 | (l & 255) << 8 | i1 & 255;
@@ -145,3 +152,3 @@ public class FontRenderer implements IResourceManagerReloadListener
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
-        this.readFontTexture();
+    @Override
+    public void onResourceManagerReload(IResourceManager resourceManager) {
+        readFontTexture(resourceManager);
@@ -150,3 +157 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private void readFontTexture()
-    {
-        IResource iresource = null;
+    private void readFontTexture(IResourceManager resourceManager) {
@@ -155,3 +160,4 @@ public class FontRenderer implements IResourceManagerReloadListener
-        try
-        {
-            iresource = Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture);
+        String path = locationFontTexture.getResourcePath();
+        ResourceLocation fontTextureLocation = new ResourceLocation("textures/" + path + ".png");
+
+        try(IResource iresource = resourceManager.getResource(fontTextureLocation)) {
@@ -159,3 +165 @@ public class FontRenderer implements IResourceManagerReloadListener
-        }
-        catch (IOException ioexception)
-        {
+        } catch(IOException ioexception) {
@@ -164,4 +167,0 @@ public class FontRenderer implements IResourceManagerReloadListener
-        finally
-        {
-            IOUtils.closeQuietly((Closeable)iresource);
-        }
@@ -169,6 +169,6 @@ public class FontRenderer implements IResourceManagerReloadListener
-        int lvt_3_1_ = bufferedimage.getWidth();
-        int lvt_4_1_ = bufferedimage.getHeight();
-        int[] lvt_5_1_ = new int[lvt_3_1_ * lvt_4_1_];
-        bufferedimage.getRGB(0, 0, lvt_3_1_, lvt_4_1_, lvt_5_1_, 0, lvt_3_1_);
-        int lvt_6_1_ = lvt_4_1_ / 16;
-        int lvt_7_1_ = lvt_3_1_ / 16;
+        int imageWidth = bufferedimage.getWidth();
+        int imageHeight = bufferedimage.getHeight();
+        int[] imageSize = new int[imageWidth * imageHeight];
+        bufferedimage.getRGB(0, 0, imageWidth, imageHeight, imageSize, 0, imageWidth);
+        int pixelHeightOrChars = imageHeight / 16;   // Cause there's 16 chars in the x and y direction
+        int pixelWidthOfChars = imageWidth / 16;
@@ -176,10 +176,6 @@ public class FontRenderer implements IResourceManagerReloadListener
-        float lvt_9_1_ = 8.0F / (float)lvt_7_1_;
-
-        for (int lvt_10_1_ = 0; lvt_10_1_ < 256; ++lvt_10_1_)
-        {
-            int j1 = lvt_10_1_ % 16;
-            int k1 = lvt_10_1_ / 16;
-
-            if (lvt_10_1_ == 32)
-            {
-                this.charWidth[lvt_10_1_] = 4;
+        float lvt_9_1_ = 8.0F / (float) pixelWidthOfChars;
+        for(int i = 0; i < 256; ++i) {
+            int x = i % 16;
+            int y = i / 16;
+            if(i == 32) {
+                this.charWidth[i] = 4;
@@ -187,6 +183,3 @@ public class FontRenderer implements IResourceManagerReloadListener
-
-            int l1;
-
-            for (l1 = lvt_7_1_ - 1; l1 >= 0; --l1)
-            {
-                int i2 = j1 * lvt_7_1_ + l1;
+            int charsLeftInLine;
+            for(charsLeftInLine = pixelWidthOfChars - 1; charsLeftInLine >= 0; --charsLeftInLine) {
+                int posInCharArray = x * pixelWidthOfChars + charsLeftInLine;
@@ -194,7 +187,3 @@ public class FontRenderer implements IResourceManagerReloadListener
-
-                for (int j2 = 0; j2 < lvt_6_1_ && flag1; ++j2)
-                {
-                    int k2 = (k1 * lvt_7_1_ + j2) * lvt_3_1_;
-
-                    if ((lvt_5_1_[i2 + k2] >> 24 & 255) != 0)
-                    {
+                for(int curX = 0; curX < pixelHeightOrChars && flag1; ++curX) {
+                    int k2 = (y * pixelWidthOfChars + curX) * imageWidth;
+                    if((imageSize[posInCharArray + k2] >> 24 & 255) != 0) {
@@ -204,3 +193 @@ public class FontRenderer implements IResourceManagerReloadListener
-
-                if (!flag1)
-                {
+                if(!flag1) {
@@ -210,3 +197,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-
-            ++l1;
-            this.charWidth[lvt_10_1_] = (int)(0.5D + (double)((float)l1 * lvt_9_1_)) + 1;
+            ++charsLeftInLine;
+            this.charWidth[i] = (int) (0.5 + ((float) charsLeftInLine * lvt_9_1_)) + 1;
@@ -238,4 +224,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private float renderChar(char ch, boolean italic)
-    {
-        if (ch == 32)
-        {
+    private float renderChar(char ch, boolean italic) {
+        if (ch == 32) {
@@ -243,3 +227 @@ public class FontRenderer implements IResourceManagerReloadListener
-        }
-        else
-        {
+        } else {
@@ -254,2 +236 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private float renderDefaultChar(int ch, boolean italic)
-    {
+    private float renderDefaultChar(int ch, boolean italic) {
@@ -259 +239,0 @@ public class FontRenderer implements IResourceManagerReloadListener
-        this.renderEngine.bindTexture(this.locationFontTexture);
@@ -262,10 +242,12 @@ public class FontRenderer implements IResourceManagerReloadListener
-        GlStateManager.glBegin(5);
-        GlStateManager.glTexCoord2f((float)i / 128.0F, (float)j / 128.0F);
-        GlStateManager.glVertex3f(this.posX + (float)k, this.posY, 0.0F);
-        GlStateManager.glTexCoord2f((float)i / 128.0F, ((float)j + 7.99F) / 128.0F);
-        GlStateManager.glVertex3f(this.posX - (float)k, this.posY + 7.99F, 0.0F);
-        GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, (float)j / 128.0F);
-        GlStateManager.glVertex3f(this.posX + f - 1.0F + (float)k, this.posY, 0.0F);
-        GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
-        GlStateManager.glVertex3f(this.posX + f - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
-        GlStateManager.glEnd();
+
+        NovaDraw.Vertex[] vertices = new NovaDraw.Vertex[]{
+                new NovaDraw.Vertex(this.posX + (float)k, this.posY,  (float) i / 128.0F, (float) j / 128.0F, color),
+                new NovaDraw.Vertex(this.posX - (float)k, this.posY + 7.99F,  (float)i / 128.0F, ((float)j + 7.99F) / 128.0F, color),
+                new NovaDraw.Vertex(this.posX + f - 1.0F + (float)k, this.posY,  ((float)i + f - 1.0F) / 128.0F, (float)j / 128.0F, color),
+                new NovaDraw.Vertex(this.posX + f - 1.0F - (float)k, this.posY + 7.99F,  ((float)i + f - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F, color)
+        };
+
+        Integer[] indices = new Integer[] {0, 1, 2, 2, 1, 3};
+
+        NovaDraw.draw(locationFontTexture, indices, vertices);
+
@@ -290 +272 @@ public class FontRenderer implements IResourceManagerReloadListener
-        this.renderEngine.bindTexture(this.getUnicodePageLocation(page));
+        this.textureManager.bindTexture(this.getUnicodePageLocation(page));
@@ -296,2 +278 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private float renderUnicodeChar(char ch, boolean italic)
-    {
+    private float renderUnicodeChar(char ch, boolean italic) {
@@ -300,2 +281 @@ public class FontRenderer implements IResourceManagerReloadListener
-        if (i == 0)
-        {
+        if (i == 0) {
@@ -303,5 +283,3 @@ public class FontRenderer implements IResourceManagerReloadListener
-        }
-        else
-        {
-            int j = ch / 256;
-            this.loadGlyphTexture(j);
+        } else {
+            int page = ch / 256;
+            this.loadGlyphTexture(page);
@@ -316,10 +294,14 @@ public class FontRenderer implements IResourceManagerReloadListener
-            GlStateManager.glBegin(5);
-            GlStateManager.glTexCoord2f(f2 / 256.0F, f3 / 256.0F);
-            GlStateManager.glVertex3f(this.posX + f5, this.posY, 0.0F);
-            GlStateManager.glTexCoord2f(f2 / 256.0F, (f3 + 15.98F) / 256.0F);
-            GlStateManager.glVertex3f(this.posX - f5, this.posY + 7.99F, 0.0F);
-            GlStateManager.glTexCoord2f((f2 + f4) / 256.0F, f3 / 256.0F);
-            GlStateManager.glVertex3f(this.posX + f4 / 2.0F + f5, this.posY, 0.0F);
-            GlStateManager.glTexCoord2f((f2 + f4) / 256.0F, (f3 + 15.98F) / 256.0F);
-            GlStateManager.glVertex3f(this.posX + f4 / 2.0F - f5, this.posY + 7.99F, 0.0F);
-            GlStateManager.glEnd();
+
+            ResourceLocation glyphTexture = getUnicodePageLocation(page);
+
+            NovaDraw.Vertex[] vertices = new NovaDraw.Vertex[]{
+                    new NovaDraw.Vertex(this.posX + f5, this.posY,  f2 / 256.0F, f3 / 256.0F, color),
+                    new NovaDraw.Vertex(this.posX - f5, this.posY + 7.99F,  f2 / 256.0F, (f3 + 15.98F) / 256.0F, color),
+                    new NovaDraw.Vertex(this.posX + f4 / 2.0F + f5, this.posY,  (f2 + f4) / 256.0F, f3 / 256.0F, color),
+                    new NovaDraw.Vertex(this.posX + f4 / 2.0F - f5, this.posY + 7.99F,  (f2 + f4) / 256.0F, (f3 + 15.98F) / 256.0F, color)
+            };
+
+            Integer[] indices = new Integer[] {0, 1, 2, 2, 1, 3};
+
+            NovaDraw.draw(glyphTexture, indices, vertices);
+
@@ -334,0 +317 @@ public class FontRenderer implements IResourceManagerReloadListener
+        NovaDraw.incrementZ();
@@ -349,2 +332 @@ public class FontRenderer implements IResourceManagerReloadListener
-    public int drawString(String text, float x, float y, int color, boolean dropShadow)
-    {
+    public int drawString(String text, float x, float y, int color, boolean dropShadow) {
@@ -355,7 +337,4 @@ public class FontRenderer implements IResourceManagerReloadListener
-        if (dropShadow)
-        {
-            i = this.renderString(text, x + 1.0F, y + 1.0F, color, true);
-            i = Math.max(i, this.renderString(text, x, y, color, false));
-        }
-        else
-        {
+        if (dropShadow) {
+            i = this.renderString(text, x, y, color, false);
+            i = Math.max(i, this.renderString(text, x + 1.0F, y + 1.0F, color, true));
+        } else {
@@ -400,5 +379,3 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private void renderStringAtPos(String text, boolean shadow)
-    {
-        for (int i = 0; i < text.length(); ++i)
-        {
-            char c0 = text.charAt(i);
+    private void renderStringAtPos(String text, boolean shadow) {
+        for (int i = 0; i < text.length(); ++i) {
+            char currentChar = text.charAt(i);
@@ -406,2 +383 @@ public class FontRenderer implements IResourceManagerReloadListener
-            if (c0 == 167 && i + 1 < text.length())
-            {
+            if (currentChar == 167 && i + 1 < text.length()) {
@@ -410,2 +386 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (i1 < 16)
-                {
+                if (i1 < 16) {
@@ -418,2 +393 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    if (i1 < 0 || i1 > 15)
-                    {
+                    if(i1 < 0 || i1 > 15) {
@@ -423,2 +397 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    if (shadow)
-                    {
+                    if(shadow) {
@@ -428,6 +401,8 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    int j1 = this.colorCode[i1];
-                    this.textColor = j1;
-                    GlStateManager.color((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
-                }
-                else if (i1 == 16)
-                {
+                    int colorCode = this.colorCodes[i1];
+                    this.textColor = colorCode;
+                    try {
+                        color = new Color(colorCode >> 16, colorCode >> 8 & 255, colorCode & 255, this.alpha * 255);
+                    } catch(IllegalArgumentException e) {
+                        boolean break_here = true;
+                    }
+                } else if(i1 == 16) {
@@ -435,3 +410 @@ public class FontRenderer implements IResourceManagerReloadListener
-                }
-                else if (i1 == 17)
-                {
+                } else if(i1 == 17) {
@@ -439,3 +412 @@ public class FontRenderer implements IResourceManagerReloadListener
-                }
-                else if (i1 == 18)
-                {
+                } else if(i1 == 18) {
@@ -443,3 +414 @@ public class FontRenderer implements IResourceManagerReloadListener
-                }
-                else if (i1 == 19)
-                {
+                } else if(i1 == 19) {
@@ -447,3 +416 @@ public class FontRenderer implements IResourceManagerReloadListener
-                }
-                else if (i1 == 20)
-                {
+                } else if(i1 == 20) {
@@ -451,3 +418 @@ public class FontRenderer implements IResourceManagerReloadListener
-                }
-                else if (i1 == 21)
-                {
+                } else if(i1 == 21) {
@@ -459 +424 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    GlStateManager.color(this.red, this.blue, this.green, this.alpha);
+                    color = new Color(red, green, blue, alpha);
@@ -463,4 +428,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-            }
-            else
-            {
-                int j = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(c0);
+            } else {
+                int characterIndex = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(currentChar);
@@ -468,3 +431,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (this.randomStyle && j != -1)
-                {
-                    int k = this.getCharWidth(c0);
+                if(this.randomStyle && characterIndex != -1) {
+                    int currentCharWidth = this.getCharWidth(currentChar);
@@ -473,4 +435,3 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    while (true)
-                    {
-                        j = this.fontRandom.nextInt("\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".length());
-                        c1 = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".charAt(j);
+                    while(true) {
+                        characterIndex = this.fontRandom.nextInt("\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".length());
+                        c1 = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".charAt(characterIndex);
@@ -478,2 +439 @@ public class FontRenderer implements IResourceManagerReloadListener
-                        if (k == this.getCharWidth(c1))
-                        {
+                        if(currentCharWidth == this.getCharWidth(c1)) {
@@ -484 +444 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    c0 = c1;
+                    currentChar = c1;
@@ -488 +448 @@ public class FontRenderer implements IResourceManagerReloadListener
-                boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;
+                boolean shiftForShadow = (currentChar == 0 || characterIndex == -1 || this.unicodeFlag) && shadow;
@@ -490,2 +450 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (flag)
-                {
+                if (shiftForShadow) {
@@ -496 +455 @@ public class FontRenderer implements IResourceManagerReloadListener
-                float f = this.renderChar(c0, this.italicStyle);
+                float f = this.renderChar(currentChar, this.italicStyle);
@@ -498,2 +457 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (flag)
-                {
+                if (shiftForShadow) {
@@ -504,2 +462 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (this.boldStyle)
-                {
+                if (this.boldStyle) {
@@ -508,2 +465 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    if (flag)
-                    {
+                    if(shiftForShadow) {
@@ -514 +470 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    this.renderChar(c0, this.italicStyle);
+                    this.renderChar(currentChar, this.italicStyle);
@@ -517,2 +473 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    if (flag)
-                    {
+                    if(shiftForShadow) {
@@ -526,2 +481 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (this.strikethroughStyle)
-                {
+                if (this.strikethroughStyle) {
@@ -532,4 +486,4 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    vertexbuffer.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
-                    vertexbuffer.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
-                    vertexbuffer.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
-                    vertexbuffer.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
+                    vertexbuffer.pos((double)this.posX,         (double)(this.posY + (float)(this.FONT_HEIGHT / 2)),        0.0D).endVertex();
+                    vertexbuffer.pos((double)(this.posX + f),   (double)(this.posY + (float)(this.FONT_HEIGHT / 2)),        0.0D).endVertex();
+                    vertexbuffer.pos((double)(this.posX + f),   (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
+                    vertexbuffer.pos((double)this.posX,         (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
@@ -540,2 +494 @@ public class FontRenderer implements IResourceManagerReloadListener
-                if (this.underlineStyle)
-                {
+                if (this.underlineStyle) {
@@ -547,4 +500,4 @@ public class FontRenderer implements IResourceManagerReloadListener
-                    vertexbuffer1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
-                    vertexbuffer1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
-                    vertexbuffer1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
-                    vertexbuffer1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
+                    vertexbuffer1.pos((double)(this.posX + (float)l),   (double)(this.posY + (float)this.FONT_HEIGHT),          0.0D).endVertex();
+                    vertexbuffer1.pos((double)(this.posX + f),          (double)(this.posY + (float)this.FONT_HEIGHT),          0.0D).endVertex();
+                    vertexbuffer1.pos((double)(this.posX + f),          (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F),   0.0D).endVertex();
+                    vertexbuffer1.pos((double)(this.posX + (float)l),   (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F),   0.0D).endVertex();
@@ -577,4 +530,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-    private int renderString(String text, float x, float y, int color, boolean dropShadow)
-    {
-        if (text == null)
-        {
+    private int renderString(String text, float x, float y, int color, boolean dropShadow) {
+        if(text == null) {
@@ -582,5 +533,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-        }
-        else
-        {
-            if (this.bidiFlag)
-            {
+        } else {
+            if(this.bidiFlag) {
@@ -590,2 +538 @@ public class FontRenderer implements IResourceManagerReloadListener
-            if ((color & -67108864) == 0)
-            {
+            if((color & -67108864) == 0) {
@@ -595,3 +542,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-            if (dropShadow)
-            {
-                color = (color & 16579836) >> 2 | color & -16777216;
+            if(dropShadow) {
+                color = (color & 0x00FCFCFC) >> 2 | color & -16777216;
@@ -601,2 +547,2 @@ public class FontRenderer implements IResourceManagerReloadListener
-            this.blue = (float)(color >> 8 & 255) / 255.0F;
-            this.green = (float)(color & 255) / 255.0F;
+            this.green = (float)(color >> 8 & 255) / 255.0F;
+            this.blue = (float)(color & 255) / 255.0F;
@@ -604 +550 @@ public class FontRenderer implements IResourceManagerReloadListener
-            GlStateManager.color(this.red, this.blue, this.green, this.alpha);
+            this.color = new Color(red, green, blue, alpha);
@@ -994 +940 @@ public class FontRenderer implements IResourceManagerReloadListener
-        return i >= 0 && i < this.colorCode.length ? this.colorCode[i] : -1;
+        return i >= 0 && i < this.colorCodes.length ? this.colorCodes[i] : -1;
diff --git a/minecraft/client/gui/Gui.java b/minecraft/client/gui/Gui.java
index 58e6a77..0fcfa0b 100644
--- a/minecraft/client/gui/Gui.java
+++ b/minecraft/client/gui/Gui.java
@@ -13,2 +13,2 @@ public class Gui
-    public static final ResourceLocation STAT_ICONS = new ResourceLocation("textures/gui/container/stats_icons.png");
-    public static final ResourceLocation ICONS = new ResourceLocation("textures/gui/icons.png");
+    public static final ResourceLocation STAT_ICONS = new ResourceLocation("gui/container/stats_icons");
+    public static final ResourceLocation ICONS = new ResourceLocation("gui/icons");
@@ -140,2 +139,0 @@ public class Gui
-        float f = 0.00390625F;
-        float f1 = 0.00390625F;
@@ -145,4 +143,4 @@ public class Gui
-        vertexbuffer.pos((double)(x + 0), (double)(y + height), (double)this.zLevel).tex((double)((float)(textureX + 0) * 0.00390625F), (double)((float)(textureY + height) * 0.00390625F)).endVertex();
-        vertexbuffer.pos((double)(x + width), (double)(y + height), (double)this.zLevel).tex((double)((float)(textureX + width) * 0.00390625F), (double)((float)(textureY + height) * 0.00390625F)).endVertex();
-        vertexbuffer.pos((double)(x + width), (double)(y + 0), (double)this.zLevel).tex((double)((float)(textureX + width) * 0.00390625F), (double)((float)(textureY + 0) * 0.00390625F)).endVertex();
-        vertexbuffer.pos((double)(x + 0), (double)(y + 0), (double)this.zLevel).tex((double)((float)(textureX + 0) * 0.00390625F), (double)((float)(textureY + 0) * 0.00390625F)).endVertex();
+        vertexbuffer.pos((double)(x + 0),       (double)(y + height),   (double)this.zLevel).tex((double)((float)(textureX + 0) * 0.00390625F),     (double)((float)(textureY + height) * 0.00390625F)).endVertex();
+        vertexbuffer.pos((double)(x + width),   (double)(y + height),   (double)this.zLevel).tex((double)((float)(textureX + width) * 0.00390625F), (double)((float)(textureY + height) * 0.00390625F)).endVertex();
+        vertexbuffer.pos((double)(x + width),   (double)(y + 0),        (double)this.zLevel).tex((double)((float)(textureX + width) * 0.00390625F), (double)((float)(textureY + 0) * 0.00390625F)).endVertex();
+        vertexbuffer.pos((double)(x + 0),       (double)(y + 0),        (double)this.zLevel).tex((double)((float)(textureX + 0) * 0.00390625F),     (double)((float)(textureY + 0) * 0.00390625F)).endVertex();
@@ -216,0 +215 @@ public class Gui
+
diff --git a/minecraft/client/gui/GuiBossOverlay.java b/minecraft/client/gui/GuiBossOverlay.java
index 3a22338..db25fb1 100644
--- a/minecraft/client/gui/GuiBossOverlay.java
+++ b/minecraft/client/gui/GuiBossOverlay.java
@@ -36 +36 @@ public class GuiBossOverlay extends Gui
-                this.client.getTextureManager().bindTexture(GUI_BARS_TEXTURES);
+                this.client.getRenderEngine().bindTexture(GUI_BARS_TEXTURES);
diff --git a/minecraft/client/gui/GuiButton.java b/minecraft/client/gui/GuiButton.java
index 93eccc5..55bd5ca 100644
--- a/minecraft/client/gui/GuiButton.java
+++ b/minecraft/client/gui/GuiButton.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -9,0 +11,3 @@ import net.minecraft.util.ResourceLocation;
+import java.awt.*;
+import java.awt.geom.Rectangle2D;
+
@@ -12 +16 @@ public class GuiButton extends Gui
-    protected static final ResourceLocation BUTTON_TEXTURES = new ResourceLocation("textures/gui/widgets.png");
+    protected static final ResourceLocation BUTTON_TEXTURES = new ResourceLocation("gui/widgets");
@@ -36,0 +41,7 @@ public class GuiButton extends Gui
+    protected float[] std_button_loc = {
+            0.0f, 0.1796862f,
+            0.78125f, 0.3359375f
+    };
+    protected float widgetsTextureFactor = 0.00390625F;
+
+
@@ -83,3 +94 @@ public class GuiButton extends Gui
-            FontRenderer fontrenderer = mc.fontRendererObj;
-            mc.getTextureManager().bindTexture(BUTTON_TEXTURES);
-            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+            float offsetY;
@@ -87,16 +96,24 @@ public class GuiButton extends Gui
-            int i = this.getHoverState(this.hovered);
-            GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-            GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-            this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 46 + i * 20, this.width / 2, this.height);
-            this.drawTexturedModalRect(this.xPosition + this.width / 2, this.yPosition, 200 - this.width / 2, 46 + i * 20, this.width / 2, this.height);
-            this.mouseDragged(mc, mouseX, mouseY);
-            int j = 14737632;
-
-            if (!this.enabled)
-            {
-                j = 10526880;
-            }
-            else if (this.hovered)
-            {
-                j = 16777120;
+            int drawState = getHoverState(hovered);
+            offsetY =(float) drawState * 0.078125f;
+            NovaDraw.incrementZ();
+			  
+			NovaDraw.drawRectangle(
+                    BUTTON_TEXTURES,
+                    new Rectangle2D.Float(xPosition, yPosition, width / 2, height),
+                    new Rectangle2D.Float(
+                            std_button_loc[0], std_button_loc[1] + offsetY,
+                            width / 2 * widgetsTextureFactor, height * widgetsTextureFactor)
+            );
+            NovaDraw.drawRectangle(
+                    BUTTON_TEXTURES,
+                    new Rectangle2D.Float(xPosition + width / 2, yPosition, width / 2, height),
+                    new Rectangle2D.Float(
+                            std_button_loc[2] - ((width / 2) * widgetsTextureFactor), std_button_loc[1] + offsetY,
+                            (width / 2) * widgetsTextureFactor, height * widgetsTextureFactor)
+            );
+            this.mouseDragged(Minecraft.getMinecraft(), NovaDraw.getMouseX(), NovaDraw.getMouseY());
+            int color = 0x00E0E0E0;
+            if(!this.enabled) {
+                color = 0x00A0A0A0;
+            } else if(this.hovered) {
+                color = 0x00FFFFA0;
@@ -105 +122,3 @@ public class GuiButton extends Gui
-            this.drawCenteredString(fontrenderer, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, j);
+            FontRenderer fontrenderer = Minecraft.getMinecraft().fontRendererObj;
+            this.drawCenteredString(fontrenderer, this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, color);
+
@@ -112,3 +131 @@ public class GuiButton extends Gui
-    protected void mouseDragged(Minecraft mc, int mouseX, int mouseY)
-    {
-    }
+    protected void mouseDragged(Minecraft mc, int mouseX, int mouseY) {    }
@@ -119,3 +136 @@ public class GuiButton extends Gui
-    public void mouseReleased(int mouseX, int mouseY)
-    {
-    }
+    public void mouseReleased(int mouseX, int mouseY) {    }
@@ -157,0 +173,2 @@ public class GuiButton extends Gui
+
+    
diff --git a/minecraft/client/gui/GuiButtonLanguage.java b/minecraft/client/gui/GuiButtonLanguage.java
index e0dd308..269163c 100644
--- a/minecraft/client/gui/GuiButtonLanguage.java
+++ b/minecraft/client/gui/GuiButtonLanguage.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -5,0 +7,2 @@ import net.minecraft.client.renderer.GlStateManager;
+import java.awt.geom.Rectangle2D;
+
@@ -15,0 +19 @@ public class GuiButtonLanguage extends GuiButton
+    @Override
@@ -20,4 +23,0 @@ public class GuiButtonLanguage extends GuiButton
-            mc.getTextureManager().bindTexture(GuiButton.BUTTON_TEXTURES);
-            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-            boolean flag = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;
-            int i = 106;
@@ -25,4 +25 @@ public class GuiButtonLanguage extends GuiButton
-            if (flag)
-            {
-                i += this.height;
-            }
+            NovaDraw.incrementZ();
@@ -30 +27,7 @@ public class GuiButtonLanguage extends GuiButton
-            this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, i, this.width, this.height);
+            NovaDraw.drawRectangle(
+                    BUTTON_TEXTURES,
+                    new Rectangle2D.Float(xPosition, yPosition, width, height),
+                    new Rectangle2D.Float(
+                            0, 0.4140625f + (hovered ? 0.078125f : 0),
+                            width * widgetsTextureFactor, height * widgetsTextureFactor)
+            );
@@ -32,0 +36,5 @@ public class GuiButtonLanguage extends GuiButton
+
+
+    public void drawNova() {
+
+    }
diff --git a/minecraft/client/gui/GuiChat.java b/minecraft/client/gui/GuiChat.java
index 394b393..1435e9a 100644
--- a/minecraft/client/gui/GuiChat.java
+++ b/minecraft/client/gui/GuiChat.java
@@ -15,2 +15,2 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Keyboard;
+import com.continuum.nova.input.Mouse;
diff --git a/minecraft/client/gui/GuiClickableScrolledSelectionListProxy.java b/minecraft/client/gui/GuiClickableScrolledSelectionListProxy.java
index a09d020..938919a 100644
--- a/minecraft/client/gui/GuiClickableScrolledSelectionListProxy.java
+++ b/minecraft/client/gui/GuiClickableScrolledSelectionListProxy.java
@@ -6 +6 @@ import net.minecraft.realms.Tezzelator;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Mouse;
diff --git a/minecraft/client/gui/GuiCommandBlock.java b/minecraft/client/gui/GuiCommandBlock.java
index ec7e43b..c274600 100644
--- a/minecraft/client/gui/GuiCommandBlock.java
+++ b/minecraft/client/gui/GuiCommandBlock.java
@@ -15 +15 @@ import net.minecraft.util.text.ITextComponent;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -59,6 +59,6 @@ public class GuiCommandBlock extends GuiScreen implements ITabCompleter
-        this.doneBtn = this.func_189646_b(new GuiButton(0, this.width / 2 - 4 - 150, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.done", new Object[0])));
-        this.cancelBtn = this.func_189646_b(new GuiButton(1, this.width / 2 + 4, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.cancel", new Object[0])));
-        this.outputBtn = this.func_189646_b(new GuiButton(4, this.width / 2 + 150 - 20, 135, 20, 20, "O"));
-        this.modeBtn = this.func_189646_b(new GuiButton(5, this.width / 2 - 50 - 100 - 4, 165, 100, 20, I18n.format("advMode.mode.sequence", new Object[0])));
-        this.conditionalBtn = this.func_189646_b(new GuiButton(6, this.width / 2 - 50, 165, 100, 20, I18n.format("advMode.mode.unconditional", new Object[0])));
-        this.autoExecBtn = this.func_189646_b(new GuiButton(7, this.width / 2 + 50 + 4, 165, 100, 20, I18n.format("advMode.mode.redstoneTriggered", new Object[0])));
+        this.doneBtn = this.addToButtonList(new GuiButton(0, this.width / 2 - 4 - 150, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.done", new Object[0])));
+        this.cancelBtn = this.addToButtonList(new GuiButton(1, this.width / 2 + 4, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.cancel", new Object[0])));
+        this.outputBtn = this.addToButtonList(new GuiButton(4, this.width / 2 + 150 - 20, 135, 20, 20, "O"));
+        this.modeBtn = this.addToButtonList(new GuiButton(5, this.width / 2 - 50 - 100 - 4, 165, 100, 20, I18n.format("advMode.mode.sequence", new Object[0])));
+        this.conditionalBtn = this.addToButtonList(new GuiButton(6, this.width / 2 - 50, 165, 100, 20, I18n.format("advMode.mode.unconditional", new Object[0])));
+        this.autoExecBtn = this.addToButtonList(new GuiButton(7, this.width / 2 + 50 + 4, 165, 100, 20, I18n.format("advMode.mode.redstoneTriggered", new Object[0])));
diff --git a/minecraft/client/gui/GuiControls.java b/minecraft/client/gui/GuiControls.java
index 5feec7d..5d3f5b5 100644
--- a/minecraft/client/gui/GuiControls.java
+++ b/minecraft/client/gui/GuiControls.java
@@ -42 +42 @@ public class GuiControls extends GuiScreen
-        this.buttonReset = this.func_189646_b(new GuiButton(201, this.width / 2 - 155 + 160, this.height - 29, 150, 20, I18n.format("controls.resetAll", new Object[0])));
+        this.buttonReset = this.addToButtonList(new GuiButton(201, this.width / 2 - 155 + 160, this.height - 29, 150, 20, I18n.format("controls.resetAll", new Object[0])));
diff --git a/minecraft/client/gui/GuiCreateFlatWorld.java b/minecraft/client/gui/GuiCreateFlatWorld.java
index 54f0ab2..9797d98 100644
--- a/minecraft/client/gui/GuiCreateFlatWorld.java
+++ b/minecraft/client/gui/GuiCreateFlatWorld.java
@@ -76,3 +76,3 @@ public class GuiCreateFlatWorld extends GuiScreen
-        this.addLayerButton = this.func_189646_b(new GuiButton(2, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("createWorld.customize.flat.addLayer", new Object[0]) + " (NYI)"));
-        this.editLayerButton = this.func_189646_b(new GuiButton(3, this.width / 2 - 50, this.height - 52, 100, 20, I18n.format("createWorld.customize.flat.editLayer", new Object[0]) + " (NYI)"));
-        this.removeLayerButton = this.func_189646_b(new GuiButton(4, this.width / 2 - 155, this.height - 52, 150, 20, I18n.format("createWorld.customize.flat.removeLayer", new Object[0])));
+        this.addLayerButton = this.addToButtonList(new GuiButton(2, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("createWorld.customize.flat.addLayer", new Object[0]) + " (NYI)"));
+        this.editLayerButton = this.addToButtonList(new GuiButton(3, this.width / 2 - 50, this.height - 52, 100, 20, I18n.format("createWorld.customize.flat.editLayer", new Object[0]) + " (NYI)"));
+        this.removeLayerButton = this.addToButtonList(new GuiButton(4, this.width / 2 - 155, this.height - 52, 150, 20, I18n.format("createWorld.customize.flat.removeLayer", new Object[0])));
@@ -194 +194 @@ public class GuiCreateFlatWorld extends GuiScreen
-            this.mc.getTextureManager().bindTexture(Gui.STAT_ICONS);
+            this.mc.getRenderEngine().bindTexture(Gui.STAT_ICONS);
diff --git a/minecraft/client/gui/GuiCreateWorld.java b/minecraft/client/gui/GuiCreateWorld.java
index e4b46a9..f022d12 100644
--- a/minecraft/client/gui/GuiCreateWorld.java
+++ b/minecraft/client/gui/GuiCreateWorld.java
@@ -13 +13 @@ import org.apache.commons.lang3.StringUtils;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -86,3 +86,3 @@ public class GuiCreateWorld extends GuiScreen
-        this.btnGameMode = this.func_189646_b(new GuiButton(2, this.width / 2 - 75, 115, 150, 20, I18n.format("selectWorld.gameMode", new Object[0])));
-        this.btnMoreOptions = this.func_189646_b(new GuiButton(3, this.width / 2 - 75, 187, 150, 20, I18n.format("selectWorld.moreWorldOptions", new Object[0])));
-        this.btnMapFeatures = this.func_189646_b(new GuiButton(4, this.width / 2 - 155, 100, 150, 20, I18n.format("selectWorld.mapFeatures", new Object[0])));
+        this.btnGameMode = this.addToButtonList(new GuiButton(2, this.width / 2 - 75, 115, 150, 20, I18n.format("selectWorld.gameMode", new Object[0])));
+        this.btnMoreOptions = this.addToButtonList(new GuiButton(3, this.width / 2 - 75, 187, 150, 20, I18n.format("selectWorld.moreWorldOptions", new Object[0])));
+        this.btnMapFeatures = this.addToButtonList(new GuiButton(4, this.width / 2 - 155, 100, 150, 20, I18n.format("selectWorld.mapFeatures", new Object[0])));
@@ -90 +90 @@ public class GuiCreateWorld extends GuiScreen
-        this.btnBonusItems = this.func_189646_b(new GuiButton(7, this.width / 2 + 5, 151, 150, 20, I18n.format("selectWorld.bonusItems", new Object[0])));
+        this.btnBonusItems = this.addToButtonList(new GuiButton(7, this.width / 2 + 5, 151, 150, 20, I18n.format("selectWorld.bonusItems", new Object[0])));
@@ -92 +92 @@ public class GuiCreateWorld extends GuiScreen
-        this.btnMapType = this.func_189646_b(new GuiButton(5, this.width / 2 + 5, 100, 150, 20, I18n.format("selectWorld.mapType", new Object[0])));
+        this.btnMapType = this.addToButtonList(new GuiButton(5, this.width / 2 + 5, 100, 150, 20, I18n.format("selectWorld.mapType", new Object[0])));
@@ -94 +94 @@ public class GuiCreateWorld extends GuiScreen
-        this.btnAllowCommands = this.func_189646_b(new GuiButton(6, this.width / 2 - 155, 151, 150, 20, I18n.format("selectWorld.allowCommands", new Object[0])));
+        this.btnAllowCommands = this.addToButtonList(new GuiButton(6, this.width / 2 - 155, 151, 150, 20, I18n.format("selectWorld.allowCommands", new Object[0])));
@@ -96 +96 @@ public class GuiCreateWorld extends GuiScreen
-        this.btnCustomizeType = this.func_189646_b(new GuiButton(8, this.width / 2 + 5, 120, 150, 20, I18n.format("selectWorld.customizeType", new Object[0])));
+        this.btnCustomizeType = this.addToButtonList(new GuiButton(8, this.width / 2 + 5, 120, 150, 20, I18n.format("selectWorld.customizeType", new Object[0])));
diff --git a/minecraft/client/gui/GuiCustomizeWorldScreen.java b/minecraft/client/gui/GuiCustomizeWorldScreen.java
index 88f2002..5b19599 100644
--- a/minecraft/client/gui/GuiCustomizeWorldScreen.java
+++ b/minecraft/client/gui/GuiCustomizeWorldScreen.java
@@ -74,6 +74,6 @@ public class GuiCustomizeWorldScreen extends GuiScreen implements GuiSlider.Form
-        this.previousPage = this.func_189646_b(new GuiButton(302, 20, 5, 80, 20, I18n.format("createWorld.customize.custom.prev", new Object[0])));
-        this.nextPage = this.func_189646_b(new GuiButton(303, this.width - 100, 5, 80, 20, I18n.format("createWorld.customize.custom.next", new Object[0])));
-        this.defaults = this.func_189646_b(new GuiButton(304, this.width / 2 - 187, this.height - 27, 90, 20, I18n.format("createWorld.customize.custom.defaults", new Object[0])));
-        this.randomize = this.func_189646_b(new GuiButton(301, this.width / 2 - 92, this.height - 27, 90, 20, I18n.format("createWorld.customize.custom.randomize", new Object[0])));
-        this.presets = this.func_189646_b(new GuiButton(305, this.width / 2 + 3, this.height - 27, 90, 20, I18n.format("createWorld.customize.custom.presets", new Object[0])));
-        this.done = this.func_189646_b(new GuiButton(300, this.width / 2 + 98, this.height - 27, 90, 20, I18n.format("gui.done", new Object[0])));
+        this.previousPage = this.addToButtonList(new GuiButton(302, 20, 5, 80, 20, I18n.format("createWorld.customize.custom.prev", new Object[0])));
+        this.nextPage = this.addToButtonList(new GuiButton(303, this.width - 100, 5, 80, 20, I18n.format("createWorld.customize.custom.next", new Object[0])));
+        this.defaults = this.addToButtonList(new GuiButton(304, this.width / 2 - 187, this.height - 27, 90, 20, I18n.format("createWorld.customize.custom.defaults", new Object[0])));
+        this.randomize = this.addToButtonList(new GuiButton(301, this.width / 2 - 92, this.height - 27, 90, 20, I18n.format("createWorld.customize.custom.randomize", new Object[0])));
+        this.presets = this.addToButtonList(new GuiButton(305, this.width / 2 + 3, this.height - 27, 90, 20, I18n.format("createWorld.customize.custom.presets", new Object[0])));
+        this.done = this.addToButtonList(new GuiButton(300, this.width / 2 + 98, this.height - 27, 90, 20, I18n.format("gui.done", new Object[0])));
@@ -1007 +1007 @@ public class GuiCustomizeWorldScreen extends GuiScreen implements GuiSlider.Form
-            this.mc.getTextureManager().bindTexture(OPTIONS_BACKGROUND);
+            this.mc.getRenderEngine().bindTexture(OPTIONS_BACKGROUND);
diff --git a/minecraft/client/gui/GuiDownloadTerrain.java b/minecraft/client/gui/GuiDownloadTerrain.java
index f468550..09fba11 100644
--- a/minecraft/client/gui/GuiDownloadTerrain.java
+++ b/minecraft/client/gui/GuiDownloadTerrain.java
@@ -21,0 +22 @@ public class GuiDownloadTerrain extends GuiScreen
+    @Override
@@ -29,0 +31 @@ public class GuiDownloadTerrain extends GuiScreen
+    @Override
@@ -37,0 +40 @@ public class GuiDownloadTerrain extends GuiScreen
+    @Override
@@ -50,0 +54 @@ public class GuiDownloadTerrain extends GuiScreen
+    @Override
@@ -60,0 +65 @@ public class GuiDownloadTerrain extends GuiScreen
+    @Override
diff --git a/minecraft/client/gui/GuiEnchantment.java b/minecraft/client/gui/GuiEnchantment.java
index 5fd0e25..b07c082 100644
--- a/minecraft/client/gui/GuiEnchantment.java
+++ b/minecraft/client/gui/GuiEnchantment.java
@@ -109 +109 @@ public class GuiEnchantment extends GuiContainer
-        this.mc.getTextureManager().bindTexture(ENCHANTMENT_TABLE_GUI_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(ENCHANTMENT_TABLE_GUI_TEXTURE);
@@ -130 +130 @@ public class GuiEnchantment extends GuiContainer
-        this.mc.getTextureManager().bindTexture(ENCHANTMENT_TABLE_BOOK_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(ENCHANTMENT_TABLE_BOOK_TEXTURE);
@@ -180 +180 @@ public class GuiEnchantment extends GuiContainer
-            this.mc.getTextureManager().bindTexture(ENCHANTMENT_TABLE_GUI_TEXTURE);
+            this.mc.getRenderEngine().bindTexture(ENCHANTMENT_TABLE_GUI_TEXTURE);
diff --git a/minecraft/client/gui/GuiFlatPresets.java b/minecraft/client/gui/GuiFlatPresets.java
index 5aaeab1..8df673f 100644
--- a/minecraft/client/gui/GuiFlatPresets.java
+++ b/minecraft/client/gui/GuiFlatPresets.java
@@ -24 +24 @@ import net.minecraft.world.gen.FlatLayerInfo;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -59 +59 @@ public class GuiFlatPresets extends GuiScreen
-        this.btnSelect = this.func_189646_b(new GuiButton(0, this.width / 2 - 155, this.height - 28, 150, 20, I18n.format("createWorld.customize.presets.select", new Object[0])));
+        this.btnSelect = this.addToButtonList(new GuiButton(0, this.width / 2 - 155, this.height - 28, 150, 20, I18n.format("createWorld.customize.presets.select", new Object[0])));
@@ -240 +240 @@ public class GuiFlatPresets extends GuiScreen
-            this.mc.getTextureManager().bindTexture(Gui.STAT_ICONS);
+            this.mc.getRenderEngine().bindTexture(Gui.STAT_ICONS);
diff --git a/minecraft/client/gui/GuiHopper.java b/minecraft/client/gui/GuiHopper.java
index 86eeb22..b967bb5 100644
--- a/minecraft/client/gui/GuiHopper.java
+++ b/minecraft/client/gui/GuiHopper.java
@@ -46 +46 @@ public class GuiHopper extends GuiContainer
-        this.mc.getTextureManager().bindTexture(HOPPER_GUI_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(HOPPER_GUI_TEXTURE);
diff --git a/minecraft/client/gui/GuiIngame.java b/minecraft/client/gui/GuiIngame.java
index a623c57..7997b66 100644
--- a/minecraft/client/gui/GuiIngame.java
+++ b/minecraft/client/gui/GuiIngame.java
@@ -183 +183 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(ICONS);
+        this.mc.getRenderEngine().bindTexture(ICONS);
@@ -191 +191 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(ICONS);
+        this.mc.getRenderEngine().bindTexture(ICONS);
@@ -442 +442 @@ public class GuiIngame extends Gui
-            this.mc.getTextureManager().bindTexture(GuiContainer.INVENTORY_BACKGROUND);
+            this.mc.getRenderEngine().bindTexture(GuiContainer.INVENTORY_BACKGROUND);
@@ -499 +499 @@ public class GuiIngame extends Gui
-            this.mc.getTextureManager().bindTexture(WIDGETS_TEX_PATH);
+            this.mc.getRenderEngine().bindTexture(WIDGETS_TEX_PATH);
@@ -564 +564 @@ public class GuiIngame extends Gui
-                    this.mc.getTextureManager().bindTexture(Gui.ICONS);
+                    this.mc.getRenderEngine().bindTexture(Gui.ICONS);
@@ -581 +581 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(Gui.ICONS);
+        this.mc.getRenderEngine().bindTexture(Gui.ICONS);
@@ -599 +599 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(Gui.ICONS);
+        this.mc.getRenderEngine().bindTexture(Gui.ICONS);
@@ -1035 +1035 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(PUMPKIN_BLUR_TEX_PATH);
+        this.mc.getRenderEngine().bindTexture(PUMPKIN_BLUR_TEX_PATH);
@@ -1085 +1085 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(VIGNETTE_TEX_PATH);
+        this.mc.getRenderEngine().bindTexture(VIGNETTE_TEX_PATH);
@@ -1114 +1114 @@ public class GuiIngame extends Gui
-        this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
diff --git a/minecraft/client/gui/GuiIngameMenu.java b/minecraft/client/gui/GuiIngameMenu.java
index 7dec74c..abdaed0 100644
--- a/minecraft/client/gui/GuiIngameMenu.java
+++ b/minecraft/client/gui/GuiIngameMenu.java
@@ -34 +34 @@ public class GuiIngameMenu extends GuiScreen
-        GuiButton guibutton = this.func_189646_b(new GuiButton(7, this.width / 2 + 2, this.height / 4 + 96 + -16, 98, 20, I18n.format("menu.shareToLan", new Object[0])));
+        GuiButton guibutton = this.addToButtonList(new GuiButton(7, this.width / 2 + 2, this.height / 4 + 96 + -16, 98, 20, I18n.format("menu.shareToLan", new Object[0])));
diff --git a/minecraft/client/gui/GuiLabel.java b/minecraft/client/gui/GuiLabel.java
index 8185bd1..4feb389 100644
--- a/minecraft/client/gui/GuiLabel.java
+++ b/minecraft/client/gui/GuiLabel.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -62,0 +64 @@ public class GuiLabel extends Gui
+            NovaDraw.incrementZ();
diff --git a/minecraft/client/gui/GuiLanguage.java b/minecraft/client/gui/GuiLanguage.java
index 35d69df..82e507f 100644
--- a/minecraft/client/gui/GuiLanguage.java
+++ b/minecraft/client/gui/GuiLanguage.java
@@ -48,2 +48,2 @@ public class GuiLanguage extends GuiScreen
-        this.forceUnicodeFontBtn = (GuiOptionButton)this.func_189646_b(new GuiOptionButton(100, this.width / 2 - 155, this.height - 38, GameSettings.Options.FORCE_UNICODE_FONT, this.game_settings_3.getKeyBinding(GameSettings.Options.FORCE_UNICODE_FONT)));
-        this.confirmSettingsBtn = (GuiOptionButton)this.func_189646_b(new GuiOptionButton(6, this.width / 2 - 155 + 160, this.height - 38, I18n.format("gui.done", new Object[0])));
+        this.forceUnicodeFontBtn = (GuiOptionButton)this.addToButtonList(new GuiOptionButton(100, this.width / 2 - 155, this.height - 38, GameSettings.Options.FORCE_UNICODE_FONT, this.game_settings_3.getKeyBinding(GameSettings.Options.FORCE_UNICODE_FONT)));
+        this.confirmSettingsBtn = (GuiOptionButton)this.addToButtonList(new GuiOptionButton(6, this.width / 2 - 155 + 160, this.height - 38, I18n.format("gui.done", new Object[0])));
diff --git a/minecraft/client/gui/GuiListExtended.java b/minecraft/client/gui/GuiListExtended.java
index 3f313bc..6a8a5e5 100644
--- a/minecraft/client/gui/GuiListExtended.java
+++ b/minecraft/client/gui/GuiListExtended.java
@@ -5,2 +5 @@ import net.minecraft.client.Minecraft;
-public abstract class GuiListExtended extends GuiSlot
-{
+public abstract class GuiListExtended extends GuiSlot {
@@ -14,0 +14 @@ public abstract class GuiListExtended extends GuiSlot
+    @Override
@@ -21,0 +22 @@ public abstract class GuiListExtended extends GuiSlot
+    @Override
@@ -26,0 +28 @@ public abstract class GuiListExtended extends GuiSlot
+    @Override
@@ -31,2 +33,2 @@ public abstract class GuiListExtended extends GuiSlot
-    protected void drawSlot(int entryID, int insideLeft, int yPos, int insideSlotHeight, int mouseXIn, int mouseYIn)
-    {
+    @Override
+    protected void drawSlot(int entryID, int insideLeft, int yPos, int insideSlotHeight, int mouseXIn, int mouseYIn) {
@@ -35,0 +38 @@ public abstract class GuiListExtended extends GuiSlot
+    @Override
@@ -41,4 +44,2 @@ public abstract class GuiListExtended extends GuiSlot
-    public boolean mouseClicked(int mouseX, int mouseY, int mouseEvent)
-    {
-        if (this.isMouseYWithinSlotBounds(mouseY))
-        {
+    public boolean mouseClicked(int mouseX, int mouseY, int mouseEvent) {
+        if (this.isMouseYWithinSlotBounds(mouseY)) {
@@ -47,2 +48 @@ public abstract class GuiListExtended extends GuiSlot
-            if (i >= 0)
-            {
+            if (i >= 0) {
@@ -54,2 +54 @@ public abstract class GuiListExtended extends GuiSlot
-                if (this.getListEntry(i).mousePressed(i, mouseX, mouseY, mouseEvent, l, i1))
-                {
+                if (this.getListEntry(i).mousePressed(i, mouseX, mouseY, mouseEvent, l, i1)) {
@@ -65,4 +64,2 @@ public abstract class GuiListExtended extends GuiSlot
-    public boolean mouseReleased(int p_148181_1_, int p_148181_2_, int p_148181_3_)
-    {
-        for (int i = 0; i < this.getSize(); ++i)
-        {
+    public boolean mouseReleased(int p_148181_1_, int p_148181_2_, int p_148181_3_) {
+        for (int i = 0; i < this.getSize(); ++i) {
@@ -85,2 +82 @@ public abstract class GuiListExtended extends GuiSlot
-    public interface IGuiListEntry
-    {
+    public interface IGuiListEntry {
diff --git a/minecraft/client/gui/GuiListWorldSelection.java b/minecraft/client/gui/GuiListWorldSelection.java
index d9c0252..6d403b1 100644
--- a/minecraft/client/gui/GuiListWorldSelection.java
+++ b/minecraft/client/gui/GuiListWorldSelection.java
@@ -14,2 +14 @@ import org.apache.logging.log4j.Logger;
-public class GuiListWorldSelection extends GuiListExtended
-{
+public class GuiListWorldSelection extends GuiListExtended {
@@ -23,4 +22,3 @@ public class GuiListWorldSelection extends GuiListExtended
-    public GuiListWorldSelection(GuiWorldSelection p_i46590_1_, Minecraft clientIn, int p_i46590_3_, int p_i46590_4_, int p_i46590_5_, int p_i46590_6_, int p_i46590_7_)
-    {
-        super(clientIn, p_i46590_3_, p_i46590_4_, p_i46590_5_, p_i46590_6_, p_i46590_7_);
-        this.worldSelectionObj = p_i46590_1_;
+    public GuiListWorldSelection(GuiWorldSelection worldSelection, Minecraft clientIn, int widthIn, int heightIn, int topIn, int bottomIn, int slotHeightIn) {
+        super(clientIn, widthIn, heightIn, topIn, bottomIn, slotHeightIn);
+        this.worldSelectionObj = worldSelection;
@@ -30,2 +28 @@ public class GuiListWorldSelection extends GuiListExtended
-    public void refreshList()
-    {
+    public void refreshList() {
@@ -35,2 +32 @@ public class GuiListWorldSelection extends GuiListExtended
-        try
-        {
+        try {
@@ -38,4 +34,2 @@ public class GuiListWorldSelection extends GuiListExtended
-        }
-        catch (AnvilConverterException anvilconverterexception)
-        {
-            LOGGER.error((String)"Couldn\'t load level list", (Throwable)anvilconverterexception);
+        } catch (AnvilConverterException anvilconverterexception) {
+            LOGGER.error("Couldn\'t load level list", anvilconverterexception);
@@ -48,2 +42 @@ public class GuiListWorldSelection extends GuiListExtended
-        for (WorldSummary worldsummary : list)
-        {
+        for (WorldSummary worldsummary : list) {
@@ -57,3 +50,3 @@ public class GuiListWorldSelection extends GuiListExtended
-    public GuiListWorldSelectionEntry getListEntry(int index)
-    {
-        return (GuiListWorldSelectionEntry)this.entries.get(index);
+    @Override
+    public GuiListWorldSelectionEntry getListEntry(int index) {
+        return this.entries.get(index);
@@ -62,2 +55,2 @@ public class GuiListWorldSelection extends GuiListExtended
-    protected int getSize()
-    {
+    @Override
+    protected int getSize() {
@@ -67,2 +60,2 @@ public class GuiListWorldSelection extends GuiListExtended
-    protected int getScrollBarX()
-    {
+    @Override
+    protected int getScrollBarX() {
@@ -75,2 +68,2 @@ public class GuiListWorldSelection extends GuiListExtended
-    public int getListWidth()
-    {
+    @Override
+    public int getListWidth() {
@@ -80,2 +73 @@ public class GuiListWorldSelection extends GuiListExtended
-    public void selectWorld(int idx)
-    {
+    public void selectWorld(int idx) {
@@ -88,0 +81 @@ public class GuiListWorldSelection extends GuiListExtended
+    @Override
@@ -95,2 +88 @@ public class GuiListWorldSelection extends GuiListExtended
-    public GuiListWorldSelectionEntry getSelectedWorld()
-    {
+    public GuiListWorldSelectionEntry getSelectedWorld() {
@@ -100,2 +92 @@ public class GuiListWorldSelection extends GuiListExtended
-    public GuiWorldSelection getGuiWorldSelection()
-    {
+    public GuiWorldSelection getGuiWorldSelection() {
diff --git a/minecraft/client/gui/GuiListWorldSelectionEntry.java b/minecraft/client/gui/GuiListWorldSelectionEntry.java
index ff4ba69..6942cca 100644
--- a/minecraft/client/gui/GuiListWorldSelectionEntry.java
+++ b/minecraft/client/gui/GuiListWorldSelectionEntry.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import java.awt.geom.Rectangle2D;
@@ -4,0 +6 @@ import java.io.File;
+import java.io.IOException;
@@ -8,0 +11,3 @@ import javax.imageio.ImageIO;
+
+import com.continuum.nova.NovaNative;
+import com.continuum.nova.gui.NovaDraw;
@@ -27,2 +32 @@ import org.apache.logging.log4j.Logger;
-public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-{
+public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry {
@@ -42,2 +46 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public GuiListWorldSelectionEntry(GuiListWorldSelection listWorldSelIn, WorldSummary p_i46591_2_, ISaveFormat p_i46591_3_)
-    {
+    public GuiListWorldSelectionEntry(GuiListWorldSelection listWorldSelIn, WorldSummary worldSummary, ISaveFormat saveFormat) {
@@ -46 +49 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        this.worldSummary = p_i46591_2_;
+        this.worldSummary = worldSummary;
@@ -48,2 +51,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        this.iconLocation = new ResourceLocation("worlds/" + p_i46591_2_.getFileName() + "/icon");
-        this.iconFile = p_i46591_3_.getFile(p_i46591_2_.getFileName(), "icon.png");
+        this.iconLocation = new ResourceLocation("worlds/" + worldSummary.getFileName() + "/icon");
+        this.iconFile = saveFormat.getFile(worldSummary.getFileName(), "icon.png");
@@ -51,2 +54 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (!this.iconFile.isFile())
-        {
+        if (!this.iconFile.isFile()) {
@@ -59,2 +61,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected)
-    {
+    @Override
+    public void drawEntry(int slotIndex, int x, int y, int listWidth, int slotHeight, int mouseX, int mouseY, boolean isSelected) {
@@ -65,3 +67,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (StringUtils.isEmpty(s))
-        {
-            s = I18n.format("selectWorld.world", new Object[0]) + " " + (slotIndex + 1);
+        if (StringUtils.isEmpty(s)) {
+            s = I18n.format("selectWorld.world") + " " + (slotIndex + 1);
@@ -70,7 +71,4 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (this.worldSummary.requiresConversion())
-        {
-            s2 = I18n.format("selectWorld.conversion", new Object[0]) + " " + s2;
-        }
-        else
-        {
-            s2 = I18n.format("gameMode." + this.worldSummary.getEnumGameType().getName(), new Object[0]);
+        if (this.worldSummary.requiresConversion()) {
+            s2 = I18n.format("selectWorld.conversion") + " " + s2;
+        } else {
+            s2 = I18n.format("gameMode." + this.worldSummary.getEnumGameType().getName());
@@ -78,3 +76,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            if (this.worldSummary.isHardcoreModeEnabled())
-            {
-                s2 = TextFormatting.DARK_RED + I18n.format("gameMode.hardcore", new Object[0]) + TextFormatting.RESET;
+            if (this.worldSummary.isHardcoreModeEnabled()) {
+                s2 = TextFormatting.DARK_RED + I18n.format("gameMode.hardcore") + TextFormatting.RESET;
@@ -83,3 +80,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            if (this.worldSummary.getCheatsEnabled())
-            {
-                s2 = s2 + ", " + I18n.format("selectWorld.cheats", new Object[0]);
+            if (this.worldSummary.getCheatsEnabled()) {
+                s2 = s2 + ", " + I18n.format("selectWorld.cheats");
@@ -90,9 +86,5 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            if (this.worldSummary.markVersionInList())
-            {
-                if (this.worldSummary.askToOpenWorld())
-                {
-                    s2 = s2 + ", " + I18n.format("selectWorld.version", new Object[0]) + " " + TextFormatting.RED + s3 + TextFormatting.RESET;
-                }
-                else
-                {
-                    s2 = s2 + ", " + I18n.format("selectWorld.version", new Object[0]) + " " + TextFormatting.ITALIC + s3 + TextFormatting.RESET;
+            if (this.worldSummary.markVersionInList()) {
+                if (this.worldSummary.askToOpenWorld()) {
+                    s2 = s2 + ", " + I18n.format("selectWorld.version") + " " + TextFormatting.RED + s3 + TextFormatting.RESET;
+                } else {
+                    s2 = s2 + ", " + I18n.format("selectWorld.version") + " " + TextFormatting.ITALIC + s3 + TextFormatting.RESET;
@@ -101,3 +93,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            else
-            {
-                s2 = s2 + ", " + I18n.format("selectWorld.version", new Object[0]) + " " + s3;
+            else {
+                s2 = s2 + ", " + I18n.format("selectWorld.version") + " " + s3;
@@ -111,4 +102 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        this.client.getTextureManager().bindTexture(this.icon != null ? this.iconLocation : ICON_MISSING);
-        GlStateManager.enableBlend();
-        Gui.drawModalRectWithCustomSizedTexture(x, y, 0.0F, 0.0F, 32, 32, 32.0F, 32.0F);
-        GlStateManager.disableBlend();
+        this.client.getRenderEngine().bindTexture(this.icon != null ? this.iconLocation : ICON_MISSING);
@@ -116,3 +104,5 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (this.client.gameSettings.touchscreen || isSelected)
-        {
-            this.client.getTextureManager().bindTexture(ICON_OVERLAY_LOCATION);
+        ResourceLocation rectIcon = this.icon != null ? iconLocation : ICON_MISSING;
+        NovaDraw.drawRectangle(rectIcon, new Rectangle2D.Float(x, y, 32, 32), new Rectangle2D.Float(0, 0, 1, 1));
+
+        if(this.client.gameSettings.touchscreen || isSelected) {
+            this.client.getRenderEngine().bindTexture(ICON_OVERLAY_LOCATION);
@@ -124,2 +114 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            if (this.worldSummary.markVersionInList())
-            {
+            if (this.worldSummary.markVersionInList()) {
@@ -128,2 +117 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-                if (this.worldSummary.askToOpenWorld())
-                {
+                if (this.worldSummary.askToOpenWorld()) {
@@ -132,3 +120,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-                    if (j < 32)
-                    {
-                        this.worldSelScreen.setVersionTooltip(TextFormatting.RED + I18n.format("selectWorld.tooltip.fromNewerVersion1", new Object[0]) + "\n" + TextFormatting.RED + I18n.format("selectWorld.tooltip.fromNewerVersion2", new Object[0]));
+                    if (j < 32) {
+                        this.worldSelScreen.setVersionTooltip(TextFormatting.RED + I18n.format("selectWorld.tooltip.fromNewerVersion1") + "\n" + TextFormatting.RED + I18n.format("selectWorld.tooltip.fromNewerVersion2", new Object[0]));
@@ -136,3 +123 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-                }
-                else
-                {
+                } else {
@@ -141,3 +126,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-                    if (j < 32)
-                    {
-                        this.worldSelScreen.setVersionTooltip(TextFormatting.GOLD + I18n.format("selectWorld.tooltip.snapshot1", new Object[0]) + "\n" + TextFormatting.GOLD + I18n.format("selectWorld.tooltip.snapshot2", new Object[0]));
+                    if (j < 32) {
+                        this.worldSelScreen.setVersionTooltip(TextFormatting.GOLD + I18n.format("selectWorld.tooltip.snapshot1") + "\n" + TextFormatting.GOLD + I18n.format("selectWorld.tooltip.snapshot2", new Object[0]));
@@ -146,3 +130 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            }
-            else
-            {
+            } else {
@@ -158,2 +140,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public boolean mousePressed(int slotIndex, int mouseX, int mouseY, int mouseEvent, int relativeX, int relativeY)
-    {
+    @Override
+    public boolean mousePressed(int slotIndex, int mouseX, int mouseY, int mouseEvent, int relativeX, int relativeY) {
@@ -162,2 +144 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (relativeX <= 32 && relativeX < 32)
-        {
+        if (relativeX <= 32 && relativeX < 32) {
@@ -166,3 +147 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        }
-        else if (Minecraft.getSystemTime() - this.lastClickTime < 250L)
-        {
+        } else if (Minecraft.getSystemTime() - this.lastClickTime < 250L) {
@@ -171,3 +150 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        }
-        else
-        {
+        } else {
@@ -179,16 +156,7 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public void joinWorld()
-    {
-        if (this.worldSummary.askToOpenWorld())
-        {
-            this.client.displayGuiScreen(new GuiYesNo(new GuiYesNoCallback()
-            {
-                public void confirmClicked(boolean result, int id)
-                {
-                    if (result)
-                    {
-                        GuiListWorldSelectionEntry.this.loadWorld();
-                    }
-                    else
-                    {
-                        GuiListWorldSelectionEntry.this.client.displayGuiScreen(GuiListWorldSelectionEntry.this.worldSelScreen);
-                    }
+    public void joinWorld() {
+        if (this.worldSummary.askToOpenWorld()) {
+            this.client.displayGuiScreen(new GuiYesNo((result, id) -> {
+                if (result) {
+                    GuiListWorldSelectionEntry.this.loadWorld();
+                } else {
+                    GuiListWorldSelectionEntry.this.client.displayGuiScreen(GuiListWorldSelectionEntry.this.worldSelScreen);
@@ -196 +164 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            }, I18n.format("selectWorld.versionQuestion", new Object[0]), I18n.format("selectWorld.versionWarning", new Object[] {this.worldSummary.getVersionName()}), I18n.format("selectWorld.versionJoinButton", new Object[0]), I18n.format("gui.cancel", new Object[0]), 0));
+            }, I18n.format("selectWorld.versionQuestion"), I18n.format("selectWorld.versionWarning", new Object[] {this.worldSummary.getVersionName()}), I18n.format("selectWorld.versionJoinButton", new Object[0]), I18n.format("gui.cancel", new Object[0]), 0));
@@ -204,16 +172,8 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public void deleteWorld()
-    {
-        this.client.displayGuiScreen(new GuiYesNo(new GuiYesNoCallback()
-        {
-            public void confirmClicked(boolean result, int id)
-            {
-                if (result)
-                {
-                    GuiListWorldSelectionEntry.this.client.displayGuiScreen(new GuiScreenWorking());
-                    ISaveFormat isaveformat = GuiListWorldSelectionEntry.this.client.getSaveLoader();
-                    isaveformat.flushCache();
-                    isaveformat.deleteWorldDirectory(GuiListWorldSelectionEntry.this.worldSummary.getFileName());
-                    GuiListWorldSelectionEntry.this.containingListSel.refreshList();
-                }
-
-                GuiListWorldSelectionEntry.this.client.displayGuiScreen(GuiListWorldSelectionEntry.this.worldSelScreen);
+    public void deleteWorld() {
+        this.client.displayGuiScreen(new GuiYesNo((result, id) -> {
+            if (result) {
+                GuiListWorldSelectionEntry.this.client.displayGuiScreen(new GuiScreenWorking());
+                ISaveFormat isaveformat = GuiListWorldSelectionEntry.this.client.getSaveLoader();
+                isaveformat.flushCache();
+                isaveformat.deleteWorldDirectory(GuiListWorldSelectionEntry.this.worldSummary.getFileName());
+                GuiListWorldSelectionEntry.this.containingListSel.refreshList();
@@ -221 +181,3 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        }, I18n.format("selectWorld.deleteQuestion", new Object[0]), "\'" + this.worldSummary.getDisplayName() + "\' " + I18n.format("selectWorld.deleteWarning", new Object[0]), I18n.format("selectWorld.deleteButton", new Object[0]), I18n.format("gui.cancel", new Object[0]), 0));
+
+            GuiListWorldSelectionEntry.this.client.displayGuiScreen(GuiListWorldSelectionEntry.this.worldSelScreen);
+        }, I18n.format("selectWorld.deleteQuestion"), "\'" + this.worldSummary.getDisplayName() + "\' " + I18n.format("selectWorld.deleteWarning", new Object[0]), I18n.format("selectWorld.deleteButton", new Object[0]), I18n.format("gui.cancel", new Object[0]), 0));
@@ -224,2 +186 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public void editWorld()
-    {
+    public void editWorld() {
@@ -229,2 +190 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    public void recreateWorld()
-    {
+    public void recreateWorld() {
@@ -240,2 +200 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    private void loadWorld()
-    {
+    private void loadWorld() {
@@ -244,2 +203 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (this.client.getSaveLoader().canLoadWorld(this.worldSummary.getFileName()))
-        {
+        if(this.client.getSaveLoader().canLoadWorld(this.worldSummary.getFileName())) {
@@ -250,3 +208,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-    private void loadServerIcon()
-    {
-        boolean flag = this.iconFile != null && this.iconFile.isFile();
+    private void loadServerIcon() {
+        boolean imageIsValid = this.iconFile != null && this.iconFile.isFile();
@@ -254,2 +211 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        if (flag)
-        {
+        if(imageIsValid) {
@@ -258,2 +214 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            try
-            {
+            try {
@@ -261,6 +216,4 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-                Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide", new Object[0]);
-                Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high", new Object[0]);
-            }
-            catch (Throwable throwable)
-            {
-                LOGGER.error("Invalid icon for world {}", new Object[] {this.worldSummary.getFileName(), throwable});
+                Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide");
+                Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high");
+            } catch(IOException e) {
+                LOGGER.error("Invalid icon for world {}", this.worldSummary.getFileName(), e);
@@ -271,2 +224 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-            if (this.icon == null)
-            {
+            if (this.icon == null) {
@@ -274 +226,5 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-                this.client.getTextureManager().loadTexture(this.iconLocation, this.icon);
+                this.client.getRenderEngine().loadTexture(this.iconLocation, this.icon);
+
+                client.getNovaRenderer().loadTexture(iconLocation, bufferedimage);
+                NovaNative.mc_texture_atlas_location location = new NovaNative.mc_texture_atlas_location(iconLocation.toString(), 0, 0, 1, 1);
+                NovaNative.INSTANCE.add_texture_location(location);
@@ -279,4 +235,2 @@ public class GuiListWorldSelectionEntry implements GuiListExtended.IGuiListEntry
-        }
-        else if (!flag)
-        {
-            this.client.getTextureManager().deleteTexture(this.iconLocation);
+        } else {
+            this.client.getRenderEngine().deleteTexture(this.iconLocation);
diff --git a/minecraft/client/gui/GuiLockIconButton.java b/minecraft/client/gui/GuiLockIconButton.java
index c5e2f9d..0c3622e 100644
--- a/minecraft/client/gui/GuiLockIconButton.java
+++ b/minecraft/client/gui/GuiLockIconButton.java
@@ -32 +32 @@ public class GuiLockIconButton extends GuiButton
-            mc.getTextureManager().bindTexture(GuiButton.BUTTON_TEXTURES);
+            mc.getRenderEngine().bindTexture(GuiButton.BUTTON_TEXTURES);
diff --git a/minecraft/client/gui/GuiMainMenu.java b/minecraft/client/gui/GuiMainMenu.java
index 2249b2b..37d1862 100644
--- a/minecraft/client/gui/GuiMainMenu.java
+++ b/minecraft/client/gui/GuiMainMenu.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -3,0 +5,4 @@ import com.google.common.collect.Lists;
+
+import java.awt.*;
+
+import java.awt.geom.Rectangle2D;
@@ -9,2 +14 @@ import java.net.URI;
-import java.util.Calendar;
-import java.util.Date;
+import java.util.*;
@@ -12 +15,0 @@ import java.util.List;
-import java.util.Random;
@@ -13,0 +17,3 @@ import java.util.concurrent.atomic.AtomicInteger;
+
+import glm.Glm;
+import glm.vec._4.Vec4;
@@ -16 +21,0 @@ import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.OpenGlHelper;
@@ -35,2 +40 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.opengl.GLContext;
-import org.lwjgl.util.glu.Project;
+import glm.mat._4.Mat4;
@@ -159,2 +163 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        if (!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported())
-        {
+        /*if(!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported()) {
@@ -164 +167 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        }
+        }*/
@@ -211 +214 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        this.backgroundTexture = this.mc.getTextureManager().getDynamicTextureLocation("background", this.viewportTexture);
+        this.backgroundTexture = this.mc.getRenderEngine().getDynamicTextureLocation("background", this.viewportTexture);
@@ -278 +281 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        this.realmsButton = this.func_189646_b(new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online", new Object[0])));
+        this.realmsButton = this.addToButtonList(new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online", new Object[0])));
@@ -287 +290 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        this.buttonResetDemo = this.func_189646_b(new GuiButton(12, this.width / 2 - 100, p_73972_1_ + p_73972_2_ * 1, I18n.format("menu.resetdemo", new Object[0])));
+        this.buttonResetDemo = this.addToButtonList(new GuiButton(12, this.width / 2 - 100, p_73972_1_ + p_73972_2_ * 1, I18n.format("menu.resetdemo", new Object[0])));
@@ -389,18 +392,9 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        Tessellator tessellator = Tessellator.getInstance();
-        VertexBuffer vertexbuffer = tessellator.getBuffer();
-        GlStateManager.matrixMode(5889);
-        GlStateManager.pushMatrix();
-        GlStateManager.loadIdentity();
-        Project.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
-        GlStateManager.matrixMode(5888);
-        GlStateManager.pushMatrix();
-        GlStateManager.loadIdentity();
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-        GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
-        GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
-        GlStateManager.enableBlend();
-        GlStateManager.disableAlpha();
-        GlStateManager.disableCull();
-        GlStateManager.depthMask(false);
-        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-        int i = 8;
+
+        Mat4 projmat = Glm.perspective_(120.0F, 1.0F, 0.05F, 10.0F);
+
+        Stack<Mat4> matrixStack = new Stack<>();
+        matrixStack.push(new Mat4());
+
+        matrixStack.peek().rotate(180.0F, 1.0F, 0.0F, 0.0F);
+        matrixStack.peek().rotate(90.0F, 0.0F, 0.0F, 1.0F);
+
@@ -410 +404,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-            GlStateManager.pushMatrix();
+            matrixStack.push(matrixStack.peek());
+
@@ -414,3 +409,3 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-            GlStateManager.translate(f, f1, 0.0F);
-            GlStateManager.rotate(MathHelper.sin(((float)this.panoramaTimer + partialTicks) / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
-            GlStateManager.rotate(-((float)this.panoramaTimer + partialTicks) * 0.1F, 0.0F, 1.0F, 0.0F);
+            matrixStack.peek().translate(f, f1, 0.0F);
+            matrixStack.peek().rotate(MathHelper.sin(((float)this.panoramaTimer + partialTicks) / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
+            matrixStack.peek().rotate(-((float)this.panoramaTimer + partialTicks) * 0.1F, 0.0F, 1.0F, 0.0F);
@@ -420 +415,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                GlStateManager.pushMatrix();
+                matrixStack.push(matrixStack.peek());
+
@@ -424 +420,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                    GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
+                    matrixStack.peek().rotate(90.0F, 0.0F, 1.0F, 0.0F);
+
@@ -429 +426,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                    GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
+                    matrixStack.peek().rotate(180.0F, 0.0F, 1.0F, 0.0F);
+
@@ -434 +432,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                    GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
+                    matrixStack.peek().rotate(-90.0F, 0.0F, 1.0F, 0.0F);
+
@@ -439 +438,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                    GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
+                    matrixStack.peek().rotate(90.0F, 1.0F, 0.0F, 0.0F);
+
@@ -444 +444,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                    GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
+                    matrixStack.peek().rotate(-90.0F, 1.0F, 0.0F, 0.0F);
+
@@ -447,2 +447,0 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                this.mc.getTextureManager().bindTexture(TITLE_PANORAMA_PATHS[k]);
-                vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
@@ -450,7 +449,37 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-                float f3 = 0.0F;
-                vertexbuffer.pos(-1.0D, -1.0D, 1.0D).tex(0.0D, 0.0D).color(255, 255, 255, l).endVertex();
-                vertexbuffer.pos(1.0D, -1.0D, 1.0D).tex(1.0D, 0.0D).color(255, 255, 255, l).endVertex();
-                vertexbuffer.pos(1.0D, 1.0D, 1.0D).tex(1.0D, 1.0D).color(255, 255, 255, l).endVertex();
-                vertexbuffer.pos(-1.0D, 1.0D, 1.0D).tex(0.0D, 1.0D).color(255, 255, 255, l).endVertex();
-                tessellator.draw();
-                GlStateManager.popMatrix();
+                Color vertexColor = new Color(255, 255, 255, l);
+
+
+                Mat4 modelViewProj = matrixStack.peek();
+
+                Vec4 firstVertice =   modelViewProj.mul(new Vec4(0,0,1,1));
+                Vec4 secondVertice =   modelViewProj.mul(new Vec4(0 + 356,0,1,1));
+                Vec4 thirdVertice =   modelViewProj.mul(new Vec4(0,0 + 256,1,1));
+                Vec4 fourthVertice =   modelViewProj.mul(new Vec4(0 + 256,0 + 256,1,1));
+
+                Integer[] indexBuffer = new Integer[]{0, 1, 2, 2, 1, 3};
+                NovaDraw.Vertex[] vertices = new NovaDraw.Vertex[]{
+                        new NovaDraw.Vertex(
+                                firstVertice.x, firstVertice.y,
+                                0, 0,
+                                vertexColor
+                        ),
+                        new NovaDraw.Vertex(
+                                secondVertice.x, secondVertice.y,
+                                1, 0,
+                                vertexColor
+                        ),
+                        new NovaDraw.Vertex(
+                                thirdVertice.x, thirdVertice.y,
+                                0, 1,
+                                vertexColor
+                        ),
+                        new NovaDraw.Vertex(
+                                fourthVertice.x, fourthVertice.y,
+                                1, 1,
+                                vertexColor
+                        )
+                };
+
+                NovaDraw.draw(TITLE_PANORAMA_PATHS[k],indexBuffer,vertices);
+                matrixStack.pop();
+
@@ -459 +488,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-            GlStateManager.popMatrix();
+            matrixStack.pop();
+
@@ -463,9 +492,0 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        vertexbuffer.setTranslation(0.0D, 0.0D, 0.0D);
-        GlStateManager.colorMask(true, true, true, true);
-        GlStateManager.matrixMode(5889);
-        GlStateManager.popMatrix();
-        GlStateManager.matrixMode(5888);
-        GlStateManager.popMatrix();
-        GlStateManager.depthMask(true);
-        GlStateManager.enableCull();
-        GlStateManager.enableDepth();
@@ -479 +500 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        this.mc.getTextureManager().bindTexture(this.backgroundTexture);
+        this.mc.getRenderEngine().bindTexture(this.backgroundTexture);
@@ -546,24 +566,0 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        GlStateManager.disableAlpha();
-        this.renderSkybox(mouseX, mouseY, partialTicks);
-        GlStateManager.enableAlpha();
-        int i = 274;
-        int j = this.width / 2 - 137;
-        int k = 30;
-        this.drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
-        this.drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);
-        this.mc.getTextureManager().bindTexture(MINECRAFT_TITLE_TEXTURES);
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-
-        if ((double)this.updateCounter < 1.0E-4D)
-        {
-            this.drawTexturedModalRect(j + 0, 30, 0, 0, 99, 44);
-            this.drawTexturedModalRect(j + 99, 30, 129, 0, 27, 44);
-            this.drawTexturedModalRect(j + 99 + 26, 30, 126, 0, 3, 44);
-            this.drawTexturedModalRect(j + 99 + 26 + 3, 30, 99, 0, 26, 44);
-            this.drawTexturedModalRect(j + 155, 30, 0, 45, 155, 44);
-        }
-        else
-        {
-            this.drawTexturedModalRect(j + 0, 30, 0, 0, 155, 44);
-            this.drawTexturedModalRect(j + 155, 30, 0, 45, 155, 44);
-        }
@@ -571,3 +568,19 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        GlStateManager.pushMatrix();
-        GlStateManager.translate((float)(this.width / 2 + 90), 70.0F, 0.0F);
-        GlStateManager.rotate(-20.0F, 0.0F, 0.0F, 1.0F);
+        //this.drawPanorama(mouseX, mouseY, partialTicks);
+
+        int titleStartPosX = (this.width / 2) - 137;
+
+        NovaDraw.incrementZ();
+
+		NovaDraw.drawRectangle(
+                MINECRAFT_TITLE_TEXTURES,
+                new Rectangle2D.Float(titleStartPosX, 30, 155, 44),
+                new Rectangle2D.Float(0, 0, 0.60546875f, 0.171875f)
+        );
+        NovaDraw.drawRectangle(
+                MINECRAFT_TITLE_TEXTURES,
+                new Rectangle2D.Float(titleStartPosX + 155, 30, 155, 44),
+                new Rectangle2D.Float(0, 45 / 256f, 0.60546875f, 0.171875f)
+        );
+
+        NovaDraw.translate((this.width / 2 + 90),70,0);
+        NovaDraw.rotate(-20 , false, false, true);
@@ -576 +589 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        GlStateManager.scale(f, f, f);
+        NovaDraw.scale(f, f, 1);
@@ -578 +591 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        GlStateManager.popMatrix();
+        NovaDraw.resetMatrix();
@@ -592 +605 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        this.drawString(this.fontRendererObj, "Copyright Mojang AB. Do not distribute!", this.width - this.fontRendererObj.getStringWidth("Copyright Mojang AB. Do not distribute!") - 2, this.height - 10, -1);
+        this.drawString(this.fontRendererObj, s1, this.width - this.fontRendererObj.getStringWidth(s1) - 2, this.height - 10, -1);
@@ -594,6 +606,0 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        if (this.openGLWarning1 != null && !this.openGLWarning1.isEmpty())
-        {
-            drawRect(this.openGLWarningX1 - 2, this.openGLWarningY1 - 2, this.openGLWarningX2 + 2, this.openGLWarningY2 - 1, 1428160512);
-            this.drawString(this.fontRendererObj, this.openGLWarning1, this.openGLWarningX1, this.openGLWarningY1, -1);
-            this.drawString(this.fontRendererObj, this.openGLWarning2, (this.width - this.openGLWarning2Width) / 2, ((GuiButton)this.buttonList.get(0)).yPosition - 12, -1);
-        }
@@ -601 +608 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        super.drawScreen(mouseX, mouseY, partialTicks);
+        super.drawScreen(mouseX,mouseY,partialTicks);
@@ -603,4 +609,0 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        if (this.areRealmsNotificationsEnabled())
-        {
-            this.realmsNotification.drawScreen(mouseX, mouseY, partialTicks);
-        }
@@ -612,2 +615,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
-    {
+    @Override
+    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
@@ -616,4 +619,2 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        synchronized (this.threadLock)
-        {
-            if (!this.openGLWarning1.isEmpty() && mouseX >= this.openGLWarningX1 && mouseX <= this.openGLWarningX2 && mouseY >= this.openGLWarningY1 && mouseY <= this.openGLWarningY2)
-            {
+        synchronized (this.threadLock) {
+            if (!this.openGLWarning1.isEmpty() && mouseX >= this.openGLWarningX1 && mouseX <= this.openGLWarningX2 && mouseY >= this.openGLWarningY1 && mouseY <= this.openGLWarningY2) {
@@ -626,2 +627 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-        if (this.areRealmsNotificationsEnabled())
-        {
+        if (this.areRealmsNotificationsEnabled()) {
@@ -631,0 +632 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
+
@@ -635,4 +636,3 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
-    public void onGuiClosed()
-    {
-        if (this.realmsNotification != null)
-        {
+    @Override
+    public void onGuiClosed() {
+        if (this.realmsNotification != null) {
@@ -641,0 +642 @@ public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
+
diff --git a/minecraft/client/gui/GuiMerchant.java b/minecraft/client/gui/GuiMerchant.java
index 85dc8a0..69645ef 100644
--- a/minecraft/client/gui/GuiMerchant.java
+++ b/minecraft/client/gui/GuiMerchant.java
@@ -64,2 +64,2 @@ public class GuiMerchant extends GuiContainer
-        this.nextButton = (GuiMerchant.MerchantButton)this.func_189646_b(new GuiMerchant.MerchantButton(1, i + 120 + 27, j + 24 - 1, true));
-        this.previousButton = (GuiMerchant.MerchantButton)this.func_189646_b(new GuiMerchant.MerchantButton(2, i + 36 - 19, j + 24 - 1, false));
+        this.nextButton = (GuiMerchant.MerchantButton)this.addToButtonList(new GuiMerchant.MerchantButton(1, i + 120 + 27, j + 24 - 1, true));
+        this.previousButton = (GuiMerchant.MerchantButton)this.addToButtonList(new GuiMerchant.MerchantButton(2, i + 36 - 19, j + 24 - 1, false));
@@ -141 +141 @@ public class GuiMerchant extends GuiContainer
-        this.mc.getTextureManager().bindTexture(MERCHANT_GUI_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(MERCHANT_GUI_TEXTURE);
@@ -160 +160 @@ public class GuiMerchant extends GuiContainer
-                this.mc.getTextureManager().bindTexture(MERCHANT_GUI_TEXTURE);
+                this.mc.getRenderEngine().bindTexture(MERCHANT_GUI_TEXTURE);
@@ -250 +250 @@ public class GuiMerchant extends GuiContainer
-                mc.getTextureManager().bindTexture(GuiMerchant.MERCHANT_GUI_TEXTURE);
+                mc.getRenderEngine().bindTexture(GuiMerchant.MERCHANT_GUI_TEXTURE);
diff --git a/minecraft/client/gui/GuiMultiplayer.java b/minecraft/client/gui/GuiMultiplayer.java
index 47c0f09..4129a5b 100644
--- a/minecraft/client/gui/GuiMultiplayer.java
+++ b/minecraft/client/gui/GuiMultiplayer.java
@@ -16 +16 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -95,3 +95,3 @@ public class GuiMultiplayer extends GuiScreen implements GuiYesNoCallback
-        this.btnEditServer = this.func_189646_b(new GuiButton(7, this.width / 2 - 154, this.height - 28, 70, 20, I18n.format("selectServer.edit", new Object[0])));
-        this.btnDeleteServer = this.func_189646_b(new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, I18n.format("selectServer.delete", new Object[0])));
-        this.btnSelectServer = this.func_189646_b(new GuiButton(1, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("selectServer.select", new Object[0])));
+        this.btnEditServer = this.addToButtonList(new GuiButton(7, this.width / 2 - 154, this.height - 28, 70, 20, I18n.format("selectServer.edit", new Object[0])));
+        this.btnDeleteServer = this.addToButtonList(new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, I18n.format("selectServer.delete", new Object[0])));
+        this.btnSelectServer = this.addToButtonList(new GuiButton(1, this.width / 2 - 154, this.height - 52, 100, 20, I18n.format("selectServer.select", new Object[0])));
diff --git a/minecraft/client/gui/GuiOptionSlider.java b/minecraft/client/gui/GuiOptionSlider.java
index 3a21af1..a6a895d 100644
--- a/minecraft/client/gui/GuiOptionSlider.java
+++ b/minecraft/client/gui/GuiOptionSlider.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -7,0 +9,3 @@ import net.minecraft.util.math.MathHelper;
+import java.awt.*;
+import java.awt.geom.Rectangle2D;
+
@@ -59 +63,19 @@ public class GuiOptionSlider extends GuiButton
-            mc.getTextureManager().bindTexture(BUTTON_TEXTURES);
+
+
+            float offsetY = 0.078125f;
+            NovaDraw.incrementZ();
+
+            NovaDraw.drawRectangle(
+                    BUTTON_TEXTURES,
+                    new Rectangle2D.Float(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), yPosition,4, height),
+                    new Rectangle2D.Float(std_button_loc[0], std_button_loc[1] + offsetY,4* widgetsTextureFactor, height * widgetsTextureFactor),
+                    Color.white
+            );
+            NovaDraw.drawRectangle(
+                    BUTTON_TEXTURES,
+                    new Rectangle2D.Float(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, yPosition,4, height),
+                    new Rectangle2D.Float(std_button_loc[2] - (4 * widgetsTextureFactor), std_button_loc[1] + offsetY,4 * widgetsTextureFactor, height * widgetsTextureFactor),
+                    Color.white
+            );
+
+           /* mc.getRenderEngine().bindTexture(BUTTON_TEXTURES);
@@ -62 +84 @@ public class GuiOptionSlider extends GuiButton
-            this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);
+            this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);*/
@@ -93,0 +116,5 @@ public class GuiOptionSlider extends GuiButton
+
+
+
+
+
diff --git a/minecraft/client/gui/GuiOptions.java b/minecraft/client/gui/GuiOptions.java
index ce66b37..033b6d9 100644
--- a/minecraft/client/gui/GuiOptions.java
+++ b/minecraft/client/gui/GuiOptions.java
@@ -3,0 +4,2 @@ import java.io.IOException;
+
+import com.continuum.nova.gui.NovaDraw;
@@ -199,0 +202,2 @@ public class GuiOptions extends GuiScreen implements GuiYesNoCallback
+
+
diff --git a/minecraft/client/gui/GuiOverlayDebug.java b/minecraft/client/gui/GuiOverlayDebug.java
index 0f48bbe..baf5ba1 100644
--- a/minecraft/client/gui/GuiOverlayDebug.java
+++ b/minecraft/client/gui/GuiOverlayDebug.java
@@ -189 +189,10 @@ public class GuiOverlayDebug extends Gui
-        List<String> list = Lists.newArrayList(new String[] {String.format("Java: %s %dbit", new Object[]{System.getProperty("java.version"), Integer.valueOf(this.mc.isJava64bit() ? 64 : 32)}), String.format("Mem: % 2d%% %03d/%03dMB", new Object[]{Long.valueOf(l * 100L / i), Long.valueOf(bytesToMb(l)), Long.valueOf(bytesToMb(i))}), String.format("Allocated: % 2d%% %03dMB", new Object[]{Long.valueOf(j * 100L / i), Long.valueOf(bytesToMb(j))}), "", String.format("CPU: %s", new Object[]{OpenGlHelper.getCpu()}), "", String.format("Display: %dx%d (%s)", new Object[]{Integer.valueOf(Display.getWidth()), Integer.valueOf(Display.getHeight()), GlStateManager.glGetString(7936)}), GlStateManager.glGetString(7937), GlStateManager.glGetString(7938)});
+        List<String> list = Lists.newArrayList(
+                String.format("Java: %s %dbit", System.getProperty("java.version"), this.mc.isJava64bit() ? 64 : 32),
+                String.format("Mem: % 2d%% %03d/%03dMB", l * 100L / i, bytesToMb(l), bytesToMb(i)),
+                String.format("Allocated: % 2d%% %03dMB", j * 100L / i, bytesToMb(j)),
+                "",
+                String.format("CPU: %s", OpenGlHelper.getCpu()),
+                "",
+                String.format("Display: %dx%d (%s)", Display.getWidth(), Display.getHeight(), GlStateManager.glGetString(7936)),
+                GlStateManager.glGetString(7937),
+                GlStateManager.glGetString(7938));
diff --git a/minecraft/client/gui/GuiPlayerTabOverlay.java b/minecraft/client/gui/GuiPlayerTabOverlay.java
index a0e2559..e48b4b2 100644
--- a/minecraft/client/gui/GuiPlayerTabOverlay.java
+++ b/minecraft/client/gui/GuiPlayerTabOverlay.java
@@ -184 +184 @@ public class GuiPlayerTabOverlay extends Gui
-                    this.mc.getTextureManager().bindTexture(networkplayerinfo1.getLocationSkin());
+                    this.mc.getRenderEngine().bindTexture(networkplayerinfo1.getLocationSkin());
@@ -242 +242 @@ public class GuiPlayerTabOverlay extends Gui
-        this.mc.getTextureManager().bindTexture(ICONS);
+        this.mc.getRenderEngine().bindTexture(ICONS);
@@ -282 +282 @@ public class GuiPlayerTabOverlay extends Gui
-            this.mc.getTextureManager().bindTexture(ICONS);
+            this.mc.getRenderEngine().bindTexture(ICONS);
diff --git a/minecraft/client/gui/GuiRepair.java b/minecraft/client/gui/GuiRepair.java
index 3be1834..f60809f 100644
--- a/minecraft/client/gui/GuiRepair.java
+++ b/minecraft/client/gui/GuiRepair.java
@@ -21 +21 @@ import net.minecraft.world.World;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -176 +176 @@ public class GuiRepair extends GuiContainer implements IContainerListener
-        this.mc.getTextureManager().bindTexture(ANVIL_RESOURCE);
+        this.mc.getRenderEngine().bindTexture(ANVIL_RESOURCE);
diff --git a/minecraft/client/gui/GuiResourcePackList.java b/minecraft/client/gui/GuiResourcePackList.java
index 9c77f9b..8824a8f 100644
--- a/minecraft/client/gui/GuiResourcePackList.java
+++ b/minecraft/client/gui/GuiResourcePackList.java
@@ -5 +4,0 @@ import net.minecraft.client.Minecraft;
-import net.minecraft.client.renderer.Tessellator;
@@ -26 +25 @@ public abstract class GuiResourcePackList extends GuiListExtended
-    protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn)
+    protected void drawListHeader(int insideLeft, int insideTop)
diff --git a/minecraft/client/gui/GuiScreen.java b/minecraft/client/gui/GuiScreen.java
index f10ce2e..f869a43 100644
--- a/minecraft/client/gui/GuiScreen.java
+++ b/minecraft/client/gui/GuiScreen.java
@@ -2,0 +3 @@ package net.minecraft.client.gui;
+import com.continuum.nova.gui.NovaDraw;
@@ -6,5 +7,4 @@ import com.google.common.collect.Sets;
-import java.awt.Toolkit;
-import java.awt.datatransfer.ClipboardOwner;
-import java.awt.datatransfer.DataFlavor;
-import java.awt.datatransfer.StringSelection;
-import java.awt.datatransfer.Transferable;
+
+import java.awt.*;
+import java.awt.datatransfer.*;
+import java.awt.geom.Rectangle2D;
@@ -42,2 +42,2 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Keyboard;
+import com.continuum.nova.input.Mouse;
@@ -87,4 +87,5 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-        for (int i = 0; i < this.buttonList.size(); ++i)
-        {
-            ((GuiButton)this.buttonList.get(i)).drawButton(this.mc, mouseX, mouseY);
-        }
+        NovaDraw.incrementZ();
+
+        this.buttonList.forEach(guiButton -> guiButton.drawButton(this.mc, mouseX, mouseY));
+
+        this.labelList.forEach(guiLabel -> guiLabel.drawLabel(this.mc, mouseX, mouseY));
@@ -92,4 +92,0 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-        for (int j = 0; j < this.labelList.size(); ++j)
-        {
-            ((GuiLabel)this.labelList.get(j)).drawLabel(this.mc, mouseX, mouseY);
-        }
@@ -97,0 +95,2 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
+    
+
@@ -115,4 +114,3 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    protected <T extends GuiButton> T func_189646_b(T p_189646_1_)
-    {
-        this.buttonList.add(p_189646_1_);
-        return (T)p_189646_1_;
+    protected <T extends GuiButton> T addToButtonList(T button) {
+        this.buttonList.add(button);
+        return button;
@@ -124,9 +122,9 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    public static String getClipboardString()
-    {
-        try
-        {
-            Transferable transferable = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
-
-            if (transferable != null && transferable.isDataFlavorSupported(DataFlavor.stringFlavor))
-            {
-                return (String)transferable.getTransferData(DataFlavor.stringFlavor);
+    public static String getClipboardString() {
+            Transferable transferable = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
+
+            if (transferable != null && transferable.isDataFlavorSupported(DataFlavor.stringFlavor)) {
+                try {
+                    return (String)transferable.getTransferData(DataFlavor.stringFlavor);
+                } catch(UnsupportedFlavorException | IOException e) {
+                    LOGGER.warn("Could not read data from clipboard", e);
+                }
@@ -134,5 +131,0 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-        }
-        catch (Exception var1)
-        {
-            ;
-        }
@@ -146,13 +139,4 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    public static void setClipboardString(String copyText)
-    {
-        if (!StringUtils.isEmpty(copyText))
-        {
-            try
-            {
-                StringSelection stringselection = new StringSelection(copyText);
-                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringselection, (ClipboardOwner)null);
-            }
-            catch (Exception var2)
-            {
-                ;
-            }
+    public static void setClipboardString(String copyText) {
+        if (!StringUtils.isEmpty(copyText)) {
+            StringSelection stringselection = new StringSelection(copyText);
+            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringselection, null);
@@ -162,2 +146 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    protected void renderToolTip(ItemStack stack, int x, int y)
-    {
+    protected void renderToolTip(ItemStack stack, int x, int y) {
@@ -166,4 +149,2 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-        for (int i = 0; i < list.size(); ++i)
-        {
-            if (i == 0)
-            {
+        for (int i = 0; i < list.size(); ++i) {
+            if (i == 0) {
@@ -171,3 +152 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-            }
-            else
-            {
+            } else {
@@ -185,2 +164 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    protected void drawCreativeTabHoveringText(String tabName, int mouseX, int mouseY)
-    {
+    protected void drawCreativeTabHoveringText(String tabName, int mouseX, int mouseY) {
@@ -193,4 +171,2 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    protected void drawHoveringText(List<String> textLines, int x, int y)
-    {
-        if (!textLines.isEmpty())
-        {
+    protected void drawHoveringText(List<String> textLines, int x, int y) {
+        if (!textLines.isEmpty()) {
@@ -203,2 +179 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-            for (String s : textLines)
-            {
+            for (String s : textLines) {
@@ -207,2 +182 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-                if (j > i)
-                {
+                if (j > i) {
@@ -217,2 +191 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-            if (textLines.size() > 1)
-            {
+            if (textLines.size() > 1) {
@@ -222,2 +195 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-            if (l1 + i > this.width)
-            {
+            if (l1 + i > this.width) {
@@ -227,2 +199 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-            if (i2 + k + 6 > this.height)
-            {
+            if (i2 + k + 6 > this.height) {
@@ -247,3 +218,2 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-            for (int k1 = 0; k1 < textLines.size(); ++k1)
-            {
-                String s1 = (String)textLines.get(k1);
+            for (int k1 = 0; k1 < textLines.size(); ++k1) {
+                String s1 = textLines.get(k1);
@@ -252,2 +222 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-                if (k1 == 0)
-                {
+                if (k1 == 0) {
@@ -375,3 +344 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-    protected void setText(String newChatText, boolean shouldOverwrite)
-    {
-    }
+    protected void setText(String newChatText, boolean shouldOverwrite) {}
@@ -674,13 +641,7 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
-        GlStateManager.disableLighting();
-        GlStateManager.disableFog();
-        Tessellator tessellator = Tessellator.getInstance();
-        VertexBuffer vertexbuffer = tessellator.getBuffer();
-        this.mc.getTextureManager().bindTexture(OPTIONS_BACKGROUND);
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-        float f = 32.0F;
-        vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        vertexbuffer.pos(0.0D, (double)this.height, 0.0D).tex(0.0D, (double)((float)this.height / 32.0F + (float)tint)).color(64, 64, 64, 255).endVertex();
-        vertexbuffer.pos((double)this.width, (double)this.height, 0.0D).tex((double)((float)this.width / 32.0F), (double)((float)this.height / 32.0F + (float)tint)).color(64, 64, 64, 255).endVertex();
-        vertexbuffer.pos((double)this.width, 0.0D, 0.0D).tex((double)((float)this.width / 32.0F), (double)tint).color(64, 64, 64, 255).endVertex();
-        vertexbuffer.pos(0.0D, 0.0D, 0.0D).tex(0.0D, (double)tint).color(64, 64, 64, 255).endVertex();
-        tessellator.draw();
+          NovaDraw.drawRectangle(
+                OPTIONS_BACKGROUND,
+                new Rectangle2D.Float(0, 0, width, height),
+                new Rectangle2D.Float(0, 0,width / 32, height /32),
+				new Color(64, 64, 64, 255)
+        );
+
@@ -776,0 +738,6 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
+
+    public List<GuiButton> getButtonList() {
+        return buttonList;
+    }
+
+
@@ -777,0 +745,2 @@ public abstract class GuiScreen extends Gui implements GuiYesNoCallback
+
+
diff --git a/minecraft/client/gui/GuiScreenAddServer.java b/minecraft/client/gui/GuiScreenAddServer.java
index 69b5162..f4309bf 100644
--- a/minecraft/client/gui/GuiScreenAddServer.java
+++ b/minecraft/client/gui/GuiScreenAddServer.java
@@ -10 +10 @@ import net.minecraft.util.StringUtils;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -76 +76 @@ public class GuiScreenAddServer extends GuiScreen
-        this.serverResourcePacks = this.func_189646_b(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, I18n.format("addServer.resourcePack", new Object[0]) + ": " + this.serverData.getResourceMode().getMotd().getFormattedText()));
+        this.serverResourcePacks = this.addToButtonList(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, I18n.format("addServer.resourcePack", new Object[0]) + ": " + this.serverData.getResourceMode().getMotd().getFormattedText()));
diff --git a/minecraft/client/gui/GuiScreenBook.java b/minecraft/client/gui/GuiScreenBook.java
index 7428bc1..3ab01f0 100644
--- a/minecraft/client/gui/GuiScreenBook.java
+++ b/minecraft/client/gui/GuiScreenBook.java
@@ -28 +28 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -120,4 +120,4 @@ public class GuiScreenBook extends GuiScreen
-            this.buttonSign = this.func_189646_b(new GuiButton(3, this.width / 2 - 100, 196, 98, 20, I18n.format("book.signButton", new Object[0])));
-            this.buttonDone = this.func_189646_b(new GuiButton(0, this.width / 2 + 2, 196, 98, 20, I18n.format("gui.done", new Object[0])));
-            this.buttonFinalize = this.func_189646_b(new GuiButton(5, this.width / 2 - 100, 196, 98, 20, I18n.format("book.finalizeButton", new Object[0])));
-            this.buttonCancel = this.func_189646_b(new GuiButton(4, this.width / 2 + 2, 196, 98, 20, I18n.format("gui.cancel", new Object[0])));
+            this.buttonSign = this.addToButtonList(new GuiButton(3, this.width / 2 - 100, 196, 98, 20, I18n.format("book.signButton", new Object[0])));
+            this.buttonDone = this.addToButtonList(new GuiButton(0, this.width / 2 + 2, 196, 98, 20, I18n.format("gui.done", new Object[0])));
+            this.buttonFinalize = this.addToButtonList(new GuiButton(5, this.width / 2 - 100, 196, 98, 20, I18n.format("book.finalizeButton", new Object[0])));
+            this.buttonCancel = this.addToButtonList(new GuiButton(4, this.width / 2 + 2, 196, 98, 20, I18n.format("gui.cancel", new Object[0])));
@@ -127 +127 @@ public class GuiScreenBook extends GuiScreen
-            this.buttonDone = this.func_189646_b(new GuiButton(0, this.width / 2 - 100, 196, 200, 20, I18n.format("gui.done", new Object[0])));
+            this.buttonDone = this.addToButtonList(new GuiButton(0, this.width / 2 - 100, 196, 200, 20, I18n.format("gui.done", new Object[0])));
@@ -132,2 +132,2 @@ public class GuiScreenBook extends GuiScreen
-        this.buttonNextPage = (GuiScreenBook.NextPageButton)this.func_189646_b(new GuiScreenBook.NextPageButton(1, i + 120, 156, true));
-        this.buttonPreviousPage = (GuiScreenBook.NextPageButton)this.func_189646_b(new GuiScreenBook.NextPageButton(2, i + 38, 156, false));
+        this.buttonNextPage = (GuiScreenBook.NextPageButton)this.addToButtonList(new GuiScreenBook.NextPageButton(1, i + 120, 156, true));
+        this.buttonPreviousPage = (GuiScreenBook.NextPageButton)this.addToButtonList(new GuiScreenBook.NextPageButton(2, i + 38, 156, false));
@@ -402 +402 @@ public class GuiScreenBook extends GuiScreen
-        this.mc.getTextureManager().bindTexture(BOOK_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(BOOK_GUI_TEXTURES);
@@ -644 +644 @@ public class GuiScreenBook extends GuiScreen
-                mc.getTextureManager().bindTexture(GuiScreenBook.BOOK_GUI_TEXTURES);
+                mc.getRenderEngine().bindTexture(GuiScreenBook.BOOK_GUI_TEXTURES);
diff --git a/minecraft/client/gui/GuiScreenCustomizePresets.java b/minecraft/client/gui/GuiScreenCustomizePresets.java
index dd9fcdc..6637535 100644
--- a/minecraft/client/gui/GuiScreenCustomizePresets.java
+++ b/minecraft/client/gui/GuiScreenCustomizePresets.java
@@ -13 +13 @@ import net.minecraft.world.gen.ChunkProviderSettings;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -46 +46 @@ public class GuiScreenCustomizePresets extends GuiScreen
-        this.select = this.func_189646_b(new GuiButton(0, this.width / 2 - 102, this.height - 27, 100, 20, I18n.format("createWorld.customize.presets.select", new Object[0])));
+        this.select = this.addToButtonList(new GuiButton(0, this.width / 2 - 102, this.height - 27, 100, 20, I18n.format("createWorld.customize.presets.select", new Object[0])));
@@ -216 +216 @@ public class GuiScreenCustomizePresets extends GuiScreen
-            this.mc.getTextureManager().bindTexture(p_178051_3_);
+            this.mc.getRenderEngine().bindTexture(p_178051_3_);
diff --git a/minecraft/client/gui/GuiScreenDemo.java b/minecraft/client/gui/GuiScreenDemo.java
index ea8d9c3..132963d 100644
--- a/minecraft/client/gui/GuiScreenDemo.java
+++ b/minecraft/client/gui/GuiScreenDemo.java
@@ -73 +73 @@ public class GuiScreenDemo extends GuiScreen
-        this.mc.getTextureManager().bindTexture(DEMO_BACKGROUND_LOCATION);
+        this.mc.getRenderEngine().bindTexture(DEMO_BACKGROUND_LOCATION);
diff --git a/minecraft/client/gui/GuiScreenOptionsSounds.java b/minecraft/client/gui/GuiScreenOptionsSounds.java
index ff00da4..9f49d9b 100644
--- a/minecraft/client/gui/GuiScreenOptionsSounds.java
+++ b/minecraft/client/gui/GuiScreenOptionsSounds.java
@@ -2,0 +3,2 @@ package net.minecraft.client.gui;
+import java.awt.*;
+import java.awt.geom.Rectangle2D;
@@ -3,0 +6,2 @@ import java.io.IOException;
+
+import com.continuum.nova.gui.NovaDraw;
@@ -128,3 +132,16 @@ public class GuiScreenOptionsSounds extends GuiScreen
-                GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-                this.drawTexturedModalRect(this.xPosition + (int)(this.volume * (float)(this.width - 8)), this.yPosition, 0, 66, 4, 20);
-                this.drawTexturedModalRect(this.xPosition + (int)(this.volume * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);
+                float offsetY = 0.078125f;
+                NovaDraw.incrementZ();
+
+                NovaDraw.drawRectangle(
+                        BUTTON_TEXTURES,
+                        new Rectangle2D.Float(this.xPosition + (int)(this.volume * (float)(this.width - 8)), yPosition,4, height),
+                        new Rectangle2D.Float(std_button_loc[0], std_button_loc[1] + offsetY,4* widgetsTextureFactor, height * widgetsTextureFactor),
+                        Color.white
+                );
+                NovaDraw.drawRectangle(
+                        BUTTON_TEXTURES,
+                        new Rectangle2D.Float(this.xPosition + (int)(this.volume * (float)(this.width - 8)) + 4, yPosition,4, height),
+                        new Rectangle2D.Float(std_button_loc[2] - (4 * widgetsTextureFactor), std_button_loc[1] + offsetY,4 * widgetsTextureFactor, height * widgetsTextureFactor),
+                        Color.white
+                );
+
diff --git a/minecraft/client/gui/GuiScreenServerList.java b/minecraft/client/gui/GuiScreenServerList.java
index 0ea5063..45ba060 100644
--- a/minecraft/client/gui/GuiScreenServerList.java
+++ b/minecraft/client/gui/GuiScreenServerList.java
@@ -6 +6 @@ import net.minecraft.client.resources.I18n;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
diff --git a/minecraft/client/gui/GuiShareToLan.java b/minecraft/client/gui/GuiShareToLan.java
index 643a323..d314ed3 100644
--- a/minecraft/client/gui/GuiShareToLan.java
+++ b/minecraft/client/gui/GuiShareToLan.java
@@ -32,2 +32,2 @@ public class GuiShareToLan extends GuiScreen
-        this.gameModeButton = this.func_189646_b(new GuiButton(104, this.width / 2 - 155, 100, 150, 20, I18n.format("selectWorld.gameMode", new Object[0])));
-        this.allowCheatsButton = this.func_189646_b(new GuiButton(103, this.width / 2 + 5, 100, 150, 20, I18n.format("selectWorld.allowCommands", new Object[0])));
+        this.gameModeButton = this.addToButtonList(new GuiButton(104, this.width / 2 - 155, 100, 150, 20, I18n.format("selectWorld.gameMode", new Object[0])));
+        this.allowCheatsButton = this.addToButtonList(new GuiButton(103, this.width / 2 + 5, 100, 150, 20, I18n.format("selectWorld.allowCommands", new Object[0])));
diff --git a/minecraft/client/gui/GuiSimpleScrolledSelectionListProxy.java b/minecraft/client/gui/GuiSimpleScrolledSelectionListProxy.java
index 8787a83..a54640d 100644
--- a/minecraft/client/gui/GuiSimpleScrolledSelectionListProxy.java
+++ b/minecraft/client/gui/GuiSimpleScrolledSelectionListProxy.java
@@ -104 +104 @@ public class GuiSimpleScrolledSelectionListProxy extends GuiSlot
-                this.drawListHeader(k, l, tessellator);
+                this.drawListHeader(k, l);
diff --git a/minecraft/client/gui/GuiSlot.java b/minecraft/client/gui/GuiSlot.java
index a776ae3..b80250c 100644
--- a/minecraft/client/gui/GuiSlot.java
+++ b/minecraft/client/gui/GuiSlot.java
@@ -2,0 +3,2 @@ package net.minecraft.client.gui;
+import com.continuum.nova.NovaRenderer;
+import com.continuum.nova.gui.NovaDraw;
@@ -7,0 +10 @@ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+import net.minecraft.util.ResourceLocation;
@@ -9 +12 @@ import net.minecraft.util.math.MathHelper;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Mouse;
@@ -11,2 +14,6 @@ import org.lwjgl.input.Mouse;
-public abstract class GuiSlot
-{
+import java.awt.*;
+import java.awt.geom.Rectangle2D;
+
+import static com.continuum.nova.NovaConstants.WHITE_TEXTURE_GUI_LOCATION;
+
+public abstract class GuiSlot {
@@ -62,0 +70 @@ public abstract class GuiSlot
+    protected boolean stateChanged;
@@ -126,5 +134 @@ public abstract class GuiSlot
-    protected abstract void drawBackground();
-
-    protected void updateItemPos(int entryID, int insideLeft, int yPos)
-    {
-    }
+    protected void updateItemPos(int entryID, int insideLeft, int yPos) {}
@@ -137,3 +141 @@ public abstract class GuiSlot
-    protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn)
-    {
-    }
+    protected void drawListHeader(int insideLeft, int insideTop) {}
@@ -141,3 +143 @@ public abstract class GuiSlot
-    protected void clickedHeader(int p_148132_1_, int p_148132_2_)
-    {
-    }
+    protected void clickedHeader(int p_148132_1_, int p_148132_2_) {}
@@ -145,3 +145 @@ public abstract class GuiSlot
-    protected void renderDecorations(int mouseXIn, int mouseYIn)
-    {
-    }
+    protected void renderDecorations(int mouseXIn, int mouseYIn) {}
@@ -149 +147 @@ public abstract class GuiSlot
-    public int getSlotIndexFromScreenCoords(int posX, int posY)
+    protected int getSlotIndexFromScreenCoords(int posX, int posY)
@@ -170,2 +168 @@ public abstract class GuiSlot
-    protected void bindAmountScrolled()
-    {
+    protected void bindAmountScrolled() {
@@ -188,3 +185,2 @@ public abstract class GuiSlot
-    public boolean isMouseYWithinSlotBounds(int p_148141_1_)
-    {
-        return p_148141_1_ >= this.top && p_148141_1_ <= this.bottom && this.mouseX >= this.left && this.mouseX <= this.right;
+    public boolean isMouseYWithinSlotBounds(int mouseYIn) {
+        return mouseYIn >= this.top && mouseYIn <= this.bottom && this.mouseX >= this.left && this.mouseX <= this.right;
@@ -203,6 +199,3 @@ public abstract class GuiSlot
-    public void actionPerformed(GuiButton button)
-    {
-        if (button.enabled)
-        {
-            if (button.id == this.scrollUpButtonID)
-            {
+    public void actionPerformed(GuiButton button) {
+        if (button.enabled) {
+            if (button.id == this.scrollUpButtonID) {
@@ -212,3 +205 @@ public abstract class GuiSlot
-            }
-            else if (button.id == this.scrollDownButtonID)
-            {
+            } else if (button.id == this.scrollDownButtonID) {
@@ -222,4 +213,2 @@ public abstract class GuiSlot
-    public void drawScreen(int mouseXIn, int mouseYIn, float partialTicks)
-    {
-        if (this.visible)
-        {
+    public void drawScreen(int mouseXIn, int mouseYIn, float partialTicks) {
+        if (this.visible) {
@@ -228,23 +217,26 @@ public abstract class GuiSlot
-            this.drawBackground();
-            int i = this.getScrollBarX();
-            int j = i + 6;
-            this.bindAmountScrolled();
-            GlStateManager.disableLighting();
-            GlStateManager.disableFog();
-            Tessellator tessellator = Tessellator.getInstance();
-            VertexBuffer vertexbuffer = tessellator.getBuffer();
-            this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
-            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-            float f = 32.0F;
-            vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-            vertexbuffer.pos((double)this.left, (double)this.bottom, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
-            vertexbuffer.pos((double)this.right, (double)this.bottom, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
-            vertexbuffer.pos((double)this.right, (double)this.top, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
-            vertexbuffer.pos((double)this.left, (double)this.top, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
-            tessellator.draw();
-            int k = this.left + this.width / 2 - this.getListWidth() / 2 + 2;
-            int l = this.top + 4 - (int)this.amountScrolled;
-
-            if (this.hasListHeader)
-            {
-                this.drawListHeader(k, l, tessellator);
+
+            NovaDraw.incrementZ();
+            drawBackground();
+            int scrollBarX = this.getScrollBarX();
+            int scrollBarOutside = scrollBarX + 6;
+            bindAmountScrolled();
+
+            NovaDraw.incrementZ();
+
+            NovaDraw.Vertex[] backgroundVertices = new NovaDraw.Vertex[] {
+                    new NovaDraw.Vertex(this.left, this.bottom,   this.left / 32.0F, (this.bottom + this.amountScrolled) / 32.0F,     new Color(32, 32, 32)),
+                    new NovaDraw.Vertex(this.right, this.bottom,  this.right / 32.0F, (this.bottom + this.amountScrolled) / 32.0F,    new Color(32, 32, 32)),
+                    new NovaDraw.Vertex(this.right, this.top,     this.right / 32.0F, (this.top + this.amountScrolled) / 32.0F,       new Color(32, 32, 32)),
+                    new NovaDraw.Vertex(this.left, this.top,      this.left / 32.0F, (this.top + this.amountScrolled) / 32.0F,        new Color(32, 32, 32))
+            };
+            Integer[] indices = new Integer[] {
+                    0, 1, 2, 2, 3, 0
+            };
+
+            NovaDraw.draw(Gui.OPTIONS_BACKGROUND, indices, backgroundVertices);
+
+            int k = left + width / 2 - getListWidth() / 2 + 2;
+            int l = top + 4 - (int)amountScrolled;
+            NovaDraw.incrementZ();
+            if (this.hasListHeader) {
+                drawListHeader(k, l);
@@ -251,0 +244,3 @@ public abstract class GuiSlot
+            NovaDraw.incrementZ();
+
+            drawSelectionBox(k, l, mouseXIn, mouseYIn);
@@ -253 +247,0 @@ public abstract class GuiSlot
-            this.drawSelectionBox(k, l, mouseXIn, mouseYIn);
@@ -254,0 +249,2 @@ public abstract class GuiSlot
+            NovaDraw.incrementZ();
+
@@ -262,13 +258,28 @@ public abstract class GuiSlot
-            int i1 = 4;
-            vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-            vertexbuffer.pos((double)this.left, (double)(this.top + 4), 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 0).endVertex();
-            vertexbuffer.pos((double)this.right, (double)(this.top + 4), 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 0).endVertex();
-            vertexbuffer.pos((double)this.right, (double)this.top, 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-            vertexbuffer.pos((double)this.left, (double)this.top, 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-            tessellator.draw();
-            vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-            vertexbuffer.pos((double)this.left, (double)this.bottom, 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-            vertexbuffer.pos((double)this.right, (double)this.bottom, 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-            vertexbuffer.pos((double)this.right, (double)(this.bottom - 4), 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 0).endVertex();
-            vertexbuffer.pos((double)this.left, (double)(this.bottom - 4), 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 0).endVertex();
-            tessellator.draw();
+
+
+            NovaDraw.Vertex[] shade = new NovaDraw.Vertex[] {
+                    new NovaDraw.Vertex(this.left,  this.top,      0,   0,    new Color(0, 0, 0, 255)),
+                    new NovaDraw.Vertex(this.left, this.top +4,   0,1,     new Color(0, 0, 0, 0)),
+                    new NovaDraw.Vertex(this.right,this.top+4,   1,1,    new Color(0, 0, 0, 0)),
+                    new NovaDraw.Vertex(this.right, this.top,      1,0,       new Color(0, 0, 0, 255))
+            };
+
+            indices = new Integer[] {
+                    0, 1, 2, 0, 3, 2
+            };
+
+            NovaDraw.draw(WHITE_TEXTURE_GUI_LOCATION, indices, shade);
+
+            shade = new NovaDraw.Vertex[] {
+                    new NovaDraw.Vertex(this.left, this.bottom-4,      0,0,        new Color(0, 0, 0, 0)),
+                    new NovaDraw.Vertex(this.left,  this.bottom,   0,1,     new Color(0, 0, 0, 255)),
+                    new NovaDraw.Vertex(this.right, this.bottom,   1,1,     new Color(0, 0, 0, 255)),
+                    new NovaDraw.Vertex(this.right,this.bottom-4,     1,0,       new Color(0, 0, 0, 0))
+            };
+
+            indices = new Integer[] {
+                    0, 1, 2, 0, 2, 3
+            };
+
+            NovaDraw.draw(WHITE_TEXTURE_GUI_LOCATION, indices, shade);
+
@@ -277,2 +288 @@ public abstract class GuiSlot
-            if (j1 > 0)
-            {
+            if (j1 > 0) {
@@ -281 +291 @@ public abstract class GuiSlot
-                int l1 = (int)this.amountScrolled * (this.bottom - this.top - k1) / j1 + this.top;
+                int l1 = (int) this.amountScrolled * (this.bottom - this.top - k1) / j1 + this.top;
@@ -283,2 +293 @@ public abstract class GuiSlot
-                if (l1 < this.top)
-                {
+                if (l1 < this.top) {
@@ -288,18 +297,45 @@ public abstract class GuiSlot
-                vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                vertexbuffer.pos((double)i, (double)this.bottom, 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                vertexbuffer.pos((double)j, (double)this.bottom, 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                vertexbuffer.pos((double)j, (double)this.top, 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-                vertexbuffer.pos((double)i, (double)this.top, 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-                tessellator.draw();
-                vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                vertexbuffer.pos((double)i, (double)(l1 + k1), 0.0D).tex(0.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)j, (double)(l1 + k1), 0.0D).tex(1.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)j, (double)l1, 0.0D).tex(1.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)i, (double)l1, 0.0D).tex(0.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                tessellator.draw();
-                vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                vertexbuffer.pos((double)i, (double)(l1 + k1 - 1), 0.0D).tex(0.0D, 1.0D).color(192, 192, 192, 255).endVertex();
-                vertexbuffer.pos((double)(j - 1), (double)(l1 + k1 - 1), 0.0D).tex(1.0D, 1.0D).color(192, 192, 192, 255).endVertex();
-                vertexbuffer.pos((double)(j - 1), (double)l1, 0.0D).tex(1.0D, 0.0D).color(192, 192, 192, 255).endVertex();
-                vertexbuffer.pos((double)i, (double)l1, 0.0D).tex(0.0D, 0.0D).color(192, 192, 192, 255).endVertex();
-                tessellator.draw();
+                NovaDraw.incrementZ();
+
+                NovaDraw.Vertex[] scrollbarBackground = new NovaDraw.Vertex[]{
+                        new NovaDraw.Vertex(scrollBarX, this.bottom,  0, 1, new Color(0, 0, 0, 255)),
+                        new NovaDraw.Vertex(scrollBarOutside, this.bottom,  1, 1, new Color(0, 0, 0, 255)),
+                        new NovaDraw.Vertex(scrollBarOutside, this.top,  1, 0, new Color(0, 0, 0, 255)),
+                        new NovaDraw.Vertex(scrollBarX, this.top,  0, 0, new Color(0, 0, 0, 255))
+                };
+
+                indices = new Integer[]{
+                        0, 1, 2, 2, 3, 0
+                };
+
+                NovaDraw.draw(WHITE_TEXTURE_GUI_LOCATION, indices, scrollbarBackground);
+                NovaDraw.incrementZ();
+
+                NovaDraw.Vertex[] scrollbarShade = new NovaDraw.Vertex[]{
+                        new NovaDraw.Vertex(scrollBarX, (l1 + k1),  0, 1, new Color(128, 128, 128, 255)),
+                        new NovaDraw.Vertex(scrollBarOutside, (l1 + k1),  1, 1, new Color(128, 128, 128, 255)),
+                        new NovaDraw.Vertex(scrollBarOutside, l1,  1, 0, new Color(128, 128, 128, 255)),
+                        new NovaDraw.Vertex(scrollBarX, l1, 0, 0, new Color(128, 128, 128, 255))
+                };
+
+                indices = new Integer[]{
+                        0, 1, 2, 2, 3, 0
+                };
+
+                NovaDraw.draw(WHITE_TEXTURE_GUI_LOCATION, indices, scrollbarShade);
+
+                NovaDraw.incrementZ();
+
+
+                NovaDraw.Vertex[] scrollbar = new NovaDraw.Vertex[]{
+                        new NovaDraw.Vertex(scrollBarX, (l1 + k1) - 1,  0, 1, new Color(192, 192, 192, 255)),
+                        new NovaDraw.Vertex(scrollBarOutside - 1, (l1 + k1) - 1,  1, 1, new Color(192, 192, 192, 255)),
+                        new NovaDraw.Vertex(scrollBarOutside - 1, l1,  1, 0, new Color(192, 192, 192, 255)),
+                        new NovaDraw.Vertex(scrollBarX, l1,  0, 0, new Color(192, 192, 192, 255))
+                };
+
+                indices = new Integer[]{
+                        0, 1, 2, 2, 3, 0
+                };
+
+                NovaDraw.draw(WHITE_TEXTURE_GUI_LOCATION, indices, scrollbar);
+
@@ -309,4 +344,0 @@ public abstract class GuiSlot
-            GlStateManager.enableTexture2D();
-            GlStateManager.shadeModel(7424);
-            GlStateManager.enableAlpha();
-            GlStateManager.disableBlend();
@@ -316,6 +348,7 @@ public abstract class GuiSlot
-    public void handleMouseInput()
-    {
-        if (this.isMouseYWithinSlotBounds(this.mouseY))
-        {
-            if (Mouse.getEventButton() == 0 && Mouse.getEventButtonState() && this.mouseY >= this.top && this.mouseY <= this.bottom)
-            {
+
+    protected abstract void drawBackground();
+
+    public void handleMouseInput() {
+        if (this.isMouseYWithinSlotBounds(this.mouseY)) {
+            stateChanged = true;
+            if (Mouse.getEventButton() == 0 && Mouse.getEventButtonState() && this.mouseY >= this.top && this.mouseY <= this.bottom) {
@@ -327,2 +360 @@ public abstract class GuiSlot
-                if (l < this.getSize() && this.mouseX >= i && this.mouseX <= j && l >= 0 && k >= 0)
-                {
+                if (l < this.getSize() && this.mouseX >= i && this.mouseX <= j && l >= 0 && k >= 0) {
@@ -331,3 +363 @@ public abstract class GuiSlot
-                }
-                else if (this.mouseX >= i && this.mouseX <= j && k < 0)
-                {
+                } else if (this.mouseX >= i && this.mouseX <= j && k < 0) {
@@ -338,4 +368,2 @@ public abstract class GuiSlot
-            if (Mouse.isButtonDown(0) && this.getEnabled())
-            {
-                if (this.initialClickY == -1)
-                {
+            if (Mouse.isButtonDown(0) && this.getEnabled()) {
+                if (this.initialClickY == -1) {
@@ -344,2 +372 @@ public abstract class GuiSlot
-                    if (this.mouseY >= this.top && this.mouseY <= this.bottom)
-                    {
+                    if (this.mouseY >= this.top && this.mouseY <= this.bottom) {
@@ -351,2 +378 @@ public abstract class GuiSlot
-                        if (i1 < this.getSize() && this.mouseX >= j2 && this.mouseX <= k2 && i1 >= 0 && l2 >= 0)
-                        {
+                        if (i1 < this.getSize() && this.mouseX >= j2 && this.mouseX <= k2 && i1 >= 0 && l2 >= 0) {
@@ -357,3 +383 @@ public abstract class GuiSlot
-                        }
-                        else if (this.mouseX >= j2 && this.mouseX <= k2 && l2 < 0)
-                        {
+                        } else if (this.mouseX >= j2 && this.mouseX <= k2 && l2 < 0) {
@@ -367,2 +391 @@ public abstract class GuiSlot
-                        if (this.mouseX >= i3 && this.mouseX <= j1)
-                        {
+                        if (this.mouseX >= i3 && this.mouseX <= j1) {
@@ -372,2 +395 @@ public abstract class GuiSlot
-                            if (k1 < 1)
-                            {
+                            if (k1 < 1) {
@@ -380,3 +402 @@ public abstract class GuiSlot
-                        }
-                        else
-                        {
+                        } else {
@@ -386,2 +406 @@ public abstract class GuiSlot
-                        if (flag1)
-                        {
+                        if (flag1) {
@@ -389,3 +408 @@ public abstract class GuiSlot
-                        }
-                        else
-                        {
+                        } else {
@@ -394,3 +411 @@ public abstract class GuiSlot
-                    }
-                    else
-                    {
+                    } else {
@@ -399,3 +414 @@ public abstract class GuiSlot
-                }
-                else if (this.initialClickY >= 0)
-                {
+                } else if (this.initialClickY >= 0) {
@@ -405,3 +418 @@ public abstract class GuiSlot
-            }
-            else
-            {
+            } else {
@@ -413,4 +424,2 @@ public abstract class GuiSlot
-            if (i2 != 0)
-            {
-                if (i2 > 0)
-                {
+            if (i2 != 0) {
+                if (i2 > 0) {
@@ -418,3 +427 @@ public abstract class GuiSlot
-                }
-                else if (i2 < 0)
-                {
+                } else if (i2 < 0) {
@@ -450,2 +457 @@ public abstract class GuiSlot
-    protected void drawSelectionBox(int insideLeft, int insideTop, int mouseXIn, int mouseYIn)
-    {
+    protected void drawSelectionBox(int insideLeft, int insideTop, int mouseXIn, int mouseYIn) {
@@ -453,2 +458,0 @@ public abstract class GuiSlot
-        Tessellator tessellator = Tessellator.getInstance();
-        VertexBuffer vertexbuffer = tessellator.getBuffer();
@@ -456,2 +460,3 @@ public abstract class GuiSlot
-        for (int j = 0; j < i; ++j)
-        {
+        ResourceLocation whiteTextureLocation = WHITE_TEXTURE_GUI_LOCATION;
+
+        for (int j = 0; j < i; ++j) {
@@ -461,2 +466 @@ public abstract class GuiSlot
-            if (k > this.bottom || k + l < this.top)
-            {
+            if (k > this.bottom || k + l < this.top) {
@@ -466,17 +470,35 @@ public abstract class GuiSlot
-            if (this.showSelectionBox && this.isSelected(j))
-            {
-                int i1 = this.left + (this.width / 2 - this.getListWidth() / 2);
-                int j1 = this.left + this.width / 2 + this.getListWidth() / 2;
-                GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-                GlStateManager.disableTexture2D();
-                vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-                vertexbuffer.pos((double)i1, (double)(k + l + 2), 0.0D).tex(0.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)j1, (double)(k + l + 2), 0.0D).tex(1.0D, 1.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)j1, (double)(k - 2), 0.0D).tex(1.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)i1, (double)(k - 2), 0.0D).tex(0.0D, 0.0D).color(128, 128, 128, 255).endVertex();
-                vertexbuffer.pos((double)(i1 + 1), (double)(k + l + 1), 0.0D).tex(0.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                vertexbuffer.pos((double)(j1 - 1), (double)(k + l + 1), 0.0D).tex(1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
-                vertexbuffer.pos((double)(j1 - 1), (double)(k - 1), 0.0D).tex(1.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-                vertexbuffer.pos((double)(i1 + 1), (double)(k - 1), 0.0D).tex(0.0D, 0.0D).color(0, 0, 0, 255).endVertex();
-                tessellator.draw();
-                GlStateManager.enableTexture2D();
+            if (this.showSelectionBox && this.isSelected(j)) {
+                int leftX = this.left + (this.width / 2 - this.getListWidth() / 2);
+                int rightX = this.left + this.width / 2 + this.getListWidth() / 2;
+
+                NovaDraw.Vertex[] vertices = new NovaDraw.Vertex[]{
+                        new NovaDraw.Vertex(leftX, k - 2, 0, 0, new Color(128, 128, 128, 255)),
+                        new NovaDraw.Vertex(leftX, k + l + 2,  0, 1, new Color(128, 128, 128, 255)),
+                        new NovaDraw.Vertex(rightX, k + l + 2,  1, 1, new Color(128, 128, 128, 255)),
+                        new NovaDraw.Vertex(rightX, k - 2,  1, 0, new Color(128, 128, 128, 255)),
+                };
+
+                Integer[] indices = new Integer[] {
+                        0, 1, 2,
+                        0, 2, 3,
+                };
+
+                NovaDraw.draw(whiteTextureLocation, indices, vertices);
+
+                NovaDraw.incrementZ();
+
+                vertices = new NovaDraw.Vertex[]{
+                        new NovaDraw.Vertex(leftX + 1, k - 1,      0, 0, new Color(0, 0, 0, 255)),
+                        new NovaDraw.Vertex(leftX + 1, k + l + 1,  0, 1, new Color(0, 0, 0, 255)),
+                        new NovaDraw.Vertex(rightX - 1, k + l + 1,  1, 1, new Color(0, 0, 0, 255)),
+                        new NovaDraw.Vertex(rightX - 1, k - 1,      1, 0, new Color(0, 0, 0, 255)),
+                };
+
+                indices = new Integer[] {
+                        0, 1, 2,
+                        0, 2, 3,
+                };
+
+                NovaDraw.draw(whiteTextureLocation, indices, vertices);
+
+
@@ -483,0 +506 @@ public abstract class GuiSlot
+            NovaDraw.incrementZ();
@@ -499,11 +522,13 @@ public abstract class GuiSlot
-        Tessellator tessellator = Tessellator.getInstance();
-        VertexBuffer vertexbuffer = tessellator.getBuffer();
-        this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-        float f = 32.0F;
-        vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
-        vertexbuffer.pos((double)this.left, (double)endY, 0.0D).tex(0.0D, (double)((float)endY / 32.0F)).color(64, 64, 64, endAlpha).endVertex();
-        vertexbuffer.pos((double)(this.left + this.width), (double)endY, 0.0D).tex((double)((float)this.width / 32.0F), (double)((float)endY / 32.0F)).color(64, 64, 64, endAlpha).endVertex();
-        vertexbuffer.pos((double)(this.left + this.width), (double)startY, 0.0D).tex((double)((float)this.width / 32.0F), (double)((float)startY / 32.0F)).color(64, 64, 64, startAlpha).endVertex();
-        vertexbuffer.pos((double)this.left, (double)startY, 0.0D).tex(0.0D, (double)((float)startY / 32.0F)).color(64, 64, 64, startAlpha).endVertex();
-        tessellator.draw();
+
+        NovaDraw.Vertex[] backgroundVertices = new NovaDraw.Vertex[] {
+                new NovaDraw.Vertex(this.left, endY,  0, endY / 32.0F,     new Color(64, 64, 64, endAlpha)),
+                new NovaDraw.Vertex(this.left+ this.width, endY,   this.width / 32.0F, endY / 32.0F,    new Color(64, 64, 64, endAlpha)),
+                new NovaDraw.Vertex(this.left+ this.width, startY,      this.width / 32.0F, startY/ 32.0F,       new Color(64, 64, 64, endAlpha)),
+                new NovaDraw.Vertex(this.left, startY,       0.0F, startY/ 32.0F,        new Color(64, 64, 64, startAlpha))
+        };
+        Integer[] indices = new Integer[] {
+                0, 1, 2, 2, 3, 0
+        };
+
+        NovaDraw.draw(Gui.OPTIONS_BACKGROUND, indices, backgroundVertices);
+
@@ -515,2 +540 @@ public abstract class GuiSlot
-    public void setSlotXBoundsFromLeft(int leftIn)
-    {
+    public void setSlotXBoundsFromLeft(int leftIn) {
@@ -524,0 +549 @@ public abstract class GuiSlot
+
diff --git a/minecraft/client/gui/GuiSnooper.java b/minecraft/client/gui/GuiSnooper.java
index 45cc6a5..dbf83fa 100644
--- a/minecraft/client/gui/GuiSnooper.java
+++ b/minecraft/client/gui/GuiSnooper.java
@@ -47 +47 @@ public class GuiSnooper extends GuiScreen
-        this.toggleButton = this.func_189646_b(new GuiButton(1, this.width / 2 - 152, this.height - 30, 150, 20, this.game_settings_2.getKeyBinding(GameSettings.Options.SNOOPER_ENABLED)));
+        this.toggleButton = this.addToButtonList(new GuiButton(1, this.width / 2 - 152, this.height - 30, 150, 20, this.game_settings_2.getKeyBinding(GameSettings.Options.SNOOPER_ENABLED)));
diff --git a/minecraft/client/gui/GuiSpectator.java b/minecraft/client/gui/GuiSpectator.java
index 1a2eb20..4c47828 100644
--- a/minecraft/client/gui/GuiSpectator.java
+++ b/minecraft/client/gui/GuiSpectator.java
@@ -76 +76 @@ public class GuiSpectator extends Gui implements ISpectatorMenuRecipient
-        this.mc.getTextureManager().bindTexture(WIDGETS);
+        this.mc.getRenderEngine().bindTexture(WIDGETS);
@@ -98 +98 @@ public class GuiSpectator extends Gui implements ISpectatorMenuRecipient
-        this.mc.getTextureManager().bindTexture(SPECTATOR_WIDGETS);
+        this.mc.getRenderEngine().bindTexture(SPECTATOR_WIDGETS);
diff --git a/minecraft/client/gui/GuiWinGame.java b/minecraft/client/gui/GuiWinGame.java
index b9db28b..90415b8 100644
--- a/minecraft/client/gui/GuiWinGame.java
+++ b/minecraft/client/gui/GuiWinGame.java
@@ -160 +160 @@ public class GuiWinGame extends GuiScreen
-        this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
+        this.mc.getRenderEngine().bindTexture(Gui.OPTIONS_BACKGROUND);
@@ -203 +203 @@ public class GuiWinGame extends GuiScreen
-        this.mc.getTextureManager().bindTexture(MINECRAFT_LOGO);
+        this.mc.getRenderEngine().bindTexture(MINECRAFT_LOGO);
@@ -240 +240 @@ public class GuiWinGame extends GuiScreen
-        this.mc.getTextureManager().bindTexture(VIGNETTE_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(VIGNETTE_TEXTURE);
diff --git a/minecraft/client/gui/GuiWorldEdit.java b/minecraft/client/gui/GuiWorldEdit.java
index be8341b..5f71858 100644
--- a/minecraft/client/gui/GuiWorldEdit.java
+++ b/minecraft/client/gui/GuiWorldEdit.java
@@ -9 +9 @@ import org.apache.commons.io.FileUtils;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -39 +39 @@ public class GuiWorldEdit extends GuiScreen
-        GuiButton guibutton = this.func_189646_b(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 24 + 12, I18n.format("selectWorld.edit.resetIcon", new Object[0])));
+        GuiButton guibutton = this.addToButtonList(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 24 + 12, I18n.format("selectWorld.edit.resetIcon", new Object[0])));
diff --git a/minecraft/client/gui/GuiWorldSelection.java b/minecraft/client/gui/GuiWorldSelection.java
index 48c4858..c7e4255 100644
--- a/minecraft/client/gui/GuiWorldSelection.java
+++ b/minecraft/client/gui/GuiWorldSelection.java
@@ -3,2 +2,0 @@ package net.minecraft.client.gui;
-import com.google.common.base.Splitter;
-import com.google.common.collect.Lists;
@@ -6,0 +5,3 @@ import javax.annotation.Nullable;
+
+import com.google.common.base.Splitter;
+import com.google.common.collect.Lists;
@@ -38,3 +39,2 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    public void initGui()
-    {
-        this.title = I18n.format("selectWorld.title", new Object[0]);
+    public void initGui() {
+        this.title = I18n.format("selectWorld.title");
@@ -48,2 +48,2 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    public void handleMouseInput() throws IOException
-    {
+    @Override
+    public void handleMouseInput() throws IOException {
@@ -54,8 +54,7 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    public void postInit()
-    {
-        this.selectButton = this.func_189646_b(new GuiButton(1, this.width / 2 - 154, this.height - 52, 150, 20, I18n.format("selectWorld.select", new Object[0])));
-        this.func_189646_b(new GuiButton(3, this.width / 2 + 4, this.height - 52, 150, 20, I18n.format("selectWorld.create", new Object[0])));
-        this.renameButton = this.func_189646_b(new GuiButton(4, this.width / 2 - 154, this.height - 28, 72, 20, I18n.format("selectWorld.edit", new Object[0])));
-        this.deleteButton = this.func_189646_b(new GuiButton(2, this.width / 2 - 76, this.height - 28, 72, 20, I18n.format("selectWorld.delete", new Object[0])));
-        this.copyButton = this.func_189646_b(new GuiButton(5, this.width / 2 + 4, this.height - 28, 72, 20, I18n.format("selectWorld.recreate", new Object[0])));
-        this.func_189646_b(new GuiButton(0, this.width / 2 + 82, this.height - 28, 72, 20, I18n.format("gui.cancel", new Object[0])));
+    public void postInit() {
+        this.selectButton = this.addToButtonList(new GuiButton(1, this.width / 2 - 154, this.height - 52, 150, 20, I18n.format("selectWorld.select", new Object[0])));
+        this.addToButtonList(new GuiButton(3, this.width / 2 + 4, this.height - 52, 150, 20, I18n.format("selectWorld.create", new Object[0])));
+        this.renameButton = this.addToButtonList(new GuiButton(4, this.width / 2 - 154, this.height - 28, 72, 20, I18n.format("selectWorld.edit", new Object[0])));
+        this.deleteButton = this.addToButtonList(new GuiButton(2, this.width / 2 - 76, this.height - 28, 72, 20, I18n.format("selectWorld.delete", new Object[0])));
+        this.copyButton = this.addToButtonList(new GuiButton(5, this.width / 2 + 4, this.height - 28, 72, 20, I18n.format("selectWorld.recreate", new Object[0])));
+        this.addToButtonList(new GuiButton(0, this.width / 2 + 82, this.height - 28, 72, 20, I18n.format("gui.cancel", new Object[0])));
@@ -71,11 +70,8 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    protected void actionPerformed(GuiButton button) throws IOException
-    {
-        if (button.enabled)
-        {
-            GuiListWorldSelectionEntry guilistworldselectionentry = this.selectionList.getSelectedWorld();
-
-            if (button.id == 2)
-            {
-                if (guilistworldselectionentry != null)
-                {
-                    guilistworldselectionentry.deleteWorld();
+    @Override
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if(button.enabled) {
+            GuiListWorldSelectionEntry selectedWorld = this.selectionList.getSelectedWorld();
+
+            if(button.id == 2) {
+                if (selectedWorld != null) {
+                    selectedWorld.deleteWorld();
@@ -83,6 +79,3 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-            }
-            else if (button.id == 1)
-            {
-                if (guilistworldselectionentry != null)
-                {
-                    guilistworldselectionentry.joinWorld();
+            } else if(button.id == 1) {
+                if(selectedWorld != null) {
+                    selectedWorld.joinWorld();
@@ -90,3 +83 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-            }
-            else if (button.id == 3)
-            {
+            } else if(button.id == 3) {
@@ -94,6 +85,3 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-            }
-            else if (button.id == 4)
-            {
-                if (guilistworldselectionentry != null)
-                {
-                    guilistworldselectionentry.editWorld();
+            } else if(button.id == 4) {
+                if (selectedWorld != null) {
+                    selectedWorld.editWorld();
@@ -101,3 +89 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-            }
-            else if (button.id == 0)
-            {
+            } else if(button.id == 0) {
@@ -105,4 +91,2 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-            }
-            else if (button.id == 5 && guilistworldselectionentry != null)
-            {
-                guilistworldselectionentry.recreateWorld();
+            } else if(button.id == 5 && selectedWorld != null) {
+                selectedWorld.recreateWorld();
@@ -116,2 +100,2 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    public void drawScreen(int mouseX, int mouseY, float partialTicks)
-    {
+    @Override
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
@@ -120 +104 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-        this.drawCenteredString(this.fontRendererObj, this.title, this.width / 2, 20, 16777215);
+        this.drawCenteredString(this.fontRendererObj, this.title, this.width / 2, 20, 0x00FFFFFF);
@@ -123,2 +107 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-        if (this.worldVersTooltip != null)
-        {
+        if (this.worldVersTooltip != null) {
@@ -132,2 +115,2 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
-    {
+    @Override
+    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
@@ -141,2 +124,2 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    protected void mouseReleased(int mouseX, int mouseY, int state)
-    {
+    @Override
+    protected void mouseReleased(int mouseX, int mouseY, int state) {
@@ -150 +133 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    public void setVersionTooltip(String p_184861_1_)
+    public void setVersionTooltip(String versionTooltip)
@@ -152 +135 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-        this.worldVersTooltip = p_184861_1_;
+        this.worldVersTooltip = versionTooltip;
@@ -155,2 +138 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
-    public void selectWorld(@Nullable GuiListWorldSelectionEntry entry)
-    {
+    public void selectWorld(@Nullable GuiListWorldSelectionEntry entry) {
@@ -162,0 +145 @@ public class GuiWorldSelection extends GuiScreen implements GuiYesNoCallback
+
diff --git a/minecraft/client/gui/ServerListEntryNormal.java b/minecraft/client/gui/ServerListEntryNormal.java
index fe040d3..0567e92 100644
--- a/minecraft/client/gui/ServerListEntryNormal.java
+++ b/minecraft/client/gui/ServerListEntryNormal.java
@@ -45 +45 @@ public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
-        this.icon = (DynamicTexture)this.mc.getTextureManager().getTexture(this.serverIcon);
+        this.icon = (DynamicTexture)this.mc.getRenderEngine().getTexture(this.serverIcon);
@@ -154 +154 @@ public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
-        this.mc.getTextureManager().bindTexture(Gui.ICONS);
+        this.mc.getRenderEngine().bindTexture(Gui.ICONS);
@@ -187 +187 @@ public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
-            this.mc.getTextureManager().bindTexture(SERVER_SELECTION_BUTTONS);
+            this.mc.getRenderEngine().bindTexture(SERVER_SELECTION_BUTTONS);
@@ -233 +233 @@ public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
-        this.mc.getTextureManager().bindTexture(p_178012_3_);
+        this.mc.getRenderEngine().bindTexture(p_178012_3_);
@@ -248 +248 @@ public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
-            this.mc.getTextureManager().deleteTexture(this.serverIcon);
+            this.mc.getRenderEngine().deleteTexture(this.serverIcon);
@@ -282 +282 @@ public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
-                this.mc.getTextureManager().loadTexture(this.serverIcon, this.icon);
+                this.mc.getRenderEngine().loadTexture(this.serverIcon, this.icon);
diff --git a/minecraft/client/gui/achievement/GuiAchievement.java b/minecraft/client/gui/achievement/GuiAchievement.java
index 072ea13..6a6311e 100644
--- a/minecraft/client/gui/achievement/GuiAchievement.java
+++ b/minecraft/client/gui/achievement/GuiAchievement.java
@@ -114 +114 @@ public class GuiAchievement extends Gui
-            this.mc.getTextureManager().bindTexture(ACHIEVEMENT_BG);
+            this.mc.getRenderEngine().bindTexture(ACHIEVEMENT_BG);
diff --git a/minecraft/client/gui/achievement/GuiAchievements.java b/minecraft/client/gui/achievement/GuiAchievements.java
index d5c281b..943b8eb 100644
--- a/minecraft/client/gui/achievement/GuiAchievements.java
+++ b/minecraft/client/gui/achievement/GuiAchievements.java
@@ -24 +24 @@ import net.minecraft.util.text.TextComponentTranslation;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Mouse;
@@ -346 +346 @@ public class GuiAchievements extends GuiScreen implements IProgressMeter
-                this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+                this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -353 +353 @@ public class GuiAchievements extends GuiScreen implements IProgressMeter
-        this.mc.getTextureManager().bindTexture(ACHIEVEMENT_BACKGROUND);
+        this.mc.getRenderEngine().bindTexture(ACHIEVEMENT_BACKGROUND);
@@ -454 +454 @@ public class GuiAchievements extends GuiScreen implements IProgressMeter
-                this.mc.getTextureManager().bindTexture(ACHIEVEMENT_BACKGROUND);
+                this.mc.getRenderEngine().bindTexture(ACHIEVEMENT_BACKGROUND);
@@ -496 +496 @@ public class GuiAchievements extends GuiScreen implements IProgressMeter
-        this.mc.getTextureManager().bindTexture(ACHIEVEMENT_BACKGROUND);
+        this.mc.getRenderEngine().bindTexture(ACHIEVEMENT_BACKGROUND);
diff --git a/minecraft/client/gui/achievement/GuiStats.java b/minecraft/client/gui/achievement/GuiStats.java
index f27da54..f719c95 100644
--- a/minecraft/client/gui/achievement/GuiStats.java
+++ b/minecraft/client/gui/achievement/GuiStats.java
@@ -30 +30 @@ import net.minecraft.stats.StatisticsManager;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Mouse;
@@ -92,3 +92,3 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-        GuiButton guibutton = this.func_189646_b(new GuiButton(2, this.width / 2 - 80, this.height - 52, 80, 20, I18n.format("stat.blocksButton", new Object[0])));
-        GuiButton guibutton1 = this.func_189646_b(new GuiButton(3, this.width / 2, this.height - 52, 80, 20, I18n.format("stat.itemsButton", new Object[0])));
-        GuiButton guibutton2 = this.func_189646_b(new GuiButton(4, this.width / 2 + 80, this.height - 52, 80, 20, I18n.format("stat.mobsButton", new Object[0])));
+        GuiButton guibutton = this.addToButtonList(new GuiButton(2, this.width / 2 - 80, this.height - 52, 80, 20, I18n.format("stat.blocksButton", new Object[0])));
+        GuiButton guibutton1 = this.addToButtonList(new GuiButton(3, this.width / 2, this.height - 52, 80, 20, I18n.format("stat.itemsButton", new Object[0])));
+        GuiButton guibutton2 = this.addToButtonList(new GuiButton(4, this.width / 2 + 80, this.height - 52, 80, 20, I18n.format("stat.mobsButton", new Object[0])));
@@ -208 +208 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-        this.mc.getTextureManager().bindTexture(STAT_ICONS);
+        this.mc.getRenderEngine().bindTexture(STAT_ICONS);
@@ -262 +262 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-        protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn)
+        protected void drawListHeader(int insideLeft, int insideTop)
@@ -605 +605 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-        protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn)
+        protected void drawListHeader(int insideLeft, int insideTop)
@@ -607 +607 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-            super.drawListHeader(insideLeft, insideTop, tessellatorIn);
+            super.drawListHeader(insideLeft, insideTop);
@@ -816 +816 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-        protected void drawListHeader(int insideLeft, int insideTop, Tessellator tessellatorIn)
+        protected void drawListHeader(int insideLeft, int insideTop)
@@ -818 +818 @@ public class GuiStats extends GuiScreen implements IProgressMeter
-            super.drawListHeader(insideLeft, insideTop, tessellatorIn);
+            super.drawListHeader(insideLeft, insideTop);
diff --git a/minecraft/client/gui/inventory/GuiBeacon.java b/minecraft/client/gui/inventory/GuiBeacon.java
index c55c6f9..6b08b32 100644
--- a/minecraft/client/gui/inventory/GuiBeacon.java
+++ b/minecraft/client/gui/inventory/GuiBeacon.java
@@ -205 +205 @@ public class GuiBeacon extends GuiContainer
-        this.mc.getTextureManager().bindTexture(BEACON_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(BEACON_GUI_TEXTURES);
@@ -236 +236 @@ public class GuiBeacon extends GuiContainer
-                mc.getTextureManager().bindTexture(GuiBeacon.BEACON_GUI_TEXTURES);
+                mc.getRenderEngine().bindTexture(GuiBeacon.BEACON_GUI_TEXTURES);
@@ -259 +259 @@ public class GuiBeacon extends GuiContainer
-                    mc.getTextureManager().bindTexture(this.iconTexture);
+                    mc.getRenderEngine().bindTexture(this.iconTexture);
diff --git a/minecraft/client/gui/inventory/GuiBrewingStand.java b/minecraft/client/gui/inventory/GuiBrewingStand.java
index 72264b5..5979d3e 100644
--- a/minecraft/client/gui/inventory/GuiBrewingStand.java
+++ b/minecraft/client/gui/inventory/GuiBrewingStand.java
@@ -42 +42 @@ public class GuiBrewingStand extends GuiContainer
-        this.mc.getTextureManager().bindTexture(BREWING_STAND_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(BREWING_STAND_GUI_TEXTURES);
diff --git a/minecraft/client/gui/inventory/GuiChest.java b/minecraft/client/gui/inventory/GuiChest.java
index cc5b679..932fe56 100644
--- a/minecraft/client/gui/inventory/GuiChest.java
+++ b/minecraft/client/gui/inventory/GuiChest.java
@@ -48 +48 @@ public class GuiChest extends GuiContainer
-        this.mc.getTextureManager().bindTexture(CHEST_GUI_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(CHEST_GUI_TEXTURE);
diff --git a/minecraft/client/gui/inventory/GuiContainer.java b/minecraft/client/gui/inventory/GuiContainer.java
index 8a7a7a7..ab1c6b5 100644
--- a/minecraft/client/gui/inventory/GuiContainer.java
+++ b/minecraft/client/gui/inventory/GuiContainer.java
@@ -21 +21 @@ import net.minecraft.util.text.TextFormatting;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -292 +292 @@ public abstract class GuiContainer extends GuiScreen
-                this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+                this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
diff --git a/minecraft/client/gui/inventory/GuiContainerCreative.java b/minecraft/client/gui/inventory/GuiContainerCreative.java
index d5f4733..93caf36 100644
--- a/minecraft/client/gui/inventory/GuiContainerCreative.java
+++ b/minecraft/client/gui/inventory/GuiContainerCreative.java
@@ -34,2 +34,2 @@ import net.minecraft.util.text.TextFormatting;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Keyboard;
+import com.continuum.nova.input.Mouse;
@@ -692 +692 @@ public class GuiContainerCreative extends InventoryEffectRenderer
-            this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
+            this.mc.getRenderEngine().bindTexture(CREATIVE_INVENTORY_TABS);
@@ -700 +700 @@ public class GuiContainerCreative extends InventoryEffectRenderer
-        this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
+        this.mc.getRenderEngine().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
@@ -707 +707 @@ public class GuiContainerCreative extends InventoryEffectRenderer
-        this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
+        this.mc.getRenderEngine().bindTexture(CREATIVE_INVENTORY_TABS);
diff --git a/minecraft/client/gui/inventory/GuiCrafting.java b/minecraft/client/gui/inventory/GuiCrafting.java
index 1ebad08..a2cb68a 100644
--- a/minecraft/client/gui/inventory/GuiCrafting.java
+++ b/minecraft/client/gui/inventory/GuiCrafting.java
@@ -40 +40 @@ public class GuiCrafting extends GuiContainer
-        this.mc.getTextureManager().bindTexture(CRAFTING_TABLE_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(CRAFTING_TABLE_GUI_TEXTURES);
diff --git a/minecraft/client/gui/inventory/GuiDispenser.java b/minecraft/client/gui/inventory/GuiDispenser.java
index 59736e9..caaed67 100644
--- a/minecraft/client/gui/inventory/GuiDispenser.java
+++ b/minecraft/client/gui/inventory/GuiDispenser.java
@@ -42 +42 @@ public class GuiDispenser extends GuiContainer
-        this.mc.getTextureManager().bindTexture(DISPENSER_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(DISPENSER_GUI_TEXTURES);
diff --git a/minecraft/client/gui/inventory/GuiEditCommandBlockMinecart.java b/minecraft/client/gui/inventory/GuiEditCommandBlockMinecart.java
index 2740773..d61b6ee 100644
--- a/minecraft/client/gui/inventory/GuiEditCommandBlockMinecart.java
+++ b/minecraft/client/gui/inventory/GuiEditCommandBlockMinecart.java
@@ -17 +17 @@ import net.minecraft.util.text.ITextComponent;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -51,3 +51,3 @@ public class GuiEditCommandBlockMinecart extends GuiScreen implements ITabComple
-        this.doneButton = this.func_189646_b(new GuiButton(0, this.width / 2 - 4 - 150, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.done", new Object[0])));
-        this.cancelButton = this.func_189646_b(new GuiButton(1, this.width / 2 + 4, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.cancel", new Object[0])));
-        this.outputButton = this.func_189646_b(new GuiButton(4, this.width / 2 + 150 - 20, 150, 20, 20, "O"));
+        this.doneButton = this.addToButtonList(new GuiButton(0, this.width / 2 - 4 - 150, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.done", new Object[0])));
+        this.cancelButton = this.addToButtonList(new GuiButton(1, this.width / 2 + 4, this.height / 4 + 120 + 12, 150, 20, I18n.format("gui.cancel", new Object[0])));
+        this.outputButton = this.addToButtonList(new GuiButton(4, this.width / 2 + 150 - 20, 150, 20, 20, "O"));
diff --git a/minecraft/client/gui/inventory/GuiEditSign.java b/minecraft/client/gui/inventory/GuiEditSign.java
index 502326e..037aebf 100644
--- a/minecraft/client/gui/inventory/GuiEditSign.java
+++ b/minecraft/client/gui/inventory/GuiEditSign.java
@@ -16 +16 @@ import net.minecraft.util.text.TextComponentString;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -45 +45 @@ public class GuiEditSign extends GuiScreen
-        this.doneBtn = this.func_189646_b(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120, I18n.format("gui.done", new Object[0])));
+        this.doneBtn = this.addToButtonList(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120, I18n.format("gui.done", new Object[0])));
diff --git a/minecraft/client/gui/inventory/GuiEditStructure.java b/minecraft/client/gui/inventory/GuiEditStructure.java
index aa61ec4..e614ba5 100644
--- a/minecraft/client/gui/inventory/GuiEditStructure.java
+++ b/minecraft/client/gui/inventory/GuiEditStructure.java
@@ -23 +23 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
@@ -93,14 +93,14 @@ public class GuiEditStructure extends GuiScreen
-        this.field_189829_E = this.func_189646_b(new GuiButton(0, this.width / 2 - 4 - 150, 210, 150, 20, I18n.format("gui.done", new Object[0])));
-        this.field_189830_F = this.func_189646_b(new GuiButton(1, this.width / 2 + 4, 210, 150, 20, I18n.format("gui.cancel", new Object[0])));
-        this.field_189831_G = this.func_189646_b(new GuiButton(9, this.width / 2 + 4 + 100, 185, 50, 20, I18n.format("structure_block.button.save", new Object[0])));
-        this.field_189832_H = this.func_189646_b(new GuiButton(10, this.width / 2 + 4 + 100, 185, 50, 20, I18n.format("structure_block.button.load", new Object[0])));
-        this.field_189837_M = this.func_189646_b(new GuiButton(18, this.width / 2 - 4 - 150, 185, 50, 20, "MODE"));
-        this.field_189838_N = this.func_189646_b(new GuiButton(19, this.width / 2 + 4 + 100, 120, 50, 20, I18n.format("structure_block.button.detect_size", new Object[0])));
-        this.field_189839_O = this.func_189646_b(new GuiButton(20, this.width / 2 + 4 + 100, 160, 50, 20, "ENTITIES"));
-        this.field_189840_P = this.func_189646_b(new GuiButton(21, this.width / 2 - 20, 185, 40, 20, "MIRROR"));
-        this.field_189841_Q = this.func_189646_b(new GuiButton(22, this.width / 2 + 4 + 100, 80, 50, 20, "SHOWAIR"));
-        this.field_189842_R = this.func_189646_b(new GuiButton(23, this.width / 2 + 4 + 100, 80, 50, 20, "SHOWBB"));
-        this.field_189833_I = this.func_189646_b(new GuiButton(11, this.width / 2 - 1 - 40 - 1 - 40 - 20, 185, 40, 20, "0"));
-        this.field_189834_J = this.func_189646_b(new GuiButton(12, this.width / 2 - 1 - 40 - 20, 185, 40, 20, "90"));
-        this.field_189835_K = this.func_189646_b(new GuiButton(13, this.width / 2 + 1 + 20, 185, 40, 20, "180"));
-        this.field_189836_L = this.func_189646_b(new GuiButton(14, this.width / 2 + 1 + 40 + 1 + 20, 185, 40, 20, "270"));
+        this.field_189829_E = this.addToButtonList(new GuiButton(0, this.width / 2 - 4 - 150, 210, 150, 20, I18n.format("gui.done", new Object[0])));
+        this.field_189830_F = this.addToButtonList(new GuiButton(1, this.width / 2 + 4, 210, 150, 20, I18n.format("gui.cancel", new Object[0])));
+        this.field_189831_G = this.addToButtonList(new GuiButton(9, this.width / 2 + 4 + 100, 185, 50, 20, I18n.format("structure_block.button.save", new Object[0])));
+        this.field_189832_H = this.addToButtonList(new GuiButton(10, this.width / 2 + 4 + 100, 185, 50, 20, I18n.format("structure_block.button.load", new Object[0])));
+        this.field_189837_M = this.addToButtonList(new GuiButton(18, this.width / 2 - 4 - 150, 185, 50, 20, "MODE"));
+        this.field_189838_N = this.addToButtonList(new GuiButton(19, this.width / 2 + 4 + 100, 120, 50, 20, I18n.format("structure_block.button.detect_size", new Object[0])));
+        this.field_189839_O = this.addToButtonList(new GuiButton(20, this.width / 2 + 4 + 100, 160, 50, 20, "ENTITIES"));
+        this.field_189840_P = this.addToButtonList(new GuiButton(21, this.width / 2 - 20, 185, 40, 20, "MIRROR"));
+        this.field_189841_Q = this.addToButtonList(new GuiButton(22, this.width / 2 + 4 + 100, 80, 50, 20, "SHOWAIR"));
+        this.field_189842_R = this.addToButtonList(new GuiButton(23, this.width / 2 + 4 + 100, 80, 50, 20, "SHOWBB"));
+        this.field_189833_I = this.addToButtonList(new GuiButton(11, this.width / 2 - 1 - 40 - 1 - 40 - 20, 185, 40, 20, "0"));
+        this.field_189834_J = this.addToButtonList(new GuiButton(12, this.width / 2 - 1 - 40 - 20, 185, 40, 20, "90"));
+        this.field_189835_K = this.addToButtonList(new GuiButton(13, this.width / 2 + 1 + 20, 185, 40, 20, "180"));
+        this.field_189836_L = this.addToButtonList(new GuiButton(14, this.width / 2 + 1 + 40 + 1 + 20, 185, 40, 20, "270"));
diff --git a/minecraft/client/gui/inventory/GuiFurnace.java b/minecraft/client/gui/inventory/GuiFurnace.java
index 804574f..8094119 100644
--- a/minecraft/client/gui/inventory/GuiFurnace.java
+++ b/minecraft/client/gui/inventory/GuiFurnace.java
@@ -41 +41 @@ public class GuiFurnace extends GuiContainer
-        this.mc.getTextureManager().bindTexture(FURNACE_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(FURNACE_GUI_TEXTURES);
diff --git a/minecraft/client/gui/inventory/GuiInventory.java b/minecraft/client/gui/inventory/GuiInventory.java
index cd9f9a9..b31d79b 100644
--- a/minecraft/client/gui/inventory/GuiInventory.java
+++ b/minecraft/client/gui/inventory/GuiInventory.java
@@ -84 +84 @@ public class GuiInventory extends InventoryEffectRenderer
-        this.mc.getTextureManager().bindTexture(INVENTORY_BACKGROUND);
+        this.mc.getRenderEngine().bindTexture(INVENTORY_BACKGROUND);
diff --git a/minecraft/client/gui/inventory/GuiScreenHorseInventory.java b/minecraft/client/gui/inventory/GuiScreenHorseInventory.java
index 7916898..66ad5b8 100644
--- a/minecraft/client/gui/inventory/GuiScreenHorseInventory.java
+++ b/minecraft/client/gui/inventory/GuiScreenHorseInventory.java
@@ -53 +53 @@ public class GuiScreenHorseInventory extends GuiContainer
-        this.mc.getTextureManager().bindTexture(HORSE_GUI_TEXTURES);
+        this.mc.getRenderEngine().bindTexture(HORSE_GUI_TEXTURES);
diff --git a/minecraft/client/gui/spectator/PlayerMenuObject.java b/minecraft/client/gui/spectator/PlayerMenuObject.java
index 12feaab..260139d 100644
--- a/minecraft/client/gui/spectator/PlayerMenuObject.java
+++ b/minecraft/client/gui/spectator/PlayerMenuObject.java
@@ -37 +37 @@ public class PlayerMenuObject implements ISpectatorMenuObject
-        Minecraft.getMinecraft().getTextureManager().bindTexture(this.resourceLocation);
+        Minecraft.getMinecraft().getRenderEngine().bindTexture(this.resourceLocation);
diff --git a/minecraft/client/gui/spectator/SpectatorMenu.java b/minecraft/client/gui/spectator/SpectatorMenu.java
index ebe97c5..5c68e62 100644
--- a/minecraft/client/gui/spectator/SpectatorMenu.java
+++ b/minecraft/client/gui/spectator/SpectatorMenu.java
@@ -133 +133 @@ public class SpectatorMenu
-            Minecraft.getMinecraft().getTextureManager().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
+            Minecraft.getMinecraft().getRenderEngine().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
@@ -166 +166 @@ public class SpectatorMenu
-            Minecraft.getMinecraft().getTextureManager().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
+            Minecraft.getMinecraft().getRenderEngine().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
diff --git a/minecraft/client/gui/spectator/categories/TeleportToPlayer.java b/minecraft/client/gui/spectator/categories/TeleportToPlayer.java
index 25c59fd..932e210 100644
--- a/minecraft/client/gui/spectator/categories/TeleportToPlayer.java
+++ b/minecraft/client/gui/spectator/categories/TeleportToPlayer.java
@@ -72 +72 @@ public class TeleportToPlayer implements ISpectatorMenuView, ISpectatorMenuObjec
-        Minecraft.getMinecraft().getTextureManager().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
+        Minecraft.getMinecraft().getRenderEngine().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
diff --git a/minecraft/client/gui/spectator/categories/TeleportToTeam.java b/minecraft/client/gui/spectator/categories/TeleportToTeam.java
index 90b0343..a1d9c33 100644
--- a/minecraft/client/gui/spectator/categories/TeleportToTeam.java
+++ b/minecraft/client/gui/spectator/categories/TeleportToTeam.java
@@ -59 +59 @@ public class TeleportToTeam implements ISpectatorMenuView, ISpectatorMenuObject
-        Minecraft.getMinecraft().getTextureManager().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
+        Minecraft.getMinecraft().getRenderEngine().bindTexture(GuiSpectator.SPECTATOR_WIDGETS);
@@ -137 +137 @@ public class TeleportToTeam implements ISpectatorMenuView, ISpectatorMenuObject
-            Minecraft.getMinecraft().getTextureManager().bindTexture(this.location);
+            Minecraft.getMinecraft().getRenderEngine().bindTexture(this.location);
diff --git a/minecraft/client/network/NetHandlerPlayClient.java b/minecraft/client/network/NetHandlerPlayClient.java
index c484866..4646d90 100644
--- a/minecraft/client/network/NetHandlerPlayClient.java
+++ b/minecraft/client/network/NetHandlerPlayClient.java
@@ -301,0 +302 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -321,0 +323 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -488,0 +491 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -505,0 +509 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -531,0 +536 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -542,0 +548 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -557,0 +564 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -571,0 +579 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -600,0 +609 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -634,0 +644 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -649,0 +660 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -677,0 +689 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -694,0 +707 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -704,0 +718 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -770,0 +785 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -783,0 +799 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -814,0 +831 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -823,0 +841 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -832,0 +851 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -840,0 +860 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -866,0 +887 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -896,0 +918 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -914,0 +937 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -955,0 +979 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -965,0 +990 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1004,0 +1030 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1011,0 +1038 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1018,0 +1046 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1053,0 +1082 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1078,0 +1108 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1096,0 +1127 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1104,0 +1136 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1110,0 +1143 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1132,0 +1166 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1146,0 +1181 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1187,0 +1223 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1232,0 +1269 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1256,0 +1294 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1274,0 +1313 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1293,0 +1333 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1318,0 +1359 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1329,0 +1371 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1343,0 +1386 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1354,0 +1398 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1363,0 +1408 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1369,0 +1415 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1452,0 +1499 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1460,0 +1508 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1477,0 +1526 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1520,0 +1570 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1538,0 +1589 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1553,0 +1605 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1560,0 +1613 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1571,0 +1625 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1577,0 +1632 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1605,0 +1661 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1611,0 +1668 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1622,0 +1680 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1668,0 +1727 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1673,0 +1733 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1688,0 +1749 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1699,0 +1761 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1705,0 +1768 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1711,0 +1775 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1751,0 +1816 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+                        @Override
@@ -1755,0 +1821 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+                                @Override
@@ -1823,0 +1890 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+            @Override
@@ -1827,0 +1895 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+            @Override
@@ -1834,0 +1903 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1840,0 +1910 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1854,0 +1925 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1872,0 +1944 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1935,0 +2008 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1965,0 +2039 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -1993,0 +2068 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -2013,0 +2089 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -2076,0 +2153 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
@@ -2124,0 +2202 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
+    @Override
diff --git a/minecraft/client/particle/ParticleExplosionLarge.java b/minecraft/client/particle/ParticleExplosionLarge.java
index 49bcaff..e5d3f76 100644
--- a/minecraft/client/particle/ParticleExplosionLarge.java
+++ b/minecraft/client/particle/ParticleExplosionLarge.java
@@ -96 +96 @@ public class ParticleExplosionLarge extends Particle
-            return new ParticleExplosionLarge(Minecraft.getMinecraft().getTextureManager(), worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
+            return new ParticleExplosionLarge(Minecraft.getMinecraft().getRenderEngine(), worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
diff --git a/minecraft/client/particle/ParticleFootStep.java b/minecraft/client/particle/ParticleFootStep.java
index 399626a..a7d4bfb 100644
--- a/minecraft/client/particle/ParticleFootStep.java
+++ b/minecraft/client/particle/ParticleFootStep.java
@@ -84 +84 @@ public class ParticleFootStep extends Particle
-            return new ParticleFootStep(Minecraft.getMinecraft().getTextureManager(), worldIn, xCoordIn, yCoordIn, zCoordIn);
+            return new ParticleFootStep(Minecraft.getMinecraft().getRenderEngine(), worldIn, xCoordIn, yCoordIn, zCoordIn);
diff --git a/minecraft/client/particle/ParticleSweepAttack.java b/minecraft/client/particle/ParticleSweepAttack.java
index 37be382..fe78741 100644
--- a/minecraft/client/particle/ParticleSweepAttack.java
+++ b/minecraft/client/particle/ParticleSweepAttack.java
@@ -94 +94 @@ public class ParticleSweepAttack extends Particle
-            return new ParticleSweepAttack(Minecraft.getMinecraft().getTextureManager(), worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
+            return new ParticleSweepAttack(Minecraft.getMinecraft().getRenderEngine(), worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn);
diff --git a/minecraft/client/renderer/BannerTextures.java b/minecraft/client/renderer/BannerTextures.java
index 5872f89..799b3f8 100644
--- a/minecraft/client/renderer/BannerTextures.java
+++ b/minecraft/client/renderer/BannerTextures.java
@@ -67 +67 @@ public class BannerTextures
-                    Minecraft.getMinecraft().getTextureManager().loadTexture(bannertextures$cacheentry.textureLocation, new LayeredColorMaskTexture(this.cacheResourceLocation, list, p_187478_3_));
+                    Minecraft.getMinecraft().getRenderEngine().loadTexture(bannertextures$cacheentry.textureLocation, new LayeredColorMaskTexture(this.cacheResourceLocation, list, p_187478_3_));
@@ -88 +88 @@ public class BannerTextures
-                    Minecraft.getMinecraft().getTextureManager().deleteTexture(bannertextures$cacheentry.textureLocation);
+                    Minecraft.getMinecraft().getRenderEngine().deleteTexture(bannertextures$cacheentry.textureLocation);
diff --git a/minecraft/client/renderer/BlockFluidRenderer.java b/minecraft/client/renderer/BlockFluidRenderer.java
index 896e3d6..a22550a 100644
--- a/minecraft/client/renderer/BlockFluidRenderer.java
+++ b/minecraft/client/renderer/BlockFluidRenderer.java
@@ -43,9 +43,9 @@ public class BlockFluidRenderer
-        boolean flag = blockStateIn.getMaterial() == Material.LAVA;
-        TextureAtlasSprite[] atextureatlassprite = flag ? this.atlasSpritesLava : this.atlasSpritesWater;
-        int i = this.blockColors.colorMultiplier(blockStateIn, blockAccess, blockPosIn, 0);
-        float f = (float)(i >> 16 & 255) / 255.0F;
-        float f1 = (float)(i >> 8 & 255) / 255.0F;
-        float f2 = (float)(i & 255) / 255.0F;
-        boolean flag1 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
-        boolean flag2 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
-        boolean[] aboolean = new boolean[] {blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST)};
+        boolean isLava = blockStateIn.getMaterial() == Material.LAVA;
+        TextureAtlasSprite[] sprites = isLava ? this.atlasSpritesLava : this.atlasSpritesWater;
+        int fluidColor = this.blockColors.colorMultiplier(blockStateIn, blockAccess, blockPosIn, 0);
+        float fluidRed = (float)(fluidColor >> 16 & 255) / 255.0F;
+        float fluidGreen = (float)(fluidColor >> 8 & 255) / 255.0F;
+        float fluidBlue = (float)(fluidColor & 255) / 255.0F;
+        boolean shouldUpBeRendered = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
+        boolean shouldDownBeRendered = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
+        boolean[] shouldSidesBeRendered = new boolean[] {blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST)};
@@ -53 +53 @@ public class BlockFluidRenderer
-        if (!flag1 && !flag2 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3])
+        if (!shouldUpBeRendered && !shouldDownBeRendered && !shouldSidesBeRendered[0] && !shouldSidesBeRendered[1] && !shouldSidesBeRendered[2] && !shouldSidesBeRendered[3])
@@ -65,7 +65,7 @@ public class BlockFluidRenderer
-            float f7 = this.getFluidHeight(blockAccess, blockPosIn, material);
-            float f8 = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
-            float f9 = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
-            float f10 = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
-            double d0 = (double)blockPosIn.getX();
-            double d1 = (double)blockPosIn.getY();
-            double d2 = (double)blockPosIn.getZ();
+            float fluidHeight = this.getFluidHeight(blockAccess, blockPosIn, material);
+            float southFluidHeight = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
+            float southEastFluidHeight = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
+            float eastFluidHeight = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
+            double x = (double)blockPosIn.getX();
+            double y = (double)blockPosIn.getY();
+            double z = (double)blockPosIn.getZ();
@@ -74 +74 @@ public class BlockFluidRenderer
-            if (flag1)
+            if (shouldUpBeRendered)
@@ -77,6 +77,6 @@ public class BlockFluidRenderer
-                float f12 = BlockLiquid.func_189544_a(blockAccess, blockPosIn, material, blockStateIn);
-                TextureAtlasSprite textureatlassprite = f12 > -999.0F ? atextureatlassprite[1] : atextureatlassprite[0];
-                f7 -= 0.001F;
-                f8 -= 0.001F;
-                f9 -= 0.001F;
-                f10 -= 0.001F;
+                float someKindaFlowingFluidFlag = BlockLiquid.func_189544_a(blockAccess, blockPosIn, material, blockStateIn);
+                TextureAtlasSprite textureatlassprite = someKindaFlowingFluidFlag > -999.0F ? sprites[1] : sprites[0];
+                fluidHeight -= 0.001F;
+                southFluidHeight -= 0.001F;
+                southEastFluidHeight -= 0.001F;
+                eastFluidHeight -= 0.001F;
@@ -92 +92 @@ public class BlockFluidRenderer
-                if (f12 < -999.0F)
+                if (someKindaFlowingFluidFlag < -999.0F)
@@ -105,2 +105,2 @@ public class BlockFluidRenderer
-                    float f21 = MathHelper.sin(f12) * 0.25F;
-                    float f22 = MathHelper.cos(f12) * 0.25F;
+                    float f21 = MathHelper.sin(someKindaFlowingFluidFlag) * 0.25F;
+                    float f22 = MathHelper.cos(someKindaFlowingFluidFlag) * 0.25F;
@@ -121,7 +121,7 @@ public class BlockFluidRenderer
-                float f24 = 1.0F * f;
-                float f25 = 1.0F * f1;
-                float f26 = 1.0F * f2;
-                worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
-                worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
-                worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
-                worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
+                float f24 = 1.0F * fluidRed;
+                float f25 = 1.0F * fluidGreen;
+                float f26 = 1.0F * fluidBlue;
+                worldRendererIn.pos(x + 0.0D, y + (double)fluidHeight, z + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
+                worldRendererIn.pos(x + 0.0D, y + (double)southFluidHeight, z + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
+                worldRendererIn.pos(x + 1.0D, y + (double)southEastFluidHeight, z + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
+                worldRendererIn.pos(x + 1.0D, y + (double)eastFluidHeight, z + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
@@ -131,4 +131,4 @@ public class BlockFluidRenderer
-                    worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
-                    worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
-                    worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
-                    worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
+                    worldRendererIn.pos(x + 0.0D, y + (double)fluidHeight, z + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
+                    worldRendererIn.pos(x + 1.0D, y + (double)eastFluidHeight, z + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
+                    worldRendererIn.pos(x + 1.0D, y + (double)southEastFluidHeight, z + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
+                    worldRendererIn.pos(x + 0.0D, y + (double)southFluidHeight, z + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
@@ -138 +138 @@ public class BlockFluidRenderer
-            if (flag2)
+            if (shouldDownBeRendered)
@@ -140,4 +140,4 @@ public class BlockFluidRenderer
-                float f35 = atextureatlassprite[0].getMinU();
-                float f36 = atextureatlassprite[0].getMaxU();
-                float f37 = atextureatlassprite[0].getMinV();
-                float f38 = atextureatlassprite[0].getMaxV();
+                float f35 = sprites[0].getMinU();
+                float f36 = sprites[0].getMaxU();
+                float f37 = sprites[0].getMinV();
+                float f38 = sprites[0].getMaxV();
@@ -147,4 +147,4 @@ public class BlockFluidRenderer
-                worldRendererIn.pos(d0, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f38).lightmap(i2, j2).endVertex();
-                worldRendererIn.pos(d0, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f37).lightmap(i2, j2).endVertex();
-                worldRendererIn.pos(d0 + 1.0D, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f37).lightmap(i2, j2).endVertex();
-                worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f38).lightmap(i2, j2).endVertex();
+                worldRendererIn.pos(x, y, z + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f38).lightmap(i2, j2).endVertex();
+                worldRendererIn.pos(x, y, z).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f37).lightmap(i2, j2).endVertex();
+                worldRendererIn.pos(x + 1.0D, y, z).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f37).lightmap(i2, j2).endVertex();
+                worldRendererIn.pos(x + 1.0D, y, z + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f38).lightmap(i2, j2).endVertex();
@@ -180 +180 @@ public class BlockFluidRenderer
-                TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
+                TextureAtlasSprite textureatlassprite1 = sprites[1];
@@ -182 +182 @@ public class BlockFluidRenderer
-                if (!flag)
+                if (!isLava)
@@ -192 +192 @@ public class BlockFluidRenderer
-                if (aboolean[i1])
+                if (shouldSidesBeRendered[i1])
@@ -203,6 +203,6 @@ public class BlockFluidRenderer
-                        f39 = f7;
-                        f40 = f10;
-                        d3 = d0;
-                        d5 = d0 + 1.0D;
-                        d4 = d2 + 0.0010000000474974513D;
-                        d6 = d2 + 0.0010000000474974513D;
+                        f39 = fluidHeight;
+                        f40 = eastFluidHeight;
+                        d3 = x;
+                        d5 = x + 1.0D;
+                        d4 = z + 0.0010000000474974513D;
+                        d6 = z + 0.0010000000474974513D;
@@ -212,6 +212,6 @@ public class BlockFluidRenderer
-                        f39 = f9;
-                        f40 = f8;
-                        d3 = d0 + 1.0D;
-                        d5 = d0;
-                        d4 = d2 + 1.0D - 0.0010000000474974513D;
-                        d6 = d2 + 1.0D - 0.0010000000474974513D;
+                        f39 = southEastFluidHeight;
+                        f40 = southFluidHeight;
+                        d3 = x + 1.0D;
+                        d5 = x;
+                        d4 = z + 1.0D - 0.0010000000474974513D;
+                        d6 = z + 1.0D - 0.0010000000474974513D;
@@ -221,6 +221,6 @@ public class BlockFluidRenderer
-                        f39 = f8;
-                        f40 = f7;
-                        d3 = d0 + 0.0010000000474974513D;
-                        d5 = d0 + 0.0010000000474974513D;
-                        d4 = d2 + 1.0D;
-                        d6 = d2;
+                        f39 = southFluidHeight;
+                        f40 = fluidHeight;
+                        d3 = x + 0.0010000000474974513D;
+                        d5 = x + 0.0010000000474974513D;
+                        d4 = z + 1.0D;
+                        d6 = z;
@@ -230,6 +230,6 @@ public class BlockFluidRenderer
-                        f39 = f10;
-                        f40 = f9;
-                        d3 = d0 + 1.0D - 0.0010000000474974513D;
-                        d5 = d0 + 1.0D - 0.0010000000474974513D;
-                        d4 = d2;
-                        d6 = d2 + 1.0D;
+                        f39 = eastFluidHeight;
+                        f40 = southEastFluidHeight;
+                        d3 = x + 1.0D - 0.0010000000474974513D;
+                        d5 = x + 1.0D - 0.0010000000474974513D;
+                        d4 = z;
+                        d6 = z + 1.0D;
@@ -248,7 +248,7 @@ public class BlockFluidRenderer
-                    float f32 = 1.0F * f31 * f;
-                    float f33 = 1.0F * f31 * f1;
-                    float f34 = 1.0F * f31 * f2;
-                    worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
-                    worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
-                    worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
-                    worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
+                    float f32 = 1.0F * f31 * fluidRed;
+                    float f33 = 1.0F * f31 * fluidGreen;
+                    float f34 = 1.0F * f31 * fluidBlue;
+                    worldRendererIn.pos(d3, y + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
+                    worldRendererIn.pos(d5, y + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
+                    worldRendererIn.pos(d5, y + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
+                    worldRendererIn.pos(d3, y + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
@@ -258,4 +258,4 @@ public class BlockFluidRenderer
-                        worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
-                        worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
-                        worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
-                        worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
+                        worldRendererIn.pos(d3, y + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
+                        worldRendererIn.pos(d5, y + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
+                        worldRendererIn.pos(d5, y + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
+                        worldRendererIn.pos(d3, y + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
diff --git a/minecraft/client/renderer/BlockModelRenderer.java b/minecraft/client/renderer/BlockModelRenderer.java
index 30f9818..a903877 100644
--- a/minecraft/client/renderer/BlockModelRenderer.java
+++ b/minecraft/client/renderer/BlockModelRenderer.java
@@ -39 +39 @@ public class BlockModelRenderer
-        boolean flag = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue() == 0 && modelIn.isAmbientOcclusion();
+        boolean shouldRenderSmooth = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue() == 0 && modelIn.isAmbientOcclusion();
@@ -43 +43 @@ public class BlockModelRenderer
-            return flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
+            return shouldRenderSmooth ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
@@ -50 +50 @@ public class BlockModelRenderer
-            crashreportcategory.addCrashSection("Using AO", Boolean.valueOf(flag));
+            crashreportcategory.addCrashSection("Using AO", Boolean.valueOf(shouldRenderSmooth));
@@ -86 +86 @@ public class BlockModelRenderer
-        boolean flag = false;
+        boolean hasRenderedAnything = false;
@@ -91 +91 @@ public class BlockModelRenderer
-            List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
+            List<BakedQuad> quads = modelIn.getQuads(stateIn, enumfacing, rand);
@@ -93 +93 @@ public class BlockModelRenderer
-            if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
+            if (!quads.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
@@ -95,3 +95,3 @@ public class BlockModelRenderer
-                int i = stateIn.getPackedLightmapCoords(worldIn, posIn.offset(enumfacing));
-                this.renderQuadsFlat(worldIn, stateIn, posIn, i, false, buffer, list, bitset);
-                flag = true;
+                int lmCoords = stateIn.getPackedLightmapCoords(worldIn, posIn.offset(enumfacing));
+                this.renderQuadsFlat(worldIn, stateIn, posIn, lmCoords, false, buffer, quads, bitset);
+                hasRenderedAnything = true;
@@ -106 +106 @@ public class BlockModelRenderer
-            flag = true;
+            hasRenderedAnything = true;
@@ -109 +109 @@ public class BlockModelRenderer
-        return flag;
+        return hasRenderedAnything;
@@ -245 +245 @@ public class BlockModelRenderer
-    private void renderQuadsFlat(IBlockAccess worldIn, IBlockState state, BlockPos pos, int p_187496_4_, boolean p_187496_5_, VertexBuffer p_187496_6_, List<BakedQuad> p_187496_7_, BitSet p_187496_8_)
+    private void renderQuadsFlat(IBlockAccess worldIn, IBlockState state, BlockPos pos, int lmCoords, boolean p_187496_5_, VertexBuffer vertexBuffer, List<BakedQuad> quads, BitSet bitSet)
@@ -247,3 +247,3 @@ public class BlockModelRenderer
-        double d0 = (double)pos.getX();
-        double d1 = (double)pos.getY();
-        double d2 = (double)pos.getZ();
+        double x = (double)pos.getX();
+        double y = (double)pos.getY();
+        double z = (double)pos.getZ();
@@ -251 +251 @@ public class BlockModelRenderer
-        Block.EnumOffsetType block$enumoffsettype = block.getOffsetType();
+        Block.EnumOffsetType offsetType = block.getOffsetType();
@@ -253 +253 @@ public class BlockModelRenderer
-        if (block$enumoffsettype != Block.EnumOffsetType.NONE)
+        if (offsetType != Block.EnumOffsetType.NONE)
@@ -255,3 +255,5 @@ public class BlockModelRenderer
-            int i = pos.getX();
-            int j = pos.getZ();
-            long k = (long)(i * 3129871) ^ (long)j * 116129781L;
+            // Not sure what the point of this bit is. Initial guess is that it removes the translation from chunks but
+            // I really have no idea
+            int x1 = pos.getX();
+            int z1 = pos.getZ();
+            long k = (long)(x1 * 3129871) ^ (long)z1 * 116129781L;
@@ -259,2 +261,2 @@ public class BlockModelRenderer
-            d0 += ((double)((float)(k >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
-            d2 += ((double)((float)(k >> 24 & 15L) / 15.0F) - 0.5D) * 0.5D;
+            x += ((double)((float)(k >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
+            z += ((double)((float)(k >> 24 & 15L) / 15.0F) - 0.5D) * 0.5D;
@@ -262 +264 @@ public class BlockModelRenderer
-            if (block$enumoffsettype == Block.EnumOffsetType.XYZ)
+            if (offsetType == Block.EnumOffsetType.XYZ)
@@ -264 +266 @@ public class BlockModelRenderer
-                d1 += ((double)((float)(k >> 20 & 15L) / 15.0F) - 1.0D) * 0.2D;
+                y += ((double)((float)(k >> 20 & 15L) / 15.0F) - 1.0D) * 0.2D;
@@ -268 +270 @@ public class BlockModelRenderer
-        int l = 0;
+        int index = 0;
@@ -270 +272 @@ public class BlockModelRenderer
-        for (int i1 = p_187496_7_.size(); l < i1; ++l)
+        for (int numQuads = quads.size(); index < numQuads; ++index)
@@ -272 +274 @@ public class BlockModelRenderer
-            BakedQuad bakedquad = (BakedQuad)p_187496_7_.get(l);
+            BakedQuad bakedquad = (BakedQuad)quads.get(index);
@@ -273,0 +276 @@ public class BlockModelRenderer
+            // Don't know what this does but it's false from my caller
@@ -276,3 +279,3 @@ public class BlockModelRenderer
-                this.fillQuadBounds(state, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, p_187496_8_);
-                BlockPos blockpos = p_187496_8_.get(0) ? pos.offset(bakedquad.getFace()) : pos;
-                p_187496_4_ = state.getPackedLightmapCoords(worldIn, blockpos);
+                this.fillQuadBounds(state, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitSet);
+                BlockPos blockpos = bitSet.get(0) ? pos.offset(bakedquad.getFace()) : pos;
+                lmCoords = state.getPackedLightmapCoords(worldIn, blockpos);
@@ -281,2 +284,2 @@ public class BlockModelRenderer
-            p_187496_6_.addVertexData(bakedquad.getVertexData());
-            p_187496_6_.putBrightness4(p_187496_4_, p_187496_4_, p_187496_4_, p_187496_4_);
+            vertexBuffer.addVertexData(bakedquad.getVertexData());
+            vertexBuffer.putBrightness4(lmCoords, lmCoords, lmCoords, lmCoords);
@@ -286 +289 @@ public class BlockModelRenderer
-                int j1 = this.blockColors.colorMultiplier(state, worldIn, pos, bakedquad.getTintIndex());
+                int colorMultiplier = this.blockColors.colorMultiplier(state, worldIn, pos, bakedquad.getTintIndex());
@@ -290 +293 @@ public class BlockModelRenderer
-                    j1 = TextureUtil.anaglyphColor(j1);
+                    colorMultiplier = TextureUtil.anaglyphColor(colorMultiplier);
@@ -293,7 +296,7 @@ public class BlockModelRenderer
-                float f = (float)(j1 >> 16 & 255) / 255.0F;
-                float f1 = (float)(j1 >> 8 & 255) / 255.0F;
-                float f2 = (float)(j1 & 255) / 255.0F;
-                p_187496_6_.putColorMultiplier(f, f1, f2, 4);
-                p_187496_6_.putColorMultiplier(f, f1, f2, 3);
-                p_187496_6_.putColorMultiplier(f, f1, f2, 2);
-                p_187496_6_.putColorMultiplier(f, f1, f2, 1);
+                float red = (float)(colorMultiplier >> 16 & 255) / 255.0F;
+                float green = (float)(colorMultiplier >> 8 & 255) / 255.0F;
+                float blue = (float)(colorMultiplier & 255) / 255.0F;
+                vertexBuffer.putColorMultiplier(red, green, blue, 4);
+                vertexBuffer.putColorMultiplier(red, green, blue, 3);
+                vertexBuffer.putColorMultiplier(red, green, blue, 2);
+                vertexBuffer.putColorMultiplier(red, green, blue, 1);
@@ -302 +305 @@ public class BlockModelRenderer
-            p_187496_6_.putPosition(d0, d1, d2);
+            vertexBuffer.putPosition(x, y, z);
@@ -311 +314 @@ public class BlockModelRenderer
-    public void renderModelBrightnessColor(IBlockState state, IBakedModel p_187495_2_, float p_187495_3_, float p_187495_4_, float p_187495_5_, float p_187495_6_)
+    public void renderModelBrightnessColor(IBlockState state, IBakedModel model, float brghtness, float red, float green, float blue)
@@ -315 +318 @@ public class BlockModelRenderer
-            this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, enumfacing, 0L));
+            this.renderModelBrightnessColorQuads(brghtness, red, green, blue, model.getQuads(state, enumfacing, 0L));
@@ -318 +321 @@ public class BlockModelRenderer
-        this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, (EnumFacing)null, 0L));
+        this.renderModelBrightnessColorQuads(brghtness, red, green, blue, model.getQuads(state, (EnumFacing)null, 0L));
@@ -323 +325,0 @@ public class BlockModelRenderer
-        Block block = state.getBlock();
@@ -325 +327 @@ public class BlockModelRenderer
-        int i = this.blockColors.colorMultiplier(state, (IBlockAccess)null, (BlockPos)null, 0);
+        int colorMultiplier = this.blockColors.colorMultiplier(state, (IBlockAccess)null, (BlockPos)null, 0);
@@ -329 +331 @@ public class BlockModelRenderer
-            i = TextureUtil.anaglyphColor(i);
+            colorMultiplier = TextureUtil.anaglyphColor(colorMultiplier);
@@ -332,3 +334,3 @@ public class BlockModelRenderer
-        float f = (float)(i >> 16 & 255) / 255.0F;
-        float f1 = (float)(i >> 8 & 255) / 255.0F;
-        float f2 = (float)(i & 255) / 255.0F;
+        float red = (float)(colorMultiplier >> 16 & 255) / 255.0F;
+        float green = (float)(colorMultiplier >> 8 & 255) / 255.0F;
+        float blue = (float)(colorMultiplier & 255) / 255.0F;
@@ -341 +343 @@ public class BlockModelRenderer
-        this.renderModelBrightnessColor(state, model, brightness, f, f1, f2);
+        this.renderModelBrightnessColor(state, model, brightness, red, green, blue);
@@ -352 +354 @@ public class BlockModelRenderer
-            BakedQuad bakedquad = (BakedQuad)listQuads.get(i);
+            BakedQuad bakedquad = listQuads.get(i);
diff --git a/minecraft/client/renderer/BlockModelShapes.java b/minecraft/client/renderer/BlockModelShapes.java
index f5d5c85..13cfa0c 100644
--- a/minecraft/client/renderer/BlockModelShapes.java
+++ b/minecraft/client/renderer/BlockModelShapes.java
@@ -4,40 +4 @@ import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.Map.Entry;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockBed;
-import net.minecraft.block.BlockCactus;
-import net.minecraft.block.BlockColored;
-import net.minecraft.block.BlockDirt;
-import net.minecraft.block.BlockDispenser;
-import net.minecraft.block.BlockDoor;
-import net.minecraft.block.BlockDoublePlant;
-import net.minecraft.block.BlockDropper;
-import net.minecraft.block.BlockFenceGate;
-import net.minecraft.block.BlockFire;
-import net.minecraft.block.BlockFlowerPot;
-import net.minecraft.block.BlockHopper;
-import net.minecraft.block.BlockJukebox;
-import net.minecraft.block.BlockLeaves;
-import net.minecraft.block.BlockNewLeaf;
-import net.minecraft.block.BlockNewLog;
-import net.minecraft.block.BlockOldLeaf;
-import net.minecraft.block.BlockOldLog;
-import net.minecraft.block.BlockPlanks;
-import net.minecraft.block.BlockPrismarine;
-import net.minecraft.block.BlockQuartz;
-import net.minecraft.block.BlockRedSandstone;
-import net.minecraft.block.BlockRedstoneWire;
-import net.minecraft.block.BlockReed;
-import net.minecraft.block.BlockSand;
-import net.minecraft.block.BlockSandStone;
-import net.minecraft.block.BlockSapling;
-import net.minecraft.block.BlockSilverfish;
-import net.minecraft.block.BlockStem;
-import net.minecraft.block.BlockStone;
-import net.minecraft.block.BlockStoneBrick;
-import net.minecraft.block.BlockStoneSlab;
-import net.minecraft.block.BlockStoneSlabNew;
-import net.minecraft.block.BlockTNT;
-import net.minecraft.block.BlockTallGrass;
-import net.minecraft.block.BlockTripWire;
-import net.minecraft.block.BlockWall;
+import net.minecraft.block.*;
@@ -56,0 +18,5 @@ import net.minecraft.util.ResourceLocation;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.Map;
+import java.util.Map.Entry;
@@ -59,0 +26,2 @@ public class BlockModelShapes
+    private static final Logger LOG = LogManager.getLogger(BlockModelShapes.class);
+
@@ -144 +112,2 @@ public class BlockModelShapes
-            this.bakedModelStore.put(entry.getKey(), this.modelManager.getModel((ModelResourceLocation)entry.getValue()));
+            IBakedModel model = this.modelManager.getModel((ModelResourceLocation)entry.getValue());
+            this.bakedModelStore.put(entry.getKey(), model);
diff --git a/minecraft/client/renderer/BlockRendererDispatcher.java b/minecraft/client/renderer/BlockRendererDispatcher.java
index 8febef5..a0cb230 100644
--- a/minecraft/client/renderer/BlockRendererDispatcher.java
+++ b/minecraft/client/renderer/BlockRendererDispatcher.java
@@ -26 +26 @@ public class BlockRendererDispatcher implements IResourceManagerReloadListener
-    public BlockRendererDispatcher(BlockModelShapes p_i46577_1_, BlockColors p_i46577_2_)
+    public BlockRendererDispatcher(BlockModelShapes blockShapes, BlockColors blockColord)
@@ -28,3 +28,3 @@ public class BlockRendererDispatcher implements IResourceManagerReloadListener
-        this.blockModelShapes = p_i46577_1_;
-        this.blockModelRenderer = new BlockModelRenderer(p_i46577_2_);
-        this.fluidRenderer = new BlockFluidRenderer(p_i46577_2_);
+        this.blockModelShapes = blockShapes;
+        this.blockModelRenderer = new BlockModelRenderer(blockColord);
+        this.fluidRenderer = new BlockFluidRenderer(blockColord);
@@ -146,0 +147,4 @@ public class BlockRendererDispatcher implements IResourceManagerReloadListener
+
+    public BlockFluidRenderer getFluidRenderer() {
+        return fluidRenderer;
+    }
diff --git a/minecraft/client/renderer/EntityRenderer.java b/minecraft/client/renderer/EntityRenderer.java
index 25e1fb8..4add9e6 100644
--- a/minecraft/client/renderer/EntityRenderer.java
+++ b/minecraft/client/renderer/EntityRenderer.java
@@ -2,0 +3 @@ package net.minecraft.client.renderer;
+import com.continuum.nova.NovaNative;
@@ -36,3 +36,0 @@ import net.minecraft.client.shader.ShaderLinkHelper;
-import net.minecraft.crash.CrashReport;
-import net.minecraft.crash.CrashReportCategory;
-import net.minecraft.crash.ICrashReportDetail;
@@ -58 +55,0 @@ import net.minecraft.util.MouseFilter;
-import net.minecraft.util.ReportedException;
@@ -72 +69 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Mouse;
@@ -76,0 +74 @@ import org.lwjgl.util.glu.Project;
+@SuppressWarnings("ALL")
@@ -154 +152 @@ public class EntityRenderer implements IResourceManagerReloadListener
-     * Is set, updateCameraAndRender() calls updateLightmap(); set by updateTorchFlicker()
+     * Is set, updateCamera() calls updateLightmap(); set by updateTorchFlicker()
@@ -196 +194 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.theMapItemRenderer = new MapItemRenderer(mcIn.getTextureManager());
+        this.theMapItemRenderer = new MapItemRenderer(mcIn.getRenderEngine());
@@ -198 +196 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.locationLightMap = mcIn.getTextureManager().getDynamicTextureLocation("lightMap", this.lightmapTexture);
+        this.locationLightMap = mcIn.getRenderEngine().getDynamicTextureLocation("lightMap", this.lightmapTexture);
@@ -269 +267 @@ public class EntityRenderer implements IResourceManagerReloadListener
-            this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
+            this.theShaderGroup = new ShaderGroup(this.mc.getRenderEngine(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
@@ -878 +876 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().bindTexture(this.locationLightMap);
+        this.mc.getRenderEngine().bindTexture(this.locationLightMap);
@@ -899 +897 @@ public class EntityRenderer implements IResourceManagerReloadListener
-    private void updateLightmap(float partialTicks)
+    public void updateLightmap(float partialTicks)
@@ -908,2 +906,2 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                float f = world.getSunBrightness(1.0F);
-                float f1 = f * 0.95F + 0.05F;
+                float sunBrightness = world.getSunBrightness(1.0F);
+                float sunBrightnessScaled = sunBrightness * 0.95F + 0.05F;
@@ -913,2 +911,2 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    float f2 = world.provider.getLightBrightnessTable()[i / 16] * f1;
-                    float f3 = world.provider.getLightBrightnessTable()[i % 16] * (this.torchFlickerX * 0.1F + 1.5F);
+                    float sunBrighessLookedUp = world.provider.getLightBrightnessTable()[i / 16] * sunBrightnessScaled;
+                    float blockBrightnessLookedUp = world.provider.getLightBrightnessTable()[i % 16] * (this.torchFlickerX * 0.1F + 1.5F);
@@ -918 +916 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f2 = world.provider.getLightBrightnessTable()[i / 16];
+                        sunBrighessLookedUp = world.provider.getLightBrightnessTable()[i / 16];
@@ -921,10 +919,10 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    float f4 = f2 * (f * 0.65F + 0.35F);
-                    float f5 = f2 * (f * 0.65F + 0.35F);
-                    float f6 = f3 * ((f3 * 0.6F + 0.4F) * 0.6F + 0.4F);
-                    float f7 = f3 * (f3 * f3 * 0.6F + 0.4F);
-                    float f8 = f4 + f3;
-                    float f9 = f5 + f6;
-                    float f10 = f2 + f7;
-                    f8 = f8 * 0.96F + 0.03F;
-                    f9 = f9 * 0.96F + 0.03F;
-                    f10 = f10 * 0.96F + 0.03F;
+                    float f4 = sunBrighessLookedUp * (sunBrightness * 0.65F + 0.35F);
+                    float f5 = sunBrighessLookedUp * (sunBrightness * 0.65F + 0.35F);
+                    float f6 = blockBrightnessLookedUp * ((blockBrightnessLookedUp * 0.6F + 0.4F) * 0.6F + 0.4F);
+                    float f7 = blockBrightnessLookedUp * (blockBrightnessLookedUp * blockBrightnessLookedUp * 0.6F + 0.4F);
+                    float blue = f4 + blockBrightnessLookedUp;
+                    float green = f5 + f6;
+                    float red = sunBrighessLookedUp + f7;
+                    blue = blue * 0.96F + 0.03F;
+                    green = green * 0.96F + 0.03F;
+                    red = red * 0.96F + 0.03F;
@@ -935,3 +933,3 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f8 = f8 * (1.0F - f11) + f8 * 0.7F * f11;
-                        f9 = f9 * (1.0F - f11) + f9 * 0.6F * f11;
-                        f10 = f10 * (1.0F - f11) + f10 * 0.6F * f11;
+                        blue = blue * (1.0F - f11) + blue * 0.7F * f11;
+                        green = green * (1.0F - f11) + green * 0.6F * f11;
+                        red = red * (1.0F - f11) + red * 0.6F * f11;
@@ -942,3 +940,3 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f8 = 0.22F + f3 * 0.75F;
-                        f9 = 0.28F + f6 * 0.75F;
-                        f10 = 0.25F + f7 * 0.75F;
+                        blue = 0.22F + blockBrightnessLookedUp * 0.75F;
+                        green = 0.28F + f6 * 0.75F;
+                        red = 0.25F + f7 * 0.75F;
@@ -949,2 +947,2 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        float f15 = this.getNightVisionBrightness(this.mc.thePlayer, partialTicks);
-                        float f12 = 1.0F / f8;
+                        float nightVisionBrightness = this.getNightVisionBrightness(this.mc.thePlayer, partialTicks);
+                        float oneOverSmallestComponent = 1.0F / blue;
@@ -952 +950 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        if (f12 > 1.0F / f9)
+                        if (oneOverSmallestComponent > 1.0F / green)
@@ -954 +952 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                            f12 = 1.0F / f9;
+                            oneOverSmallestComponent = 1.0F / green;
@@ -957 +955 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        if (f12 > 1.0F / f10)
+                        if (oneOverSmallestComponent > 1.0F / red)
@@ -959 +957 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                            f12 = 1.0F / f10;
+                            oneOverSmallestComponent = 1.0F / red;
@@ -962,3 +960,3 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f8 = f8 * (1.0F - f15) + f8 * f12 * f15;
-                        f9 = f9 * (1.0F - f15) + f9 * f12 * f15;
-                        f10 = f10 * (1.0F - f15) + f10 * f12 * f15;
+                        blue    = blue  * (1.0F - nightVisionBrightness) + blue     * oneOverSmallestComponent * nightVisionBrightness;
+                        green   = green * (1.0F - nightVisionBrightness) + green    * oneOverSmallestComponent * nightVisionBrightness;
+                        red     = red   * (1.0F - nightVisionBrightness) + red      * oneOverSmallestComponent * nightVisionBrightness;
@@ -967 +965 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f8 > 1.0F)
+                    if (blue > 1.0F)
@@ -969 +967 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f8 = 1.0F;
+                        blue = 1.0F;
@@ -972 +970 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f9 > 1.0F)
+                    if (green > 1.0F)
@@ -974 +972 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f9 = 1.0F;
+                        green = 1.0F;
@@ -977 +975 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f10 > 1.0F)
+                    if (red > 1.0F)
@@ -979 +977 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f10 = 1.0F;
+                        red = 1.0F;
@@ -982,15 +980,15 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    float f16 = this.mc.gameSettings.gammaSetting;
-                    float f17 = 1.0F - f8;
-                    float f13 = 1.0F - f9;
-                    float f14 = 1.0F - f10;
-                    f17 = 1.0F - f17 * f17 * f17 * f17;
-                    f13 = 1.0F - f13 * f13 * f13 * f13;
-                    f14 = 1.0F - f14 * f14 * f14 * f14;
-                    f8 = f8 * (1.0F - f16) + f17 * f16;
-                    f9 = f9 * (1.0F - f16) + f13 * f16;
-                    f10 = f10 * (1.0F - f16) + f14 * f16;
-                    f8 = f8 * 0.96F + 0.03F;
-                    f9 = f9 * 0.96F + 0.03F;
-                    f10 = f10 * 0.96F + 0.03F;
-
-                    if (f8 > 1.0F)
+                    float gamma = this.mc.gameSettings.gammaSetting;
+                    float oneMinusBlue  = 1.0F - blue;
+                    float oneMinusGreen = 1.0F - green;
+                    float oneMinusRed    = 1.0F - red;
+                    oneMinusBlue    = 1.0F - oneMinusBlue   * oneMinusBlue  * oneMinusBlue  * oneMinusBlue;
+                    oneMinusGreen   = 1.0F - oneMinusGreen  * oneMinusGreen * oneMinusGreen * oneMinusGreen;
+                    oneMinusRed     = 1.0F - oneMinusRed    * oneMinusRed   * oneMinusRed   * oneMinusRed;
+                    blue    = blue  * (1.0F - gamma)    + oneMinusBlue * gamma;
+                    green   = green * (1.0F - gamma)    + oneMinusGreen * gamma;
+                    red     = red   * (1.0F - gamma)    + oneMinusRed * gamma;
+                    blue    = blue * 0.96F + 0.03F;
+                    green   = green * 0.96F + 0.03F;
+                    red     = red * 0.96F + 0.03F;
+
+                    if (blue > 1.0F)
@@ -998 +996 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f8 = 1.0F;
+                        blue = 1.0F;
@@ -1001 +999 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f9 > 1.0F)
+                    if (green > 1.0F)
@@ -1003 +1001 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f9 = 1.0F;
+                        green = 1.0F;
@@ -1006 +1004 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f10 > 1.0F)
+                    if (red > 1.0F)
@@ -1008 +1006 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f10 = 1.0F;
+                        red = 1.0F;
@@ -1011 +1009 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f8 < 0.0F)
+                    if (blue < 0.0F)
@@ -1013 +1011 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f8 = 0.0F;
+                        blue = 0.0F;
@@ -1016 +1014 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f9 < 0.0F)
+                    if (green < 0.0F)
@@ -1018 +1016 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f9 = 0.0F;
+                        green = 0.0F;
@@ -1021 +1019 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    if (f10 < 0.0F)
+                    if (red < 0.0F)
@@ -1023 +1021 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                        f10 = 0.0F;
+                        red = 0.0F;
@@ -1026,5 +1024,4 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                    int j = 255;
-                    int k = (int)(f8 * 255.0F);
-                    int l = (int)(f9 * 255.0F);
-                    int i1 = (int)(f10 * 255.0F);
-                    this.lightmapColors[i] = -16777216 | k << 16 | l << 8 | i1;
+                    int blueInt = (int)(blue * 255.0F);
+                    int greenInt = (int)(green * 255.0F);
+                    int redInt = (int)(red * 255.0F);
+                    this.lightmapColors[i] = -16777216 | blueInt << 16 | greenInt << 8 | redInt;
@@ -1046 +1043,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
-    public void updateCameraAndRender(float partialTicks, long nanoTime)
+    /**
+     * DO NOT DELETE! This method updates the player's camera. It should probably be somewhere else but all well
+     *
+     * @param partialTicks
+     * @param nanoTime
+     */
+    public void updateCamera(float partialTicks, long nanoTime)
@@ -1048,14 +1051 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        boolean flag = Display.isActive();
-
-        if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
-        {
-            if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
-            {
-                this.mc.displayInGameMenu();
-            }
-        }
-        else
-        {
-            this.prevFrameTime = Minecraft.getSystemTime();
-        }
-
+        boolean flag = NovaNative.INSTANCE.display_is_active();
@@ -1104,105 +1093,0 @@ public class EntityRenderer implements IResourceManagerReloadListener
-
-        if (!this.mc.skipRenderWorld)
-        {
-            anaglyphEnable = this.mc.gameSettings.anaglyph;
-            final ScaledResolution scaledresolution = new ScaledResolution(this.mc);
-            int i1 = scaledresolution.getScaledWidth();
-            int j1 = scaledresolution.getScaledHeight();
-            final int k1 = Mouse.getX() * i1 / this.mc.displayWidth;
-            final int l1 = j1 - Mouse.getY() * j1 / this.mc.displayHeight - 1;
-            int i2 = this.mc.gameSettings.limitFramerate;
-
-            if (this.mc.theWorld != null)
-            {
-                this.mc.mcProfiler.startSection("level");
-                int j = Math.min(Minecraft.getDebugFPS(), i2);
-                j = Math.max(j, 60);
-                long k = System.nanoTime() - nanoTime;
-                long l = Math.max((long)(1000000000 / j / 4) - k, 0L);
-                this.renderWorld(partialTicks, System.nanoTime() + l);
-
-                if (this.mc.isSingleplayer() && this.timeWorldIcon < Minecraft.getSystemTime() - 1000L)
-                {
-                    this.timeWorldIcon = Minecraft.getSystemTime();
-
-                    if (!this.mc.getIntegratedServer().isWorldIconSet())
-                    {
-                        this.createWorldIcon();
-                    }
-                }
-
-                if (OpenGlHelper.shadersSupported)
-                {
-                    this.mc.renderGlobal.renderEntityOutlineFramebuffer();
-
-                    if (this.theShaderGroup != null && this.useShader)
-                    {
-                        GlStateManager.matrixMode(5890);
-                        GlStateManager.pushMatrix();
-                        GlStateManager.loadIdentity();
-                        this.theShaderGroup.loadShaderGroup(partialTicks);
-                        GlStateManager.popMatrix();
-                    }
-
-                    this.mc.getFramebuffer().bindFramebuffer(true);
-                }
-
-                this.renderEndNanoTime = System.nanoTime();
-                this.mc.mcProfiler.endStartSection("gui");
-
-                if (!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null)
-                {
-                    GlStateManager.alphaFunc(516, 0.1F);
-                    this.mc.ingameGUI.renderGameOverlay(partialTicks);
-                }
-
-                this.mc.mcProfiler.endSection();
-            }
-            else
-            {
-                GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-                GlStateManager.matrixMode(5889);
-                GlStateManager.loadIdentity();
-                GlStateManager.matrixMode(5888);
-                GlStateManager.loadIdentity();
-                this.setupOverlayRendering();
-                this.renderEndNanoTime = System.nanoTime();
-            }
-
-            if (this.mc.currentScreen != null)
-            {
-                GlStateManager.clear(256);
-
-                try
-                {
-                    this.mc.currentScreen.drawScreen(k1, l1, partialTicks);
-                }
-                catch (Throwable throwable)
-                {
-                    CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
-                    CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
-                    crashreportcategory.func_189529_a("Screen name", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
-                            return EntityRenderer.this.mc.currentScreen.getClass().getCanonicalName();
-                        }
-                    });
-                    crashreportcategory.func_189529_a("Mouse location", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
-                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[] {Integer.valueOf(k1), Integer.valueOf(l1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
-                        }
-                    });
-                    crashreportcategory.func_189529_a("Screen size", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
-                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[] {Integer.valueOf(scaledresolution.getScaledWidth()), Integer.valueOf(scaledresolution.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(scaledresolution.getScaleFactor())});
-                        }
-                    });
-                    throw new ReportedException(crashreport);
-                }
-            }
-        }
@@ -1367 +1252 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -1385 +1270 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
+        this.mc.getRenderEngine().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
@@ -1387 +1272 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
+        this.mc.getRenderEngine().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
@@ -1423 +1308 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
+        this.mc.getRenderEngine().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
@@ -1425 +1310 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
+        this.mc.getRenderEngine().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
@@ -1453 +1338 @@ public class EntityRenderer implements IResourceManagerReloadListener
-        this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -1670 +1555 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                                    this.mc.getTextureManager().bindTexture(RAIN_TEXTURES);
+                                    this.mc.getRenderEngine().bindTexture(RAIN_TEXTURES);
@@ -1698 +1583 @@ public class EntityRenderer implements IResourceManagerReloadListener
-                                    this.mc.getTextureManager().bindTexture(SNOW_TEXTURES);
+                                    this.mc.getRenderEngine().bindTexture(SNOW_TEXTURES);
@@ -2087,0 +1973,20 @@ public class EntityRenderer implements IResourceManagerReloadListener
+
+    public float getFogColorRed() {
+        return fogColorRed;
+    }
+
+    public float getFogColorGreen() {
+        return fogColorRed;
+    }
+
+    public float getFogColorBlue() {
+        return fogColorBlue;
+    }
+
+    public boolean isLightmapUpdateNeeded() {
+        return lightmapUpdateNeeded;
+    }
+
+    public DynamicTexture getLightmapTexture() {
+        return lightmapTexture;
+    }
diff --git a/minecraft/client/renderer/GlStateManager.java b/minecraft/client/renderer/GlStateManager.java
index b3d40a0..9fe6dc9 100644
--- a/minecraft/client/renderer/GlStateManager.java
+++ b/minecraft/client/renderer/GlStateManager.java
@@ -3,4 +2,0 @@ package net.minecraft.client.renderer;
-import java.nio.ByteBuffer;
-import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
-import javax.annotation.Nullable;
@@ -9,4 +4,0 @@ import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL12;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GLContext;
@@ -14,0 +7,5 @@ import org.lwjgl.util.vector.Quaternion;
+import javax.annotation.Nullable;
+import java.nio.ByteBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
@@ -42 +39 @@ public class GlStateManager
-        GL11.glPushAttrib(8256);
+        //GL11.glPushAttrib(8256);
@@ -47 +44 @@ public class GlStateManager
-        GL11.glPopAttrib();
+        //GL11.glPopAttrib();
@@ -66 +63 @@ public class GlStateManager
-            GL11.glAlphaFunc(func, ref);
+            //GL11.glAlphaFunc(func, ref);
@@ -106 +103 @@ public class GlStateManager
-            GL11.glColorMaterial(face, mode);
+            //GL11.glColorMaterial(face, mode);
@@ -112 +109 @@ public class GlStateManager
-        GL11.glLight(light, pname, params);
+        //GL11.glLight(light, pname, params);
@@ -117 +114 @@ public class GlStateManager
-        GL11.glLightModel(pname, params);
+        //GL11.glLightModel(pname, params);
@@ -122 +119 @@ public class GlStateManager
-        GL11.glNormal3f(nx, ny, nz);
+        //GL11.glNormal3f(nx, ny, nz);
@@ -140 +137 @@ public class GlStateManager
-            GL11.glDepthFunc(depthFunc);
+            //GL11.glDepthFunc(depthFunc);
@@ -149 +146 @@ public class GlStateManager
-            GL11.glDepthMask(flagIn);
+            //GL11.glDepthMask(flagIn);
@@ -174 +171 @@ public class GlStateManager
-            GL11.glBlendFunc(srcFactor, dstFactor);
+            //GL11.glBlendFunc(srcFactor, dstFactor);
@@ -197 +194 @@ public class GlStateManager
-        GL14.glBlendEquation(blendEquation);
+        //GL14.glBlendEquation(blendEquation);
@@ -202 +199 @@ public class GlStateManager
-        BUF_FLOAT_4.put(0, (float)(p_187431_0_ >> 16 & 255) / 255.0F);
+        /*BUF_FLOAT_4.put(0, (float)(p_187431_0_ >> 16 & 255) / 255.0F);
@@ -213 +210 @@ public class GlStateManager
-        glTexEnvi(8960, 34200, 770);
+        glTexEnvi(8960, 34200, 770);*/
@@ -218 +215 @@ public class GlStateManager
-        glTexEnvi(8960, 8704, 8448);
+        /*glTexEnvi(8960, 8704, 8448);
@@ -224 +221 @@ public class GlStateManager
-        glTexEnvi(8960, 34200, 770);
+        glTexEnvi(8960, 34200, 770);*/
@@ -247 +244 @@ public class GlStateManager
-            GL11.glFogi(GL11.GL_FOG_MODE, param);
+            //GL11.glFogi(GL11.GL_FOG_MODE, param);
@@ -256 +253 @@ public class GlStateManager
-            GL11.glFogf(GL11.GL_FOG_DENSITY, param);
+            //GL11.glFogf(GL11.GL_FOG_DENSITY, param);
@@ -265 +262 @@ public class GlStateManager
-            GL11.glFogf(GL11.GL_FOG_START, param);
+            //GL11.glFogf(GL11.GL_FOG_START, param);
@@ -274 +271 @@ public class GlStateManager
-            GL11.glFogf(GL11.GL_FOG_END, param);
+            //GL11.glFogf(GL11.GL_FOG_END, param);
@@ -280 +277 @@ public class GlStateManager
-        GL11.glFog(pname, param);
+        //GL11.glFog(pname, param);
@@ -285 +282 @@ public class GlStateManager
-        GL11.glFogi(pname, param);
+        //GL11.glFogi(pname, param);
@@ -308 +305 @@ public class GlStateManager
-            GL11.glCullFace(mode);
+            //GL11.glCullFace(mode);
@@ -314 +311 @@ public class GlStateManager
-        GL11.glPolygonMode(face, mode);
+        //GL11.glPolygonMode(face, mode);
@@ -333 +330 @@ public class GlStateManager
-            GL11.glPolygonOffset(factor, units);
+            //GL11.glPolygonOffset(factor, units);
@@ -357 +354 @@ public class GlStateManager
-            GL11.glLogicOp(opcode);
+            //GL11.glLogicOp(opcode);
@@ -378 +375 @@ public class GlStateManager
-            GL11.glTexGeni(glstatemanager$texgencoord.coord, GL11.GL_TEXTURE_GEN_MODE, param);
+            //GL11.glTexGeni(glstatemanager$texgencoord.coord, GL11.GL_TEXTURE_GEN_MODE, param);
@@ -384 +381 @@ public class GlStateManager
-        GL11.glTexGen(texGenCoord(texGen).coord, pname, params);
+        //GL11.glTexGen(texGenCoord(texGen).coord, pname, params);
@@ -429 +426 @@ public class GlStateManager
-        GL11.glTexEnv(p_187448_0_, p_187448_1_, p_187448_2_);
+        //GL11.glTexEnv(p_187448_0_, p_187448_1_, p_187448_2_);
@@ -434 +431 @@ public class GlStateManager
-        GL11.glTexEnvi(p_187399_0_, p_187399_1_, p_187399_2_);
+        //GL11.glTexEnvi(p_187399_0_, p_187399_1_, p_187399_2_);
@@ -439 +436 @@ public class GlStateManager
-        GL11.glTexEnvf(p_187436_0_, p_187436_1_, p_187436_2_);
+        //GL11.glTexEnvf(p_187436_0_, p_187436_1_, p_187436_2_);
@@ -444 +441 @@ public class GlStateManager
-        GL11.glTexParameterf(p_187403_0_, p_187403_1_, p_187403_2_);
+        //GL11.glTexParameterf(p_187403_0_, p_187403_1_, p_187403_2_);
@@ -449 +446 @@ public class GlStateManager
-        GL11.glTexParameteri(p_187421_0_, p_187421_1_, p_187421_2_);
+        //GL11.glTexParameteri(p_187421_0_, p_187421_1_, p_187421_2_);
@@ -454 +451 @@ public class GlStateManager
-        return GL11.glGetTexLevelParameteri(p_187411_0_, p_187411_1_, p_187411_2_);
+        return 0;//GL11.glGetTexLevelParameteri(p_187411_0_, p_187411_1_, p_187411_2_);
@@ -464 +461 @@ public class GlStateManager
-        GL11.glDeleteTextures(texture);
+        //GL11.glDeleteTextures(texture);
@@ -480 +477 @@ public class GlStateManager
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
+            //GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
@@ -486 +483 @@ public class GlStateManager
-        GL11.glTexImage2D(p_187419_0_, p_187419_1_, p_187419_2_, p_187419_3_, p_187419_4_, p_187419_5_, p_187419_6_, p_187419_7_, p_187419_8_);
+        //GL11.glTexImage2D(p_187419_0_, p_187419_1_, p_187419_2_, p_187419_3_, p_187419_4_, p_187419_5_, p_187419_6_, p_187419_7_, p_187419_8_);
@@ -489 +486 @@ public class GlStateManager
-    public static void glTexSubImage2D(int p_187414_0_, int p_187414_1_, int p_187414_2_, int p_187414_3_, int p_187414_4_, int p_187414_5_, int p_187414_6_, int p_187414_7_, IntBuffer p_187414_8_)
+    public static void glTexSubImage2D(int target, int level, int xoffset, int yOffset, int width, int height, int format, int type, IntBuffer data)
@@ -491 +488 @@ public class GlStateManager
-        GL11.glTexSubImage2D(p_187414_0_, p_187414_1_, p_187414_2_, p_187414_3_, p_187414_4_, p_187414_5_, p_187414_6_, p_187414_7_, p_187414_8_);
+        // GL11.glTexSubImage2D(target, level, xoffset, yOffset, width, height, format, type, data);
@@ -496 +493 @@ public class GlStateManager
-        GL11.glCopyTexSubImage2D(p_187443_0_, p_187443_1_, p_187443_2_, p_187443_3_, p_187443_4_, p_187443_5_, p_187443_6_, p_187443_7_);
+        //GL11.glCopyTexSubImage2D(p_187443_0_, p_187443_1_, p_187443_2_, p_187443_3_, p_187443_4_, p_187443_5_, p_187443_6_, p_187443_7_);
@@ -501 +498 @@ public class GlStateManager
-        GL11.glGetTexImage(p_187433_0_, p_187433_1_, p_187433_2_, p_187433_3_, p_187433_4_);
+        //GL11.glGetTexImage(p_187433_0_, p_187433_1_, p_187433_2_, p_187433_3_, p_187433_4_);
@@ -519 +516 @@ public class GlStateManager
-            GL11.glShadeModel(mode);
+            //GL11.glShadeModel(mode);
@@ -535 +532 @@ public class GlStateManager
-        GL11.glViewport(x, y, width, height);
+        //GL11.glViewport(x, y, width, height);
@@ -546 +543 @@ public class GlStateManager
-            GL11.glColorMask(red, green, blue, alpha);
+            //GL11.glColorMask(red, green, blue, alpha);
@@ -555 +552 @@ public class GlStateManager
-            GL11.glClearDepth(depth);
+            //GL11.glClearDepth(depth);
@@ -567 +564 @@ public class GlStateManager
-            GL11.glClearColor(red, green, blue, alpha);
+            //GL11.glClearColor(red, green, blue, alpha);
@@ -573 +570 @@ public class GlStateManager
-        GL11.glClear(mask);
+        //GL11.glClear(mask);
@@ -578 +575 @@ public class GlStateManager
-        GL11.glMatrixMode(mode);
+        //GL11.glMatrixMode(mode);
@@ -583 +580 @@ public class GlStateManager
-        GL11.glLoadIdentity();
+        //GL11.glLoadIdentity();
@@ -588 +585 @@ public class GlStateManager
-        GL11.glPushMatrix();
+       //GL11.glPushMatrix();
@@ -593 +590 @@ public class GlStateManager
-        GL11.glPopMatrix();
+        //GL11.glPopMatrix();
@@ -598 +595 @@ public class GlStateManager
-        GL11.glGetFloat(pname, params);
+        //GL11.glGetFloat(pname, params);
@@ -603 +600 @@ public class GlStateManager
-        GL11.glOrtho(left, right, bottom, top, zNear, zFar);
+        //GL11.glOrtho(left, right, bottom, top, zNear, zFar);
@@ -608 +605 @@ public class GlStateManager
-        GL11.glRotatef(angle, x, y, z);
+        //GL11.glRotatef(angle, x, y, z);
@@ -611,3 +608 @@ public class GlStateManager
-    public static void scale(float x, float y, float z)
-    {
-        GL11.glScalef(x, y, z);
+    public static void scale(float x, float y, float z){//GL11.glScalef(x, y, z);
@@ -618 +613 @@ public class GlStateManager
-        GL11.glScaled(x, y, z);
+        //GL11.glScaled(x, y, z);
@@ -623 +618 @@ public class GlStateManager
-        GL11.glTranslatef(x, y, z);
+        //GL11.glTranslatef(x, y, z);
@@ -628 +623 @@ public class GlStateManager
-        GL11.glTranslated(x, y, z);
+        //GL11.glTranslated(x, y, z);
@@ -633 +628 @@ public class GlStateManager
-        GL11.glMultMatrix(matrix);
+        //GL11.glMultMatrix(matrix);
@@ -681 +676 @@ public class GlStateManager
-            GL11.glColor4f(colorRed, colorGreen, colorBlue, colorAlpha);
+            //GL11.glColor4f(colorRed, colorGreen, colorBlue, colorAlpha);
@@ -692 +687 @@ public class GlStateManager
-        GL11.glTexCoord2f(p_187426_0_, p_187426_1_);
+        //GL11.glTexCoord2f(p_187426_0_, p_187426_1_);
@@ -697 +692 @@ public class GlStateManager
-        GL11.glVertex3f(p_187435_0_, p_187435_1_, p_187435_2_);
+        //GL11.glVertex3f(p_187435_0_, p_187435_1_, p_187435_2_);
@@ -710 +705 @@ public class GlStateManager
-        GL11.glNormalPointer(p_187446_0_, p_187446_1_, p_187446_2_);
+        //GL11.glNormalPointer(p_187446_0_, p_187446_1_, p_187446_2_);
@@ -715 +710 @@ public class GlStateManager
-        GL11.glTexCoordPointer(p_187405_0_, p_187405_1_, p_187405_2_, (long)p_187405_3_);
+        //GL11.glTexCoordPointer(p_187405_0_, p_187405_1_, p_187405_2_, (long)p_187405_3_);
@@ -720 +715 @@ public class GlStateManager
-        GL11.glTexCoordPointer(p_187404_0_, p_187404_1_, p_187404_2_, p_187404_3_);
+        //GL11.glTexCoordPointer(p_187404_0_, p_187404_1_, p_187404_2_, p_187404_3_);
@@ -725 +720 @@ public class GlStateManager
-        GL11.glVertexPointer(p_187420_0_, p_187420_1_, p_187420_2_, (long)p_187420_3_);
+        //GL11.glVertexPointer(p_187420_0_, p_187420_1_, p_187420_2_, (long)p_187420_3_);
@@ -730 +725 @@ public class GlStateManager
-        GL11.glVertexPointer(p_187427_0_, p_187427_1_, p_187427_2_, p_187427_3_);
+        //GL11.glVertexPointer(p_187427_0_, p_187427_1_, p_187427_2_, p_187427_3_);
@@ -735 +730 @@ public class GlStateManager
-        GL11.glColorPointer(p_187406_0_, p_187406_1_, p_187406_2_, (long)p_187406_3_);
+        //GL11.glColorPointer(p_187406_0_, p_187406_1_, p_187406_2_, (long)p_187406_3_);
@@ -740 +735 @@ public class GlStateManager
-        GL11.glColorPointer(p_187400_0_, p_187400_1_, p_187400_2_, p_187400_3_);
+        //GL11.glColorPointer(p_187400_0_, p_187400_1_, p_187400_2_, p_187400_3_);
@@ -745 +740 @@ public class GlStateManager
-        GL11.glDisableClientState(p_187429_0_);
+        //GL11.glDisableClientState(p_187429_0_);
@@ -750 +745 @@ public class GlStateManager
-        GL11.glEnableClientState(p_187410_0_);
+        //GL11.glEnableClientState(p_187410_0_);
@@ -755 +750 @@ public class GlStateManager
-        GL11.glBegin(p_187447_0_);
+        //GL11.glBegin(p_187447_0_);
@@ -760 +755 @@ public class GlStateManager
-        GL11.glEnd();
+        //GL11.glEnd();
@@ -765 +760 @@ public class GlStateManager
-        GL11.glDrawArrays(p_187439_0_, p_187439_1_, p_187439_2_);
+        //GL11.glDrawArrays(p_187439_0_, p_187439_1_, p_187439_2_);
@@ -770 +765 @@ public class GlStateManager
-        GL11.glLineWidth(p_187441_0_);
+        //GL11.glLineWidth(p_187441_0_);
@@ -775 +770 @@ public class GlStateManager
-        GL11.glCallList(list);
+        //GL11.glCallList(list);
@@ -780 +775 @@ public class GlStateManager
-        GL11.glDeleteLists(p_187449_0_, p_187449_1_);
+        //GL11.glDeleteLists(p_187449_0_, p_187449_1_);
@@ -785 +780 @@ public class GlStateManager
-        GL11.glNewList(p_187423_0_, p_187423_1_);
+        //GL11.glNewList(p_187423_0_, p_187423_1_);
@@ -790 +785 @@ public class GlStateManager
-        GL11.glEndList();
+        //GL11.glEndList();
@@ -795 +790 @@ public class GlStateManager
-        return GL11.glGenLists(p_187442_0_);
+        return 1;//GL11.glGenLists(p_187442_0_);
@@ -800 +795 @@ public class GlStateManager
-        GL11.glPixelStorei(p_187425_0_, p_187425_1_);
+        //GL11.glPixelStorei(p_187425_0_, p_187425_1_);
@@ -805 +800 @@ public class GlStateManager
-        GL11.glReadPixels(p_187413_0_, p_187413_1_, p_187413_2_, p_187413_3_, p_187413_4_, p_187413_5_, p_187413_6_);
+        //GL11.glReadPixels(p_187413_0_, p_187413_1_, p_187413_2_, p_187413_3_, p_187413_4_, p_187413_5_, p_187413_6_);
@@ -810 +805 @@ public class GlStateManager
-        return GL11.glGetError();
+        return 0;//GL11.glGetError();
@@ -815 +810 @@ public class GlStateManager
-        return GL11.glGetString(p_187416_0_);
+        return "";//GL11.glGetString(p_187416_0_);
@@ -820 +815 @@ public class GlStateManager
-        GL11.glGetInteger(p_187445_0_, p_187445_1_);
+        //GL11.glGetInteger(p_187445_0_, p_187445_1_);
@@ -825 +820 @@ public class GlStateManager
-        return GL11.glGetInteger(p_187397_0_);
+        return 0;//GL11.glGetInteger(p_187397_0_);
@@ -929 +924 @@ public class GlStateManager
-                    GL11.glEnable(this.capability);
+                    //GL11.glEnable(this.capability);
@@ -933 +928 @@ public class GlStateManager
-                    GL11.glDisable(this.capability);
+                    //GL11.glDisable(this.capability);
@@ -1160 +1155 @@ public class GlStateManager
-                GlStateManager.disableAlpha();
+                /*GlStateManager.disableAlpha();
@@ -1258 +1253 @@ public class GlStateManager
-                GL11.glPolygonMode(GL11.GL_BACK, GL11.GL_FILL);
+                GL11.glPolygonMode(GL11.GL_BACK, GL11.GL_FILL);*/
@@ -1268,2 +1263,2 @@ public class GlStateManager
-                GlStateManager.enableBlend();
-                GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
+                //GlStateManager.enableBlend();
+                //GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
@@ -1280 +1275 @@ public class GlStateManager
-                GlStateManager.color(1.0F, 1.0F, 1.0F, 0.15F);
+                /*GlStateManager.color(1.0F, 1.0F, 1.0F, 0.15F);
@@ -1284 +1279 @@ public class GlStateManager
-                GlStateManager.alphaFunc(516, 0.003921569F);
+                GlStateManager.alphaFunc(516, 0.003921569F);*/
@@ -1289,3 +1284,3 @@ public class GlStateManager
-                GlStateManager.disableBlend();
-                GlStateManager.alphaFunc(516, 0.1F);
-                GlStateManager.depthMask(true);
+                //GlStateManager.disableBlend();
+               // GlStateManager.alphaFunc(516, 0.1F);
+                //GlStateManager.depthMask(true);
diff --git a/minecraft/client/renderer/InventoryEffectRenderer.java b/minecraft/client/renderer/InventoryEffectRenderer.java
index 7dec087..1970f13 100644
--- a/minecraft/client/renderer/InventoryEffectRenderer.java
+++ b/minecraft/client/renderer/InventoryEffectRenderer.java
@@ -83 +83 @@ public abstract class InventoryEffectRenderer extends GuiContainer
-                this.mc.getTextureManager().bindTexture(INVENTORY_BACKGROUND);
+                this.mc.getRenderEngine().bindTexture(INVENTORY_BACKGROUND);
diff --git a/minecraft/client/renderer/ItemRenderer.java b/minecraft/client/renderer/ItemRenderer.java
index 2619f50..fde53a4 100644
--- a/minecraft/client/renderer/ItemRenderer.java
+++ b/minecraft/client/renderer/ItemRenderer.java
@@ -150 +150 @@ public class ItemRenderer
-        this.mc.getTextureManager().bindTexture(this.mc.thePlayer.getLocationSkin());
+        this.mc.getRenderEngine().bindTexture(this.mc.thePlayer.getLocationSkin());
@@ -221 +221 @@ public class ItemRenderer
-        this.mc.getTextureManager().bindTexture(RES_MAP_BACKGROUND);
+        this.mc.getRenderEngine().bindTexture(RES_MAP_BACKGROUND);
@@ -257 +257 @@ public class ItemRenderer
-        this.mc.getTextureManager().bindTexture(abstractclientplayer.getLocationSkin());
+        this.mc.getRenderEngine().bindTexture(abstractclientplayer.getLocationSkin());
@@ -508 +508 @@ public class ItemRenderer
-        this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+        this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -539 +539 @@ public class ItemRenderer
-        this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
+        this.mc.getRenderEngine().bindTexture(RES_UNDERWATER_OVERLAY);
@@ -584 +584 @@ public class ItemRenderer
-            this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+            this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
diff --git a/minecraft/client/renderer/OpenGlHelper.java b/minecraft/client/renderer/OpenGlHelper.java
index a2f6de3..1c5bc41 100644
--- a/minecraft/client/renderer/OpenGlHelper.java
+++ b/minecraft/client/renderer/OpenGlHelper.java
@@ -16,15 +15,0 @@ import org.lwjgl.Sys;
-import org.lwjgl.opengl.ARBFramebufferObject;
-import org.lwjgl.opengl.ARBMultitexture;
-import org.lwjgl.opengl.ARBShaderObjects;
-import org.lwjgl.opengl.ARBVertexBufferObject;
-import org.lwjgl.opengl.ARBVertexShader;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.EXTBlendFuncSeparate;
-import org.lwjgl.opengl.EXTFramebufferObject;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL13;
-import org.lwjgl.opengl.GL14;
-import org.lwjgl.opengl.GL15;
-import org.lwjgl.opengl.GL20;
-import org.lwjgl.opengl.GL30;
-import org.lwjgl.opengl.GLContext;
@@ -108,3 +92,0 @@ public class OpenGlHelper
-        ContextCapabilities contextcapabilities = GLContext.getCapabilities();
-        arbMultitexture = contextcapabilities.GL_ARB_multitexture && !contextcapabilities.OpenGL13;
-        arbTextureEnvCombine = contextcapabilities.GL_ARB_texture_env_combine && !contextcapabilities.OpenGL13;
@@ -174,3 +155,0 @@ public class OpenGlHelper
-        extBlendFuncSeparate = contextcapabilities.GL_EXT_blend_func_separate && !contextcapabilities.OpenGL14;
-        openGL14 = contextcapabilities.OpenGL14 || contextcapabilities.GL_EXT_blend_func_separate;
-        framebufferSupported = openGL14 && (contextcapabilities.GL_ARB_framebuffer_object || contextcapabilities.GL_EXT_framebuffer_object || contextcapabilities.OpenGL30);
@@ -178,114 +156,0 @@ public class OpenGlHelper
-        if (framebufferSupported)
-        {
-            logText = logText + "Using framebuffer objects because ";
-
-            if (contextcapabilities.OpenGL30)
-            {
-                logText = logText + "OpenGL 3.0 is supported and separate blending is supported.\n";
-                framebufferType = OpenGlHelper.FboMode.BASE;
-                GL_FRAMEBUFFER = 36160;
-                GL_RENDERBUFFER = 36161;
-                GL_COLOR_ATTACHMENT0 = 36064;
-                GL_DEPTH_ATTACHMENT = 36096;
-                GL_FRAMEBUFFER_COMPLETE = 36053;
-                GL_FB_INCOMPLETE_ATTACHMENT = 36054;
-                GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
-                GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
-                GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-            else if (contextcapabilities.GL_ARB_framebuffer_object)
-            {
-                logText = logText + "ARB_framebuffer_object is supported and separate blending is supported.\n";
-                framebufferType = OpenGlHelper.FboMode.ARB;
-                GL_FRAMEBUFFER = 36160;
-                GL_RENDERBUFFER = 36161;
-                GL_COLOR_ATTACHMENT0 = 36064;
-                GL_DEPTH_ATTACHMENT = 36096;
-                GL_FRAMEBUFFER_COMPLETE = 36053;
-                GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
-                GL_FB_INCOMPLETE_ATTACHMENT = 36054;
-                GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
-                GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-            else if (contextcapabilities.GL_EXT_framebuffer_object)
-            {
-                logText = logText + "EXT_framebuffer_object is supported.\n";
-                framebufferType = OpenGlHelper.FboMode.EXT;
-                GL_FRAMEBUFFER = 36160;
-                GL_RENDERBUFFER = 36161;
-                GL_COLOR_ATTACHMENT0 = 36064;
-                GL_DEPTH_ATTACHMENT = 36096;
-                GL_FRAMEBUFFER_COMPLETE = 36053;
-                GL_FB_INCOMPLETE_MISS_ATTACH = 36055;
-                GL_FB_INCOMPLETE_ATTACHMENT = 36054;
-                GL_FB_INCOMPLETE_DRAW_BUFFER = 36059;
-                GL_FB_INCOMPLETE_READ_BUFFER = 36060;
-            }
-        }
-        else
-        {
-            logText = logText + "Not using framebuffer objects because ";
-            logText = logText + "OpenGL 1.4 is " + (contextcapabilities.OpenGL14 ? "" : "not ") + "supported, ";
-            logText = logText + "EXT_blend_func_separate is " + (contextcapabilities.GL_EXT_blend_func_separate ? "" : "not ") + "supported, ";
-            logText = logText + "OpenGL 3.0 is " + (contextcapabilities.OpenGL30 ? "" : "not ") + "supported, ";
-            logText = logText + "ARB_framebuffer_object is " + (contextcapabilities.GL_ARB_framebuffer_object ? "" : "not ") + "supported, and ";
-            logText = logText + "EXT_framebuffer_object is " + (contextcapabilities.GL_EXT_framebuffer_object ? "" : "not ") + "supported.\n";
-        }
-
-        openGL21 = contextcapabilities.OpenGL21;
-        shadersAvailable = openGL21 || contextcapabilities.GL_ARB_vertex_shader && contextcapabilities.GL_ARB_fragment_shader && contextcapabilities.GL_ARB_shader_objects;
-        logText = logText + "Shaders are " + (shadersAvailable ? "" : "not ") + "available because ";
-
-        if (shadersAvailable)
-        {
-            if (contextcapabilities.OpenGL21)
-            {
-                logText = logText + "OpenGL 2.1 is supported.\n";
-                arbShaders = false;
-                GL_LINK_STATUS = 35714;
-                GL_COMPILE_STATUS = 35713;
-                GL_VERTEX_SHADER = 35633;
-                GL_FRAGMENT_SHADER = 35632;
-            }
-            else
-            {
-                logText = logText + "ARB_shader_objects, ARB_vertex_shader, and ARB_fragment_shader are supported.\n";
-                arbShaders = true;
-                GL_LINK_STATUS = 35714;
-                GL_COMPILE_STATUS = 35713;
-                GL_VERTEX_SHADER = 35633;
-                GL_FRAGMENT_SHADER = 35632;
-            }
-        }
-        else
-        {
-            logText = logText + "OpenGL 2.1 is " + (contextcapabilities.OpenGL21 ? "" : "not ") + "supported, ";
-            logText = logText + "ARB_shader_objects is " + (contextcapabilities.GL_ARB_shader_objects ? "" : "not ") + "supported, ";
-            logText = logText + "ARB_vertex_shader is " + (contextcapabilities.GL_ARB_vertex_shader ? "" : "not ") + "supported, and ";
-            logText = logText + "ARB_fragment_shader is " + (contextcapabilities.GL_ARB_fragment_shader ? "" : "not ") + "supported.\n";
-        }
-
-        shadersSupported = framebufferSupported && shadersAvailable;
-        String s = GL11.glGetString(GL11.GL_VENDOR).toLowerCase();
-        nvidia = s.contains("nvidia");
-        arbVbo = !contextcapabilities.OpenGL15 && contextcapabilities.GL_ARB_vertex_buffer_object;
-        vboSupported = contextcapabilities.OpenGL15 || arbVbo;
-        logText = logText + "VBOs are " + (vboSupported ? "" : "not ") + "available because ";
-
-        if (vboSupported)
-        {
-            if (arbVbo)
-            {
-                logText = logText + "ARB_vertex_buffer_object is supported.\n";
-                GL_STATIC_DRAW = 35044;
-                GL_ARRAY_BUFFER = 34962;
-            }
-            else
-            {
-                logText = logText + "OpenGL 1.5 is supported.\n";
-                GL_STATIC_DRAW = 35044;
-                GL_ARRAY_BUFFER = 34962;
-            }
-        }
-
-        ati = s.contains("ati");
@@ -328 +193 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(program, pname) : GL20.glGetProgrami(program, pname);
+        return 0;//arbShaders ? ;//ARBShaderObjects.glGetObjectParameteriARB(program, pname) : GL20.glGetProgrami(program, pname);
@@ -333,8 +198 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glAttachObjectARB(program, shaderIn);
-        }
-        else
-        {
-            GL20.glAttachShader(program, shaderIn);
-        }
+
@@ -345,8 +203 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glDeleteObjectARB(shaderIn);
-        }
-        else
-        {
-            GL20.glDeleteShader(shaderIn);
-        }
+
@@ -360 +211 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glCreateShaderObjectARB(type) : GL20.glCreateShader(type);
+        return 0;// ? ARBShaderObjects.glCreateShaderObjectARB(type) : GL20.glCreateShader(type);
@@ -365,8 +216 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glShaderSourceARB(shaderIn, string);
-        }
-        else
-        {
-            GL20.glShaderSource(shaderIn, string);
-        }
+
@@ -377,8 +221 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glCompileShaderARB(shaderIn);
-        }
-        else
-        {
-            GL20.glCompileShader(shaderIn);
-        }
+
@@ -389 +226 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(shaderIn, pname) : GL20.glGetShaderi(shaderIn, pname);
+        return 0;//arbShaders ? ARBShaderObjects.glGetObjectParameteriARB(shaderIn, pname) : GL20.glGetShaderi(shaderIn, pname);
@@ -394 +231 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glGetInfoLogARB(shaderIn, maxLength) : GL20.glGetShaderInfoLog(shaderIn, maxLength);
+        return "";//arbShaders ? ARBShaderObjects.glGetInfoLogARB(shaderIn, maxLength) : GL20.glGetShaderInfoLog(shaderIn, maxLength);
@@ -399 +236 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glGetInfoLogARB(program, maxLength) : GL20.glGetProgramInfoLog(program, maxLength);
+        return "";//arbShaders ? ARBShaderObjects.glGetInfoLogARB(program, maxLength) : GL20.glGetProgramInfoLog(program, maxLength);
@@ -404,8 +241 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUseProgramObjectARB(program);
-        }
-        else
-        {
-            GL20.glUseProgram(program);
-        }
+
@@ -416 +246 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glCreateProgramObjectARB() : GL20.glCreateProgram();
+        return 0;//arbShaders ? ARBShaderObjects.glCreateProgramObjectARB() : GL20.glCreateProgram();
@@ -421,8 +251 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glDeleteObjectARB(program);
-        }
-        else
-        {
-            GL20.glDeleteProgram(program);
-        }
+
@@ -433,8 +256 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glLinkProgramARB(program);
-        }
-        else
-        {
-            GL20.glLinkProgram(program);
-        }
+
@@ -445 +261 @@ public class OpenGlHelper
-        return arbShaders ? ARBShaderObjects.glGetUniformLocationARB(programObj, name) : GL20.glGetUniformLocation(programObj, name);
+        return 0;//arbShaders ? ARBShaderObjects.glGetUniformLocationARB(programObj, name) : GL20.glGetUniformLocation(programObj, name);
@@ -450,8 +266 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform1ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform1(location, values);
-        }
+
@@ -462,8 +271 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform1iARB(location, v0);
-        }
-        else
-        {
-            GL20.glUniform1i(location, v0);
-        }
+
@@ -474,8 +276 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform1ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform1(location, values);
-        }
+
@@ -486,8 +281 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform2ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform2(location, values);
-        }
+
@@ -498,8 +286 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform2ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform2(location, values);
-        }
+
@@ -510,8 +291 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform3ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform3(location, values);
-        }
+
@@ -522,8 +296 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform3ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform3(location, values);
-        }
+
@@ -534,8 +301 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform4ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform4(location, values);
-        }
+
@@ -546,8 +306 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniform4ARB(location, values);
-        }
-        else
-        {
-            GL20.glUniform4(location, values);
-        }
+
@@ -558,8 +311 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniformMatrix2ARB(location, transpose, matrices);
-        }
-        else
-        {
-            GL20.glUniformMatrix2(location, transpose, matrices);
-        }
+
@@ -570,8 +316 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniformMatrix3ARB(location, transpose, matrices);
-        }
-        else
-        {
-            GL20.glUniformMatrix3(location, transpose, matrices);
-        }
+
@@ -582,8 +321 @@ public class OpenGlHelper
-        if (arbShaders)
-        {
-            ARBShaderObjects.glUniformMatrix4ARB(location, transpose, matrices);
-        }
-        else
-        {
-            GL20.glUniformMatrix4(location, transpose, matrices);
-        }
+
@@ -594 +326 @@ public class OpenGlHelper
-        return arbShaders ? ARBVertexShader.glGetAttribLocationARB(program, name) : GL20.glGetAttribLocation(program, name);
+        return 0;//arbShaders ? ARBVertexShader.glGetAttribLocationARB(program, name) : GL20.glGetAttribLocation(program, name);
@@ -599 +331 @@ public class OpenGlHelper
-        return arbVbo ? ARBVertexBufferObject.glGenBuffersARB() : GL15.glGenBuffers();
+        return 0;//arbVbo ? ARBVertexBufferObject.glGenBuffersARB() : GL15.glGenBuffers();
@@ -604,8 +336 @@ public class OpenGlHelper
-        if (arbVbo)
-        {
-            ARBVertexBufferObject.glBindBufferARB(target, buffer);
-        }
-        else
-        {
-            GL15.glBindBuffer(target, buffer);
-        }
+
@@ -616,8 +341 @@ public class OpenGlHelper
-        if (arbVbo)
-        {
-            ARBVertexBufferObject.glBufferDataARB(target, data, usage);
-        }
-        else
-        {
-            GL15.glBufferData(target, data, usage);
-        }
+
@@ -628,8 +346 @@ public class OpenGlHelper
-        if (arbVbo)
-        {
-            ARBVertexBufferObject.glDeleteBuffersARB(buffer);
-        }
-        else
-        {
-            GL15.glDeleteBuffers(buffer);
-        }
+
@@ -647,9 +357,0 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glBindFramebuffer(target, framebufferIn);
-                    break;
-
-                case ARB:
-                    ARBFramebufferObject.glBindFramebuffer(target, framebufferIn);
-                    break;
@@ -657,3 +358,0 @@ public class OpenGlHelper
-                case EXT:
-                    EXTFramebufferObject.glBindFramebufferEXT(target, framebufferIn);
-            }
@@ -667,5 +365,0 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glBindRenderbuffer(target, renderbuffer);
-                    break;
@@ -673,7 +366,0 @@ public class OpenGlHelper
-                case ARB:
-                    ARBFramebufferObject.glBindRenderbuffer(target, renderbuffer);
-                    break;
-
-                case EXT:
-                    EXTFramebufferObject.glBindRenderbufferEXT(target, renderbuffer);
-            }
@@ -687,9 +373,0 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glDeleteRenderbuffers(renderbuffer);
-                    break;
-
-                case ARB:
-                    ARBFramebufferObject.glDeleteRenderbuffers(renderbuffer);
-                    break;
@@ -697,3 +374,0 @@ public class OpenGlHelper
-                case EXT:
-                    EXTFramebufferObject.glDeleteRenderbuffersEXT(renderbuffer);
-            }
@@ -707,5 +381,0 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glDeleteFramebuffers(framebufferIn);
-                    break;
@@ -713,7 +382,0 @@ public class OpenGlHelper
-                case ARB:
-                    ARBFramebufferObject.glDeleteFramebuffers(framebufferIn);
-                    break;
-
-                case EXT:
-                    EXTFramebufferObject.glDeleteFramebuffersEXT(framebufferIn);
-            }
@@ -734,14 +397 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    return GL30.glGenFramebuffers();
-
-                case ARB:
-                    return ARBFramebufferObject.glGenFramebuffers();
-
-                case EXT:
-                    return EXTFramebufferObject.glGenFramebuffersEXT();
-
-                default:
-                    return -1;
-            }
+            return 0;
@@ -759,14 +409 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    return GL30.glGenRenderbuffers();
-
-                case ARB:
-                    return ARBFramebufferObject.glGenRenderbuffers();
-
-                case EXT:
-                    return EXTFramebufferObject.glGenRenderbuffersEXT();
-
-                default:
-                    return -1;
-            }
+            return -1;
@@ -780,5 +416,0 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glRenderbufferStorage(target, internalFormat, width, height);
-                    break;
@@ -786,7 +417,0 @@ public class OpenGlHelper
-                case ARB:
-                    ARBFramebufferObject.glRenderbufferStorage(target, internalFormat, width, height);
-                    break;
-
-                case EXT:
-                    EXTFramebufferObject.glRenderbufferStorageEXT(target, internalFormat, width, height);
-            }
@@ -800,9 +424,0 @@ public class OpenGlHelper
-            switch (framebufferType)
-            {
-                case BASE:
-                    GL30.glFramebufferRenderbuffer(target, attachment, renderBufferTarget, renderBuffer);
-                    break;
-
-                case ARB:
-                    ARBFramebufferObject.glFramebufferRenderbuffer(target, attachment, renderBufferTarget, renderBuffer);
-                    break;
@@ -810,3 +425,0 @@ public class OpenGlHelper
-                case EXT:
-                    EXTFramebufferObject.glFramebufferRenderbufferEXT(target, attachment, renderBufferTarget, renderBuffer);
-            }
@@ -817,0 +431,2 @@ public class OpenGlHelper
+        return -1;
+        /*
@@ -838 +453 @@ public class OpenGlHelper
-        }
+        }*/
@@ -842,0 +458 @@ public class OpenGlHelper
+        /*
@@ -858,0 +475 @@ public class OpenGlHelper
+        */
@@ -868 +485 @@ public class OpenGlHelper
-            ARBMultitexture.glActiveTextureARB(texture);
+            //ARBMultitexture.glActiveTextureARB(texture);
@@ -872 +489 @@ public class OpenGlHelper
-            GL13.glActiveTexture(texture);
+            //GL13.glActiveTexture(texture);
@@ -883 +500 @@ public class OpenGlHelper
-            ARBMultitexture.glClientActiveTextureARB(texture);
+            //ARBMultitexture.glClientActiveTextureARB(texture);
@@ -887 +504 @@ public class OpenGlHelper
-            GL13.glClientActiveTexture(texture);
+            //GL13.glClientActiveTexture(texture);
@@ -898 +515 @@ public class OpenGlHelper
-            ARBMultitexture.glMultiTexCoord2fARB(target, p_77475_1_, t);
+            //ARBMultitexture.glMultiTexCoord2fARB(target, p_77475_1_, t);
@@ -902 +519 @@ public class OpenGlHelper
-            GL13.glMultiTexCoord2f(target, p_77475_1_, t);
+            //GL13.glMultiTexCoord2f(target, p_77475_1_, t);
@@ -912 +529 @@ public class OpenGlHelper
-                EXTBlendFuncSeparate.glBlendFuncSeparateEXT(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
+                //EXTBlendFuncSeparate.glBlendFuncSeparateEXT(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
@@ -916 +533 @@ public class OpenGlHelper
-                GL14.glBlendFuncSeparate(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
+                //GL14.glBlendFuncSeparate(sFactorRGB, dFactorRGB, sfactorAlpha, dfactorAlpha);
@@ -921 +538 @@ public class OpenGlHelper
-            GL11.glBlendFunc(sFactorRGB, dFactorRGB);
+            //GL11.glBlendFunc(sFactorRGB, dFactorRGB);
@@ -941 +558 @@ public class OpenGlHelper
-        GL11.glLineWidth(4.0F);
+        //GL11.glLineWidth(4.0F);
@@ -950 +567 @@ public class OpenGlHelper
-        GL11.glLineWidth(2.0F);
+        //GL11.glLineWidth(2.0F);
@@ -959 +576 @@ public class OpenGlHelper
-        GL11.glLineWidth(1.0F);
+        //GL11.glLineWidth(1.0F);
diff --git a/minecraft/client/renderer/RenderGlobal.java b/minecraft/client/renderer/RenderGlobal.java
index 7e4283f..7505d18 100644
--- a/minecraft/client/renderer/RenderGlobal.java
+++ b/minecraft/client/renderer/RenderGlobal.java
@@ -91,0 +92 @@ import org.lwjgl.util.vector.Vector4f;
+@SuppressWarnings("ALL")
@@ -105 +106 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-    private final TextureManager renderEngine;
+    private final TextureManager textureManager;
@@ -180,2 +181,2 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-        this.renderEngine = mcIn.getTextureManager();
-        this.renderEngine.bindTexture(FORCEFIELD_TEXTURES);
+        this.textureManager = mcIn.getRenderEngine();
+        this.textureManager.bindTexture(FORCEFIELD_TEXTURES);
@@ -205,0 +207 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -237 +239 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                this.entityOutlineShader = new ShaderGroup(this.mc.getTextureManager(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation);
+                this.entityOutlineShader = new ShaderGroup(this.mc.getRenderEngine(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation);
@@ -591 +593 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            TileEntityRendererDispatcher.instance.func_190056_a(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.objectMouseOver, partialTicks);
+            TileEntityRendererDispatcher.instance.func_190056_a(this.theWorld, this.mc.getRenderEngine(), this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.objectMouseOver, partialTicks);
@@ -787 +789 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-        for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
+        for (RenderGlobal.ContainerLocalRenderInformation containerInfo : this.renderInfos)
@@ -789 +791 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            CompiledChunk compiledchunk = renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk;
+            CompiledChunk compiledchunk = containerInfo.renderChunk.compiledChunk;
@@ -869 +871 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0);
+                RenderGlobal.ContainerLocalRenderInformation containerInfo = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0);
@@ -886 +888 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                    this.renderInfos.add(renderglobal$containerlocalrenderinformation3);
+                    this.renderInfos.add(containerInfo);
@@ -896 +898 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                    queue.add(renderglobal$containerlocalrenderinformation3);
+                    queue.add(containerInfo);
@@ -1071,0 +1074 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+            // Check if the new position is far enough away from the old position that resorting is justified
@@ -1079 +1082 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
+                for (RenderGlobal.ContainerLocalRenderInformation info : this.renderInfos)
@@ -1081 +1084 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                    if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
+                    if (info.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
@@ -1083 +1086 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                        this.renderDispatcher.updateTransparencyLater(renderglobal$containerlocalrenderinformation.renderChunk);
+                        this.renderDispatcher.updateTransparencyLater(info.renderChunk);
@@ -1100 +1103 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            RenderChunk renderchunk = ((RenderGlobal.ContainerLocalRenderInformation)this.renderInfos.get(j)).renderChunk;
+            RenderChunk renderchunk = this.renderInfos.get(j).renderChunk;
@@ -1135 +1138 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements())
+            for (VertexFormatElement vertexFormatElement : DefaultVertexFormats.BLOCK.getElements())
@@ -1137,2 +1140,2 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
-                int i = vertexformatelement.getIndex();
+                VertexFormatElement.EnumUsage usage = vertexFormatElement.getUsage();
+                int i = vertexFormatElement.getIndex();
@@ -1140 +1143 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                switch (vertexformatelement$enumusage)
+                switch (usage)
@@ -1209 +1212 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-        this.renderEngine.bindTexture(END_SKY_TEXTURES);
+        this.textureManager.bindTexture(END_SKY_TEXTURES);
@@ -1355 +1358 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            this.renderEngine.bindTexture(SUN_TEXTURES);
+            this.textureManager.bindTexture(SUN_TEXTURES);
@@ -1363 +1366 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            this.renderEngine.bindTexture(MOON_PHASES_TEXTURES);
+            this.textureManager.bindTexture(MOON_PHASES_TEXTURES);
@@ -1490 +1493 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-                this.renderEngine.bindTexture(CLOUDS_TEXTURES);
+                this.textureManager.bindTexture(CLOUDS_TEXTURES);
@@ -1565 +1568 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-        this.renderEngine.bindTexture(CLOUDS_TEXTURES);
+        this.textureManager.bindTexture(CLOUDS_TEXTURES);
@@ -1760 +1763 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            this.renderEngine.bindTexture(FORCEFIELD_TEXTURES);
+            this.textureManager.bindTexture(FORCEFIELD_TEXTURES);
@@ -1892 +1895 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
-            this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+            this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
@@ -2052,0 +2056 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2060,0 +2065 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2068,0 +2074 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2073,0 +2080 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2098,0 +2106 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2102,0 +2111 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2121,0 +2131 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+                @Override
@@ -2164,0 +2175 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2172,0 +2184 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2183,0 +2196 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2222,0 +2236 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
@@ -2513,0 +2528 @@ public class RenderGlobal implements IWorldEventListener, IResourceManagerReload
+    @Override
diff --git a/minecraft/client/renderer/Tessellator.java b/minecraft/client/renderer/Tessellator.java
index fe6b417..d33ff61 100644
--- a/minecraft/client/renderer/Tessellator.java
+++ b/minecraft/client/renderer/Tessellator.java
@@ -5 +5 @@ public class Tessellator
-    private final VertexBuffer worldRenderer;
+    private final VertexBuffer worldBuffer;
@@ -18 +18 @@ public class Tessellator
-        this.worldRenderer = new VertexBuffer(bufferSize);
+        this.worldBuffer = new VertexBuffer(bufferSize);
@@ -26,2 +26,2 @@ public class Tessellator
-        this.worldRenderer.finishDrawing();
-        this.vboUploader.draw(this.worldRenderer);
+        this.worldBuffer.finishDrawing();
+        this.vboUploader.draw(this.worldBuffer);
@@ -32 +32 @@ public class Tessellator
-        return this.worldRenderer;
+        return this.worldBuffer;
diff --git a/minecraft/client/renderer/VboRenderList.java b/minecraft/client/renderer/VboRenderList.java
index c140fee..e183401 100644
--- a/minecraft/client/renderer/VboRenderList.java
+++ b/minecraft/client/renderer/VboRenderList.java
@@ -12 +12 @@ public class VboRenderList extends ChunkRenderContainer
-            for (RenderChunk renderchunk : this.renderChunks)
+            for (RenderChunk chunk : this.renderChunks)
@@ -14 +14 @@ public class VboRenderList extends ChunkRenderContainer
-                net.minecraft.client.renderer.vertex.VertexBuffer vertexbuffer = renderchunk.getVertexBufferByLayer(layer.ordinal());
+                net.minecraft.client.renderer.vertex.VertexBuffer buffer = chunk.getVertexBufferByLayer(layer.ordinal());
@@ -16,3 +16,3 @@ public class VboRenderList extends ChunkRenderContainer
-                this.preRenderChunk(renderchunk);
-                renderchunk.multModelviewMatrix();
-                vertexbuffer.bindBuffer();
+                this.preRenderChunk(chunk);
+                chunk.multModelviewMatrix();
+                buffer.bindBuffer();
@@ -20 +20 @@ public class VboRenderList extends ChunkRenderContainer
-                vertexbuffer.drawArrays(7);
+                buffer.drawArrays(7);
diff --git a/minecraft/client/renderer/VertexBuffer.java b/minecraft/client/renderer/VertexBuffer.java
index 2b645c1..caa3701 100644
--- a/minecraft/client/renderer/VertexBuffer.java
+++ b/minecraft/client/renderer/VertexBuffer.java
@@ -25 +25 @@ public class VertexBuffer
-    private int vertexCount;
+    protected int vertexCount;
@@ -264 +264 @@ public class VertexBuffer
-    public void putBrightness4(int p_178962_1_, int p_178962_2_, int p_178962_3_, int p_178962_4_)
+    public void putBrightness4(int brightness1, int brightness2, int brightness3, int brightness4)
@@ -268,4 +268,4 @@ public class VertexBuffer
-        this.rawIntBuffer.put(i, p_178962_1_);
-        this.rawIntBuffer.put(i + j, p_178962_2_);
-        this.rawIntBuffer.put(i + j * 2, p_178962_3_);
-        this.rawIntBuffer.put(i + j * 3, p_178962_4_);
+        this.rawIntBuffer.put(i, brightness1);
+        this.rawIntBuffer.put(i + j, brightness2);
+        this.rawIntBuffer.put(i + j * 2, brightness3);
+        this.rawIntBuffer.put(i + j * 3, brightness4);
@@ -291,0 +292,5 @@ public class VertexBuffer
+     *
+     * ^ That's a stupid comment. Here's a better one:
+     * This method gets the next index that a color should be placed at
+     * <p>Why? What does the input parameter mean? I have no idea</p>
+     *
@@ -300,2 +305,2 @@ public class VertexBuffer
-        int i = this.getColorIndex(p_178978_4_);
-        int j = -1;
+        int colorIndex = this.getColorIndex(p_178978_4_);
+        int color = -1;
@@ -305 +310 @@ public class VertexBuffer
-            j = this.rawIntBuffer.get(i);
+            color = this.rawIntBuffer.get(colorIndex);
@@ -309,5 +314,5 @@ public class VertexBuffer
-                int k = (int)((float)(j & 255) * red);
-                int l = (int)((float)(j >> 8 & 255) * green);
-                int i1 = (int)((float)(j >> 16 & 255) * blue);
-                j = j & -16777216;
-                j = j | i1 << 16 | l << 8 | k;
+                int packedRed = (int)((float)(color & 255) * red);
+                int packedGreen = (int)((float)(color >> 8 & 255) * green);
+                int packedBlue = (int)((float)(color >> 16 & 255) * blue);
+                color = color & -16777216;
+                color = color | packedBlue << 16 | packedGreen << 8 | packedRed;
@@ -317,5 +322,5 @@ public class VertexBuffer
-                int j1 = (int)((float)(j >> 24 & 255) * red);
-                int k1 = (int)((float)(j >> 16 & 255) * green);
-                int l1 = (int)((float)(j >> 8 & 255) * blue);
-                j = j & 255;
-                j = j | j1 << 24 | k1 << 16 | l1 << 8;
+                int packedRed = (int)((float)(color >> 24 & 255) * red);
+                int packedGreen = (int)((float)(color >> 16 & 255) * green);
+                int packedBlue = (int)((float)(color >> 8 & 255) * blue);
+                color = color & 255;    // Don't forget the alpha! I never leave home without it
+                color = color | packedRed << 24 | packedGreen << 16 | packedBlue << 8;
@@ -325 +330 @@ public class VertexBuffer
-        this.rawIntBuffer.put(i, j);
+        this.rawIntBuffer.put(colorIndex, color);
diff --git a/minecraft/client/renderer/ViewFrustum.java b/minecraft/client/renderer/ViewFrustum.java
index 5437581..cac4763 100644
--- a/minecraft/client/renderer/ViewFrustum.java
+++ b/minecraft/client/renderer/ViewFrustum.java
@@ -41 +41 @@ public class ViewFrustum
-                    this.renderChunks[j1].func_189562_a(k * 16, l * 16, i1 * 16);
+                    this.renderChunks[j1].setPosition(k * 16, l * 16, i1 * 16);
@@ -81 +81 @@ public class ViewFrustum
-                    renderchunk.func_189562_a(i1, i2, k1);
+                    renderchunk.setPosition(i1, i2, k1);
diff --git a/minecraft/client/renderer/block/model/ModelBakery.java b/minecraft/client/renderer/block/model/ModelBakery.java
index ce26fa3..0e63e68 100644
--- a/minecraft/client/renderer/block/model/ModelBakery.java
+++ b/minecraft/client/renderer/block/model/ModelBakery.java
@@ -866 +866 @@ public class ModelBakery
-                textureatlassprite.clearFramesTextureData();
+                // textureatlassprite.clearFramesTextureData();
diff --git a/minecraft/client/renderer/block/model/ModelManager.java b/minecraft/client/renderer/block/model/ModelManager.java
index ac21ed8..6ffada5 100644
--- a/minecraft/client/renderer/block/model/ModelManager.java
+++ b/minecraft/client/renderer/block/model/ModelManager.java
@@ -2,0 +3,2 @@ package net.minecraft.client.renderer.block.model;
+import com.continuum.nova.NovaRenderer;
+import net.minecraft.client.Minecraft;
@@ -8,0 +11 @@ import net.minecraft.util.registry.IRegistry;
+@SuppressWarnings("ALL")
@@ -27,0 +31 @@ public class ModelManager implements IResourceManagerReloadListener
+        Minecraft.getMinecraft().getNovaRenderer().addTerrainAtlas(texMap);
diff --git a/minecraft/client/renderer/block/model/ModelResourceLocation.java b/minecraft/client/renderer/block/model/ModelResourceLocation.java
index 13f21f3..34444f3 100644
--- a/minecraft/client/renderer/block/model/ModelResourceLocation.java
+++ b/minecraft/client/renderer/block/model/ModelResourceLocation.java
@@ -56 +56 @@ public class ModelResourceLocation extends ResourceLocation
-    public boolean equals(Object p_equals_1_)
+    public boolean equals(Object other)
@@ -58 +58 @@ public class ModelResourceLocation extends ResourceLocation
-        if (this == p_equals_1_)
+        if (this == other)
@@ -62 +62 @@ public class ModelResourceLocation extends ResourceLocation
-        else if (p_equals_1_ instanceof ModelResourceLocation && super.equals(p_equals_1_))
+        else if (other instanceof ModelResourceLocation && super.equals(other))
@@ -64 +64 @@ public class ModelResourceLocation extends ResourceLocation
-            ModelResourceLocation modelresourcelocation = (ModelResourceLocation)p_equals_1_;
+            ModelResourceLocation modelresourcelocation = (ModelResourceLocation) other;
diff --git a/minecraft/client/renderer/chunk/RenderChunk.java b/minecraft/client/renderer/chunk/RenderChunk.java
index ddb2ec5..860a856 100644
--- a/minecraft/client/renderer/chunk/RenderChunk.java
+++ b/minecraft/client/renderer/chunk/RenderChunk.java
@@ -51 +51 @@ public class RenderChunk
-    private IBlockAccess field_189564_r;
+    private IBlockAccess blockAccess;
@@ -53 +53 @@ public class RenderChunk
-    public RenderChunk(World p_i47120_1_, RenderGlobal p_i47120_2_, int p_i47120_3_)
+    public RenderChunk(World world, RenderGlobal renderGlobal, int p_i47120_3_)
@@ -60,2 +60,2 @@ public class RenderChunk
-        this.world = p_i47120_1_;
-        this.renderGlobal = p_i47120_2_;
+        this.world = world;
+        this.renderGlobal = renderGlobal;
@@ -91 +91 @@ public class RenderChunk
-    public void func_189562_a(int p_189562_1_, int p_189562_2_, int p_189562_3_)
+    public void setPosition(int x, int y, int z)
@@ -93 +93 @@ public class RenderChunk
-        if (p_189562_1_ != this.position.getX() || p_189562_2_ != this.position.getY() || p_189562_3_ != this.position.getZ())
+        if (x != this.position.getX() || y != this.position.getY() || z != this.position.getZ())
@@ -96,2 +96,2 @@ public class RenderChunk
-            this.position.set(p_189562_1_, p_189562_2_, p_189562_3_);
-            this.boundingBox = new AxisAlignedBB((double)p_189562_1_, (double)p_189562_2_, (double)p_189562_3_, (double)(p_189562_1_ + 16), (double)(p_189562_2_ + 16), (double)(p_189562_3_ + 16));
+            this.position.set(x, y, z);
+            this.boundingBox = new AxisAlignedBB((double)x, (double)y, (double)z, (double)(x + 16), (double)(y + 16), (double)(z + 16));
@@ -124,2 +124,2 @@ public class RenderChunk
-        BlockPos blockpos = this.position;
-        BlockPos blockpos1 = blockpos.add(15, 15, 15);
+        BlockPos minPos = this.position;
+        BlockPos maxPos = minPos.add(15, 15, 15);
@@ -142,2 +142,2 @@ public class RenderChunk
-        VisGraph lvt_9_1_ = new VisGraph();
-        HashSet lvt_10_1_ = Sets.newHashSet();
+        VisGraph visGraph = new VisGraph();
+        HashSet hashSet = Sets.newHashSet();
@@ -145 +145 @@ public class RenderChunk
-        if (!this.field_189564_r.extendedLevelsInChunkCache())
+        if (!this.blockAccess.extendedLevelsInChunkCache())
@@ -151 +151 @@ public class RenderChunk
-            for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(blockpos, blockpos1))
+            for (BlockPos.MutableBlockPos mutablePos : BlockPos.getAllInBoxMutable(minPos, maxPos))
@@ -153 +153 @@ public class RenderChunk
-                IBlockState iblockstate = this.field_189564_r.getBlockState(blockpos$mutableblockpos);
+                IBlockState iblockstate = this.blockAccess.getBlockState(mutablePos);
@@ -158 +158 @@ public class RenderChunk
-                    lvt_9_1_.setOpaqueCube(blockpos$mutableblockpos);
+                    visGraph.setOpaqueCube(mutablePos);
@@ -163 +163 @@ public class RenderChunk
-                    TileEntity tileentity = this.field_189564_r.getTileEntity(new BlockPos(blockpos$mutableblockpos));
+                    TileEntity tileEntity = this.blockAccess.getTileEntity(new BlockPos(mutablePos));
@@ -165 +165 @@ public class RenderChunk
-                    if (tileentity != null)
+                    if (tileEntity != null)
@@ -167 +167 @@ public class RenderChunk
-                        TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileentity);
+                        TileEntitySpecialRenderer<TileEntity> tileEntityRenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileEntity);
@@ -169 +169 @@ public class RenderChunk
-                        if (tileentityspecialrenderer != null)
+                        if (tileEntityRenderer != null)
@@ -171 +171 @@ public class RenderChunk
-                            compiledchunk.addTileEntity(tileentity);
+                            compiledchunk.addTileEntity(tileEntity);
@@ -173 +173 @@ public class RenderChunk
-                            if (tileentityspecialrenderer.isGlobalRenderer(tileentity))
+                            if (tileEntityRenderer.isGlobalRenderer(tileEntity))
@@ -175 +175 @@ public class RenderChunk
-                                lvt_10_1_.add(tileentity);
+                                hashSet.add(tileEntity);
@@ -191 +191 @@ public class RenderChunk
-                        this.preRenderBlocks(vertexbuffer, blockpos);
+                        this.preRenderBlocks(vertexbuffer, minPos);
@@ -194 +194 @@ public class RenderChunk
-                    aboolean[j] |= blockrendererdispatcher.renderBlock(iblockstate, blockpos$mutableblockpos, this.field_189564_r, vertexbuffer);
+                    aboolean[j] |= blockrendererdispatcher.renderBlock(iblockstate, mutablePos, this.blockAccess, vertexbuffer);
@@ -212 +212 @@ public class RenderChunk
-        compiledchunk.setVisibility(lvt_9_1_.computeVisibility());
+        compiledchunk.setVisibility(visGraph.computeVisibility());
@@ -217 +217 @@ public class RenderChunk
-            Set<TileEntity> set = Sets.newHashSet(lvt_10_1_);
+            Set<TileEntity> set = Sets.newHashSet(hashSet);
@@ -220 +220 @@ public class RenderChunk
-            set1.removeAll(lvt_10_1_);
+            set1.removeAll(hashSet);
@@ -222 +222 @@ public class RenderChunk
-            this.setTileEntities.addAll(lvt_10_1_);
+            this.setTileEntities.addAll(hashSet);
@@ -263 +263 @@ public class RenderChunk
-            this.func_189563_q();
+            this.initBlockAccess();
@@ -274 +274 @@ public class RenderChunk
-    private void func_189563_q()
+    private void initBlockAccess()
@@ -277 +277 @@ public class RenderChunk
-        this.field_189564_r = new ChunkCache(this.world, this.position.add(-1, -1, -1), this.position.add(16, 16, 16), 1);
+        this.blockAccess = new ChunkCache(this.world, this.position.add(-1, -1, -1), this.position.add(16, 16, 16), 1);
diff --git a/minecraft/client/renderer/chunk/VboChunkFactory.java b/minecraft/client/renderer/chunk/VboChunkFactory.java
index c2be3f9..a9705d9 100644
--- a/minecraft/client/renderer/chunk/VboChunkFactory.java
+++ b/minecraft/client/renderer/chunk/VboChunkFactory.java
@@ -8 +8 @@ public class VboChunkFactory implements IRenderChunkFactory
-    public RenderChunk func_189565_a(World p_189565_1_, RenderGlobal p_189565_2_, int p_189565_3_)
+    public RenderChunk func_189565_a(World world, RenderGlobal renderGlobal, int p_189565_3_)
@@ -10 +10 @@ public class VboChunkFactory implements IRenderChunkFactory
-        return new RenderChunk(p_189565_1_, p_189565_2_, p_189565_3_);
+        return new RenderChunk(world, renderGlobal, p_189565_3_);
diff --git a/minecraft/client/renderer/color/BlockColors.java b/minecraft/client/renderer/color/BlockColors.java
index 8965ba8..213a6b6 100644
--- a/minecraft/client/renderer/color/BlockColors.java
+++ b/minecraft/client/renderer/color/BlockColors.java
@@ -23,0 +24,2 @@ import net.minecraft.world.biome.BiomeColorHelper;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
@@ -26,0 +29,2 @@ public class BlockColors
+    private static final Logger LOG = LogManager.getLogger(BlockColors.class);
+
@@ -32,11 +36,8 @@ public class BlockColors
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                BlockDoublePlant.EnumPlantType blockdoubleplant$enumplanttype = (BlockDoublePlant.EnumPlantType)state.getValue(BlockDoublePlant.VARIANT);
-                return worldIn == null || pos == null || blockdoubleplant$enumplanttype != BlockDoublePlant.EnumPlantType.GRASS && blockdoubleplant$enumplanttype != BlockDoublePlant.EnumPlantType.FERN ? -1 : BiomeColorHelper.getGrassColorAtPos(worldIn, pos);
-            }
-        }, new Block[] {Blocks.DOUBLE_PLANT});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> {
+            BlockDoublePlant.EnumPlantType plantType = state.getValue(BlockDoublePlant.VARIANT);
+            return worldIn == null || pos == null || plantType != BlockDoublePlant.EnumPlantType.GRASS && plantType != BlockDoublePlant.EnumPlantType.FERN ? -1 : BiomeColorHelper.getGrassColorAtPos(worldIn, pos);
+        }, Blocks.DOUBLE_PLANT);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> {
+            if (worldIn != null && pos != null)
@@ -44 +45,3 @@ public class BlockColors
-                if (worldIn != null && pos != null)
+                TileEntity tileentity = worldIn.getTileEntity(pos);
+
+                if (tileentity instanceof TileEntityFlowerPot)
@@ -46 +49 @@ public class BlockColors
-                    TileEntity tileentity = worldIn.getTileEntity(pos);
+                    Item item = ((TileEntityFlowerPot)tileentity).getFlowerPotItem();
@@ -48 +51 @@ public class BlockColors
-                    if (tileentity instanceof TileEntityFlowerPot)
+                    if (item instanceof ItemBlock)
@@ -50,7 +53,2 @@ public class BlockColors
-                        Item item = ((TileEntityFlowerPot)tileentity).getFlowerPotItem();
-
-                        if (item instanceof ItemBlock)
-                        {
-                            IBlockState iblockstate = Block.getBlockFromItem(item).getDefaultState();
-                            return blockcolors.colorMultiplier(iblockstate, worldIn, pos, tintIndex);
-                        }
+                        IBlockState iblockstate = Block.getBlockFromItem(item).getDefaultState();
+                        return blockcolors.colorMultiplier(iblockstate, worldIn, pos, tintIndex);
@@ -58,2 +55,0 @@ public class BlockColors
-
-                    return -1;
@@ -61,72 +57,2 @@ public class BlockColors
-                else
-                {
-                    return -1;
-                }
-            }
-        }, new Block[] {Blocks.FLOWER_POT});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return worldIn != null && pos != null ? BiomeColorHelper.getGrassColorAtPos(worldIn, pos) : ColorizerGrass.getGrassColor(0.5D, 1.0D);
-            }
-        }, new Block[] {Blocks.GRASS});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                BlockPlanks.EnumType blockplanks$enumtype = (BlockPlanks.EnumType)state.getValue(BlockOldLeaf.VARIANT);
-                return blockplanks$enumtype == BlockPlanks.EnumType.SPRUCE ? ColorizerFoliage.getFoliageColorPine() : (blockplanks$enumtype == BlockPlanks.EnumType.BIRCH ? ColorizerFoliage.getFoliageColorBirch() : (worldIn != null && pos != null ? BiomeColorHelper.getFoliageColorAtPos(worldIn, pos) : ColorizerFoliage.getFoliageColorBasic()));
-            }
-        }, new Block[] {Blocks.LEAVES});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return worldIn != null && pos != null ? BiomeColorHelper.getFoliageColorAtPos(worldIn, pos) : ColorizerFoliage.getFoliageColorBasic();
-            }
-        }, new Block[] {Blocks.LEAVES2});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return worldIn != null && pos != null ? BiomeColorHelper.getWaterColorAtPos(worldIn, pos) : -1;
-            }
-        }, new Block[] {Blocks.WATER, Blocks.FLOWING_WATER});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return BlockRedstoneWire.colorMultiplier(((Integer)state.getValue(BlockRedstoneWire.POWER)).intValue());
-            }
-        }, new Block[] {Blocks.REDSTONE_WIRE});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return worldIn != null && pos != null ? BiomeColorHelper.getGrassColorAtPos(worldIn, pos) : -1;
-            }
-        }, new Block[] {Blocks.REEDS});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                int i = ((Integer)state.getValue(BlockStem.AGE)).intValue();
-                int j = i * 32;
-                int k = 255 - i * 8;
-                int l = i * 4;
-                return j << 16 | k << 8 | l;
-            }
-        }, new Block[] {Blocks.MELON_STEM, Blocks.PUMPKIN_STEM});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return worldIn != null && pos != null ? BiomeColorHelper.getGrassColorAtPos(worldIn, pos) : (state.getValue(BlockTallGrass.TYPE) == BlockTallGrass.EnumType.DEAD_BUSH ? 16777215 : ColorizerGrass.getGrassColor(0.5D, 1.0D));
-            }
-        }, new Block[] {Blocks.TALLGRASS});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
-            {
-                return worldIn != null && pos != null ? BiomeColorHelper.getFoliageColorAtPos(worldIn, pos) : ColorizerFoliage.getFoliageColorBasic();
+
+                return -1;
@@ -134,4 +60 @@ public class BlockColors
-        }, new Block[] {Blocks.VINE});
-        blockcolors.registerBlockColorHandler(new IBlockColor()
-        {
-            public int colorMultiplier(IBlockState state, @Nullable IBlockAccess worldIn, @Nullable BlockPos pos, int tintIndex)
+            else
@@ -139 +62 @@ public class BlockColors
-                return worldIn != null && pos != null ? 2129968 : 7455580;
+                return -1;
@@ -141 +64,31 @@ public class BlockColors
-        }, new Block[] {Blocks.WATERLILY});
+        }, Blocks.FLOWER_POT);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? BiomeColorHelper.getGrassColorAtPos(worldIn, pos) : ColorizerGrass.getGrassColor(0.5D, 1.0D), Blocks.GRASS);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> {
+            BlockPlanks.EnumType blockplanks$enumtype = state.getValue(BlockOldLeaf.VARIANT);
+            return blockplanks$enumtype == BlockPlanks.EnumType.SPRUCE ? ColorizerFoliage.getFoliageColorPine() : (blockplanks$enumtype == BlockPlanks.EnumType.BIRCH ? ColorizerFoliage.getFoliageColorBirch() : (worldIn != null && pos != null ? BiomeColorHelper.getFoliageColorAtPos(worldIn, pos) : ColorizerFoliage.getFoliageColorBasic()));
+        }, Blocks.LEAVES);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? BiomeColorHelper.getFoliageColorAtPos(worldIn, pos) : ColorizerFoliage.getFoliageColorBasic(), Blocks.LEAVES2);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? BiomeColorHelper.getWaterColorAtPos(worldIn, pos) : -1, Blocks.WATER, Blocks.FLOWING_WATER);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> BlockRedstoneWire.colorMultiplier(state.getValue(BlockRedstoneWire.POWER)), Blocks.REDSTONE_WIRE);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? BiomeColorHelper.getGrassColorAtPos(worldIn, pos) : -1, Blocks.REEDS);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> {
+            int i = state.getValue(BlockStem.AGE);
+            int j = i * 32;
+            int k = 255 - i * 8;
+            int l = i * 4;
+            return j << 16 | k << 8 | l;
+        }, Blocks.MELON_STEM, Blocks.PUMPKIN_STEM);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? BiomeColorHelper.getGrassColorAtPos(worldIn, pos) : (state.getValue(BlockTallGrass.TYPE) == BlockTallGrass.EnumType.DEAD_BUSH ? 16777215 : ColorizerGrass.getGrassColor(0.5D, 1.0D)), new Block[] {Blocks.TALLGRASS});
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? BiomeColorHelper.getFoliageColorAtPos(worldIn, pos) : ColorizerFoliage.getFoliageColorBasic(), Blocks.VINE);
+
+        blockcolors.registerBlockColorHandler((state, worldIn, pos, tintIndex) -> worldIn != null && pos != null ? 2129968 : 7455580, Blocks.WATERLILY);
+
@@ -147 +100 @@ public class BlockColors
-        IBlockColor iblockcolor = (IBlockColor)this.mapBlockColors.getByValue(Block.getIdFromBlock(p_189991_1_.getBlock()));
+        IBlockColor iblockcolor = this.mapBlockColors.getByValue(Block.getIdFromBlock(p_189991_1_.getBlock()));
@@ -162 +115 @@ public class BlockColors
-        IBlockColor iblockcolor = (IBlockColor)this.mapBlockColors.getByValue(Block.getIdFromBlock(state.getBlock()));
+        IBlockColor iblockcolor = this.mapBlockColors.getByValue(Block.getIdFromBlock(state.getBlock()));
diff --git a/minecraft/client/renderer/entity/RenderHorse.java b/minecraft/client/renderer/entity/RenderHorse.java
index 0cc5fa2..ed1f2f0 100644
--- a/minecraft/client/renderer/entity/RenderHorse.java
+++ b/minecraft/client/renderer/entity/RenderHorse.java
@@ -68 +68 @@ public class RenderHorse extends RenderLiving<EntityHorse>
-                Minecraft.getMinecraft().getTextureManager().loadTexture(resourcelocation, new LayeredTexture(p_188328_1_.getVariantTexturePaths()));
+                Minecraft.getMinecraft().getRenderEngine().loadTexture(resourcelocation, new LayeredTexture(p_188328_1_.getVariantTexturePaths()));
diff --git a/minecraft/client/renderer/texture/AbstractTexture.java b/minecraft/client/renderer/texture/AbstractTexture.java
index 1b72624..94e5a37 100644
--- a/minecraft/client/renderer/texture/AbstractTexture.java
+++ b/minecraft/client/renderer/texture/AbstractTexture.java
@@ -64,0 +65,2 @@ public abstract class AbstractTexture implements ITextureObject
+
+
diff --git a/minecraft/client/renderer/texture/DynamicTexture.java b/minecraft/client/renderer/texture/DynamicTexture.java
index cba5773..58c9c1d 100644
--- a/minecraft/client/renderer/texture/DynamicTexture.java
+++ b/minecraft/client/renderer/texture/DynamicTexture.java
@@ -7,2 +7 @@ import net.minecraft.client.resources.IResourceManager;
-public class DynamicTexture extends AbstractTexture
-{
+public class DynamicTexture extends AbstractTexture {
@@ -17,2 +16 @@ public class DynamicTexture extends AbstractTexture
-    public DynamicTexture(BufferedImage bufferedImage)
-    {
+    public DynamicTexture(BufferedImage bufferedImage) {
@@ -24,2 +22 @@ public class DynamicTexture extends AbstractTexture
-    public DynamicTexture(int textureWidth, int textureHeight)
-    {
+    public DynamicTexture(int textureWidth, int textureHeight) {
@@ -32,3 +29 @@ public class DynamicTexture extends AbstractTexture
-    public void loadTexture(IResourceManager resourceManager) throws IOException
-    {
-    }
+    public void loadTexture(IResourceManager resourceManager) throws IOException {}
@@ -36,2 +31 @@ public class DynamicTexture extends AbstractTexture
-    public void updateDynamicTexture()
-    {
+    public void updateDynamicTexture() {
@@ -44,0 +39,8 @@ public class DynamicTexture extends AbstractTexture
+
+    public int getWidth() {
+        return width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
diff --git a/minecraft/client/renderer/texture/PngSizeInfo.java b/minecraft/client/renderer/texture/PngSizeInfo.java
index 9a8a88a..15a7057 100644
--- a/minecraft/client/renderer/texture/PngSizeInfo.java
+++ b/minecraft/client/renderer/texture/PngSizeInfo.java
@@ -41,12 +41 @@ public class PngSizeInfo
-        PngSizeInfo pngsizeinfo;
-
-        try
-        {
-            pngsizeinfo = new PngSizeInfo(resource.getInputStream());
-        }
-        finally
-        {
-            IOUtils.closeQuietly((Closeable)resource);
-        }
-
-        return pngsizeinfo;
+        return new PngSizeInfo(resource.getInputStream());
diff --git a/minecraft/client/renderer/texture/Stitcher.java b/minecraft/client/renderer/texture/Stitcher.java
index d2a4361..d4179cb 100644
--- a/minecraft/client/renderer/texture/Stitcher.java
+++ b/minecraft/client/renderer/texture/Stitcher.java
@@ -14 +14 @@ public class Stitcher
-    private final Set<Stitcher.Holder> setStitchHolders = Sets.<Stitcher.Holder>newHashSetWithExpectedSize(256);
+    private final Set<Stitcher.Holder> spriteHolders = Sets.<Stitcher.Holder>newHashSetWithExpectedSize(256);
@@ -42,3 +42,2 @@ public class Stitcher
-    public void addSprite(TextureAtlasSprite textureAtlas)
-    {
-        Stitcher.Holder stitcher$holder = new Stitcher.Holder(textureAtlas, this.mipmapLevelStitcher);
+    public void addSprite(TextureAtlasSprite newSprite) {
+        Stitcher.Holder spriteHolder = new Stitcher.Holder(newSprite, this.mipmapLevelStitcher);
@@ -46,3 +45,2 @@ public class Stitcher
-        if (this.maxTileDimension > 0)
-        {
-            stitcher$holder.setNewDimension(this.maxTileDimension);
+        if (this.maxTileDimension > 0) {
+            spriteHolder.setNewDimension(this.maxTileDimension);
@@ -51 +49 @@ public class Stitcher
-        this.setStitchHolders.add(stitcher$holder);
+        this.spriteHolders.add(spriteHolder);
@@ -54,4 +52,3 @@ public class Stitcher
-    public void doStitch()
-    {
-        Stitcher.Holder[] astitcher$holder = (Stitcher.Holder[])this.setStitchHolders.toArray(new Stitcher.Holder[this.setStitchHolders.size()]);
-        Arrays.sort((Object[])astitcher$holder);
+    public void doStitch() {
+        Stitcher.Holder[] spriteHoldersArray = this.spriteHolders.toArray(new Stitcher.Holder[this.spriteHolders.size()]);
+        Arrays.sort(spriteHoldersArray);
@@ -59,6 +56,4 @@ public class Stitcher
-        for (Stitcher.Holder stitcher$holder : astitcher$holder)
-        {
-            if (!this.allocateSlot(stitcher$holder))
-            {
-                String s = String.format("Unable to fit: %s - size: %dx%d - Maybe try a lowerresolution resourcepack?", new Object[] {stitcher$holder.getAtlasSprite().getIconName(), Integer.valueOf(stitcher$holder.getAtlasSprite().getIconWidth()), Integer.valueOf(stitcher$holder.getAtlasSprite().getIconHeight())});
-                throw new StitcherException(stitcher$holder, s);
+        for (Stitcher.Holder holder : spriteHoldersArray) {
+            if(!this.allocateSlot(holder)) {
+                String s = String.format("Unable to fit: %s - size: %dx%d - Maybe try a lowerresolution resourcepack?", holder.getAtlasSprite().getIconName(), Integer.valueOf(holder.getAtlasSprite().getIconWidth()), Integer.valueOf(holder.getAtlasSprite().getIconHeight()));
+                throw new StitcherException(holder, s);
@@ -102,4 +97,3 @@ public class Stitcher
-    private boolean allocateSlot(Stitcher.Holder p_94310_1_)
-    {
-        TextureAtlasSprite textureatlassprite = p_94310_1_.getAtlasSprite();
-        boolean flag = textureatlassprite.getIconWidth() != textureatlassprite.getIconHeight();
+    private boolean allocateSlot(Stitcher.Holder holderToInsert) {
+        TextureAtlasSprite sprite = holderToInsert.getAtlasSprite();
+        boolean spriteIsSquare = sprite.getIconWidth() != sprite.getIconHeight();
@@ -107,4 +101,2 @@ public class Stitcher
-        for (int i = 0; i < this.stitchSlots.size(); ++i)
-        {
-            if (((Stitcher.Slot)this.stitchSlots.get(i)).addSlot(p_94310_1_))
-            {
+        for(Stitcher.Slot slot : this.stitchSlots) {
+            if(slot.addSlot(holderToInsert)) {
@@ -114,3 +106,2 @@ public class Stitcher
-            if (flag)
-            {
-                p_94310_1_.rotate();
+            if(spriteIsSquare) {
+                holderToInsert.rotate();
@@ -118,2 +109 @@ public class Stitcher
-                if (((Stitcher.Slot)this.stitchSlots.get(i)).addSlot(p_94310_1_))
-                {
+                if(slot.addSlot(holderToInsert)) {
@@ -123 +113 @@ public class Stitcher
-                p_94310_1_.rotate();
+                holderToInsert.rotate();
@@ -127 +117 @@ public class Stitcher
-        return this.expandAndAllocateSlot(p_94310_1_);
+        return this.expandAndAllocateSlot(holderToInsert);
@@ -133 +123 @@ public class Stitcher
-    private boolean expandAndAllocateSlot(Stitcher.Holder p_94311_1_)
+    private boolean expandAndAllocateSlot(Stitcher.Holder holderToInsert)
@@ -135,10 +125,10 @@ public class Stitcher
-        int i = Math.min(p_94311_1_.getWidth(), p_94311_1_.getHeight());
-        int j = Math.max(p_94311_1_.getWidth(), p_94311_1_.getHeight());
-        int k = MathHelper.roundUpToPowerOfTwo(this.currentWidth);
-        int l = MathHelper.roundUpToPowerOfTwo(this.currentHeight);
-        int i1 = MathHelper.roundUpToPowerOfTwo(this.currentWidth + i);
-        int j1 = MathHelper.roundUpToPowerOfTwo(this.currentHeight + i);
-        boolean flag1 = i1 <= this.maxWidth;
-        boolean flag2 = j1 <= this.maxHeight;
-
-        if (!flag1 && !flag2)
+        int minOfWidthAndHeight = Math.min(holderToInsert.getWidth(), holderToInsert.getHeight());
+        int maxOfWidthAndHeight = Math.max(holderToInsert.getWidth(), holderToInsert.getHeight());
+        int widthPowerOfTwo = MathHelper.roundUpToPowerOfTwo(this.currentWidth);
+        int heightPowerOfTwo = MathHelper.roundUpToPowerOfTwo(this.currentHeight);
+        int expandedWidth = MathHelper.roundUpToPowerOfTwo(this.currentWidth + minOfWidthAndHeight);
+        int expendedHeight = MathHelper.roundUpToPowerOfTwo(this.currentHeight + minOfWidthAndHeight);
+        boolean expandedWidthSmallEnough = expandedWidth <= this.maxWidth;
+        boolean expandedHeightSmallEnough = expendedHeight <= this.maxHeight;
+
+        if (!expandedWidthSmallEnough && !expandedHeightSmallEnough)
@@ -150,2 +140,2 @@ public class Stitcher
-            boolean flag3 = flag1 && k != i1;
-            boolean flag4 = flag2 && l != j1;
+            boolean flag3 = expandedWidthSmallEnough && widthPowerOfTwo != expandedWidth;
+            boolean flag4 = expandedHeightSmallEnough && heightPowerOfTwo != expendedHeight;
@@ -160 +150 @@ public class Stitcher
-                flag = flag1 && k <= l;
+                flag = expandedWidthSmallEnough && widthPowerOfTwo <= heightPowerOfTwo;
@@ -167 +157 @@ public class Stitcher
-                if (p_94311_1_.getWidth() > p_94311_1_.getHeight())
+                if (holderToInsert.getWidth() > holderToInsert.getHeight())
@@ -169 +159 @@ public class Stitcher
-                    p_94311_1_.rotate();
+                    holderToInsert.rotate();
@@ -174 +164 @@ public class Stitcher
-                    this.currentHeight = p_94311_1_.getHeight();
+                    this.currentHeight = holderToInsert.getHeight();
@@ -177,2 +167,2 @@ public class Stitcher
-                stitcher$slot = new Stitcher.Slot(this.currentWidth, 0, p_94311_1_.getWidth(), this.currentHeight);
-                this.currentWidth += p_94311_1_.getWidth();
+                stitcher$slot = new Stitcher.Slot(this.currentWidth, 0, holderToInsert.getWidth(), this.currentHeight);
+                this.currentWidth += holderToInsert.getWidth();
@@ -182,2 +172,2 @@ public class Stitcher
-                stitcher$slot = new Stitcher.Slot(0, this.currentHeight, this.currentWidth, p_94311_1_.getHeight());
-                this.currentHeight += p_94311_1_.getHeight();
+                stitcher$slot = new Stitcher.Slot(0, this.currentHeight, this.currentWidth, holderToInsert.getHeight());
+                this.currentHeight += holderToInsert.getHeight();
@@ -186 +176 @@ public class Stitcher
-            stitcher$slot.addSlot(p_94311_1_);
+            stitcher$slot.addSlot(holderToInsert);
@@ -247 +237 @@ public class Stitcher
-            return "Holder{width=" + this.width + ", height=" + this.height + '}';
+            return "Holder{name=" + theTexture.getIconName() + ", width=" + this.width + ", height=" + this.height + '}';
@@ -309,4 +299,2 @@ public class Stitcher
-        public boolean addSlot(Stitcher.Holder holderIn)
-        {
-            if (this.holder != null)
-            {
+        public boolean addSlot(Stitcher.Holder holderIn) {
+            if (this.holder != null) {
@@ -314,3 +302,2 @@ public class Stitcher
-            }
-            else
-            {
+
+            } else {
@@ -320,4 +307,2 @@ public class Stitcher
-                if (i <= this.width && j <= this.height)
-                {
-                    if (i == this.width && j == this.height)
-                    {
+                if (i <= this.width && j <= this.height) {
+                    if (i == this.width && j == this.height) {
@@ -326,5 +311,3 @@ public class Stitcher
-                    }
-                    else
-                    {
-                        if (this.subSlots == null)
-                        {
+
+                    } else {
+                        if (this.subSlots == null) {
@@ -336,2 +319 @@ public class Stitcher
-                            if (l > 0 && k > 0)
-                            {
+                            if (l > 0 && k > 0) {
@@ -341,2 +323 @@ public class Stitcher
-                                if (i1 >= j1)
-                                {
+                                if (i1 >= j1) {
@@ -345,3 +326,2 @@ public class Stitcher
-                                }
-                                else
-                                {
+
+                                } else {
@@ -351,3 +331,2 @@ public class Stitcher
-                            }
-                            else if (k == 0)
-                            {
+
+                            } else if (k == 0) {
@@ -355,3 +334,2 @@ public class Stitcher
-                            }
-                            else if (l == 0)
-                            {
+
+                            } else if (l == 0) {
@@ -362,4 +340,2 @@ public class Stitcher
-                        for (Stitcher.Slot stitcher$slot : this.subSlots)
-                        {
-                            if (stitcher$slot.addSlot(holderIn))
-                            {
+                        for (Stitcher.Slot stitcher$slot : this.subSlots) {
+                            if (stitcher$slot.addSlot(holderIn)) {
@@ -372,3 +348 @@ public class Stitcher
-                }
-                else
-                {
+                } else {
diff --git a/minecraft/client/renderer/texture/TextureAtlasSprite.java b/minecraft/client/renderer/texture/TextureAtlasSprite.java
index 4b545cb..dcd99f0 100644
--- a/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ b/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -15,0 +16,2 @@ import net.minecraft.util.ResourceLocation;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
@@ -17,2 +19 @@ import net.minecraft.util.ResourceLocation;
-public class TextureAtlasSprite
-{
+public class TextureAtlasSprite {
@@ -20 +21 @@ public class TextureAtlasSprite
-    protected List<int[][]> framesTextureData = Lists.<int[][]>newArrayList();
+    protected List<int[][]> framesTextureData = Lists.newArrayList();
@@ -34,0 +36,12 @@ public class TextureAtlasSprite
+    private static final Logger LOGGER = LogManager.getLogger(TextureAtlasSprite.class);
+
+    public ResourceLocation getLocation() {
+        return location;
+    }
+
+    public void setLocation(ResourceLocation location) {
+        this.location = location;
+    }
+
+    private ResourceLocation location;
+
@@ -40,2 +53 @@ public class TextureAtlasSprite
-    protected static TextureAtlasSprite makeAtlasSprite(ResourceLocation spriteResourceLocation)
-    {
+    protected static TextureAtlasSprite makeAtlasSprite(ResourceLocation spriteResourceLocation) {
@@ -45,2 +57 @@ public class TextureAtlasSprite
-    public void initSprite(int inX, int inY, int originInX, int originInY, boolean rotatedIn)
-    {
+    public void initSprite(int inX, int inY, int originInX, int originInY, boolean rotatedIn) {
@@ -58,2 +69 @@ public class TextureAtlasSprite
-    public void copyFrom(TextureAtlasSprite atlasSpirit)
-    {
+    public void copyFrom(TextureAtlasSprite atlasSpirit) {
@@ -122,2 +132 @@ public class TextureAtlasSprite
-    public float getInterpolatedU(double u)
-    {
+    public float getInterpolatedU(double u) {
@@ -128,2 +137 @@ public class TextureAtlasSprite
-    public float getUnInterpolatedU(float p_188537_1_)
-    {
+    public float getUnInterpolatedU(float p_188537_1_) {
@@ -153,2 +161 @@ public class TextureAtlasSprite
-    public float getInterpolatedV(double v)
-    {
+    public float getInterpolatedV(double v) {
@@ -159,2 +166 @@ public class TextureAtlasSprite
-    public float getUnInterpolatedV(float p_188536_1_)
-    {
+    public float getUnInterpolatedV(float p_188536_1_) {
@@ -170,2 +176 @@ public class TextureAtlasSprite
-    public void updateAnimation()
-    {
+    public void updateAnimation() {
@@ -174,2 +179 @@ public class TextureAtlasSprite
-        if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
-        {
+        if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter)) {
@@ -182,2 +186 @@ public class TextureAtlasSprite
-            if (i != k && k >= 0 && k < this.framesTextureData.size())
-            {
+            if (i != k && k >= 0 && k < this.framesTextureData.size()) {
@@ -186,3 +189 @@ public class TextureAtlasSprite
-        }
-        else if (this.animationMetadata.isInterpolate())
-        {
+        } else if (this.animationMetadata.isInterpolate()) {
@@ -193,2 +194 @@ public class TextureAtlasSprite
-    private void updateAnimationInterpolated()
-    {
+    private void updateAnimationInterpolated() {
@@ -235,3 +235,2 @@ public class TextureAtlasSprite
-    private int interpolateColor(double p_188535_1_, int p_188535_3_, int p_188535_4_)
-    {
-        return (int)(p_188535_1_ * (double)p_188535_3_ + (1.0D - p_188535_1_) * (double)p_188535_4_);
+    private int interpolateColor(double factor, int color1, int color2) {
+        return (int)(factor * (double)color1 + (1.0D - factor) * (double)color2);
@@ -242 +241 @@ public class TextureAtlasSprite
-        return (int[][])this.framesTextureData.get(index);
+        return this.framesTextureData.get(index);
@@ -255,2 +254 @@ public class TextureAtlasSprite
-    public void setIconHeight(int newHeight)
-    {
+    public void setIconHeight(int newHeight) {
@@ -260,2 +258 @@ public class TextureAtlasSprite
-    public void loadSprite(PngSizeInfo sizeInfo, boolean p_188538_2_) throws IOException
-    {
+    public void setAndValidateSize(PngSizeInfo sizeInfo, boolean isAnimated) throws IOException {
@@ -266,2 +263 @@ public class TextureAtlasSprite
-        if (p_188538_2_)
-        {
+        if(isAnimated) {
@@ -269,3 +265,2 @@ public class TextureAtlasSprite
-        }
-        else if (sizeInfo.pngHeight != sizeInfo.pngWidth)
-        {
+
+        } else if(sizeInfo.pngHeight != sizeInfo.pngWidth) {
@@ -276,2 +271 @@ public class TextureAtlasSprite
-    public void loadSpriteFrames(IResource resource, int mipmaplevels) throws IOException
-    {
+    public void loadSpriteFrames(IResource resource, int mipmaplevels) throws IOException {
@@ -279,4 +273,4 @@ public class TextureAtlasSprite
-        AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)resource.getMetadata("animation");
-        int[][] aint = new int[mipmaplevels][];
-        aint[0] = new int[bufferedimage.getWidth() * bufferedimage.getHeight()];
-        bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), aint[0], 0, bufferedimage.getWidth());
+        AnimationMetadataSection animationData = resource.getMetadata("animation");
+        int[][] textureData = new int[mipmaplevels][];
+        textureData[0] = new int[bufferedimage.getWidth() * bufferedimage.getHeight()];
+        bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), textureData[0], 0, bufferedimage.getWidth());
@@ -284,7 +278,2 @@ public class TextureAtlasSprite
-        if (animationmetadatasection == null)
-        {
-            this.framesTextureData.add(aint);
-        }
-        else
-        {
-            int i = bufferedimage.getHeight() / this.width;
+        if (animationData == null) {
+            this.framesTextureData.add(textureData);
@@ -292,3 +281,4 @@ public class TextureAtlasSprite
-            if (animationmetadatasection.getFrameCount() > 0)
-            {
-                Iterator iterator = animationmetadatasection.getFrameIndexSet().iterator();
+        } else {
+            // All the frames are in a line in the y-direction. Because each frame is square, the height divided by the
+            // width is the total number of frames
+            int numFrames = bufferedimage.getHeight() / this.width;
@@ -296,3 +286,2 @@ public class TextureAtlasSprite
-                while (iterator.hasNext())
-                {
-                    int j = ((Integer)iterator.next()).intValue();
+            if (animationData.getFrameCount() > 0) {
+                Iterator iterator = animationData.getFrameIndexSet().iterator();
@@ -300,3 +289,5 @@ public class TextureAtlasSprite
-                    if (j >= i)
-                    {
-                        throw new RuntimeException("invalid frameindex " + j);
+                while(iterator.hasNext()) {
+                    int frameIndex = ((Integer)iterator.next()).intValue();
+
+                    if(frameIndex >= numFrames) {
+                        throw new RuntimeException("invalid frameindex " + frameIndex);
@@ -305,2 +296,2 @@ public class TextureAtlasSprite
-                    this.allocateFrameTextureData(j);
-                    this.framesTextureData.set(j, getFrameTextureData(aint, this.width, this.width, j));
+                    this.allocateFrameTextureData(frameIndex);
+                    this.framesTextureData.set(frameIndex, getFrameTextureData(textureData, this.width, this.width, frameIndex));
@@ -309,4 +300,2 @@ public class TextureAtlasSprite
-                this.animationMetadata = animationmetadatasection;
-            }
-            else
-            {
+                this.animationMetadata = animationData;
+            } else {
@@ -315,3 +304,2 @@ public class TextureAtlasSprite
-                for (int k = 0; k < i; ++k)
-                {
-                    this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, k));
+                for (int k = 0; k < numFrames; ++k) {
+                    this.framesTextureData.add(getFrameTextureData(textureData, this.width, this.width, k));
@@ -321 +309 @@ public class TextureAtlasSprite
-                this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, animationmetadatasection.getFrameTime(), animationmetadatasection.isInterpolate());
+                this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, animationData.getFrameTime(), animationData.isInterpolate());
@@ -326,2 +314 @@ public class TextureAtlasSprite
-    public void generateMipmaps(int level)
-    {
+    public void generateMipmaps(int level) {
@@ -330,2 +317 @@ public class TextureAtlasSprite
-        for (int i = 0; i < this.framesTextureData.size(); ++i)
-        {
+        for (int i = 0; i < this.framesTextureData.size(); ++i) {
@@ -334,4 +320,2 @@ public class TextureAtlasSprite
-            if (aint != null)
-            {
-                try
-                {
+            if (aint != null) {
+                try {
@@ -339,3 +323 @@ public class TextureAtlasSprite
-                }
-                catch (Throwable throwable)
-                {
+                } catch (Throwable throwable) {
@@ -344,15 +326,7 @@ public class TextureAtlasSprite
-                    crashreportcategory.addCrashSection("Frame index", Integer.valueOf(i));
-                    crashreportcategory.func_189529_a("Frame sizes", new ICrashReportDetail<String>()
-                    {
-                        public String call() throws Exception
-                        {
-                            StringBuilder stringbuilder = new StringBuilder();
-
-                            for (int[] aint1 : aint)
-                            {
-                                if (stringbuilder.length() > 0)
-                                {
-                                    stringbuilder.append(", ");
-                                }
-
-                                stringbuilder.append(aint1 == null ? "null" : Integer.valueOf(aint1.length));
+                    crashreportcategory.addCrashSection("Frame index", i);
+                    crashreportcategory.func_189529_a("Frame sizes", () -> {
+                        StringBuilder stringbuilder = new StringBuilder();
+
+                        for (int[] aint1 : aint) {
+                            if(stringbuilder.length() > 0) {
+                                stringbuilder.append(", ");
@@ -361 +335 @@ public class TextureAtlasSprite
-                            return stringbuilder.toString();
+                            stringbuilder.append(aint1 == null ? "null" : Integer.valueOf(aint1.length));
@@ -362,0 +337,2 @@ public class TextureAtlasSprite
+
+                        return stringbuilder.toString();
@@ -372,6 +348,3 @@ public class TextureAtlasSprite
-    private void allocateFrameTextureData(int index)
-    {
-        if (this.framesTextureData.size() <= index)
-        {
-            for (int i = this.framesTextureData.size(); i <= index; ++i)
-            {
+    private void allocateFrameTextureData(int index) {
+        if (this.framesTextureData.size() <= index) {
+            for (int i = this.framesTextureData.size(); i <= index; ++i) {
@@ -383,2 +356 @@ public class TextureAtlasSprite
-    private static int[][] getFrameTextureData(int[][] data, int rows, int columns, int p_147962_3_)
-    {
+    private static int[][] getFrameTextureData(int[][] data, int rows, int columns, int p_147962_3_) {
@@ -387,2 +359 @@ public class TextureAtlasSprite
-        for (int i = 0; i < data.length; ++i)
-        {
+        for (int i = 0; i < data.length; ++i) {
@@ -391,2 +362 @@ public class TextureAtlasSprite
-            if (aint1 != null)
-            {
+            if (aint1 != null) {
@@ -411,2 +381 @@ public class TextureAtlasSprite
-    public void setFramesTextureData(List<int[][]> newFramesTextureData)
-    {
+    public void setFramesTextureData(List<int[][]> newFramesTextureData) {
@@ -416,2 +385 @@ public class TextureAtlasSprite
-    private void resetSprite()
-    {
+    private void resetSprite() {
@@ -424,2 +392 @@ public class TextureAtlasSprite
-    public String toString()
-    {
+    public String toString() {
diff --git a/minecraft/client/renderer/texture/TextureManager.java b/minecraft/client/renderer/texture/TextureManager.java
index e05a522..26ad475 100644
--- a/minecraft/client/renderer/texture/TextureManager.java
+++ b/minecraft/client/renderer/texture/TextureManager.java
@@ -62,7 +62,4 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-        try
-        {
-            ((ITextureObject)textureObj).loadTexture(this.theResourceManager);
-        }
-        catch (IOException ioexception)
-        {
-            LOGGER.warn("Failed to load texture: {}", new Object[] {textureLocation, ioexception});
+        try {
+            textureObj.loadTexture(this.theResourceManager);
+        } catch (IOException ioexception) {
+            LOGGER.warn("Failed to load texture: {}", textureLocation, ioexception);
@@ -72,3 +69 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
@@ -79,7 +74 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-            crashreportcategory.func_189529_a("Texture object class", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
-                    return textureObjf.getClass().getName();
-                }
-            });
+            crashreportcategory.func_189529_a("Texture object class", () -> textureObjf.getClass().getName());
@@ -95 +84 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-        return (ITextureObject)this.mapTextureObjects.get(textureLocation);
+        return this.mapTextureObjects.get(textureLocation);
@@ -100 +89 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-        Integer integer = (Integer)this.mapTextureCounters.get(name);
+        Integer integer = this.mapTextureCounters.get(name);
@@ -104 +93 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-            integer = Integer.valueOf(1);
+            integer = 1;
@@ -108 +97 @@ public class TextureManager implements ITickable, IResourceManagerReloadListener
-            integer = Integer.valueOf(integer.intValue() + 1);
+            integer = integer + 1;
diff --git a/minecraft/client/renderer/texture/TextureMap.java b/minecraft/client/renderer/texture/TextureMap.java
index 9d91fa2..aaa4b06 100644
--- a/minecraft/client/renderer/texture/TextureMap.java
+++ b/minecraft/client/renderer/texture/TextureMap.java
@@ -2,0 +3 @@ package net.minecraft.client.renderer.texture;
+import com.continuum.nova.gui.MemoryTextureAtlasSprite;
@@ -5 +6 @@ import com.google.common.collect.Maps;
-import java.io.Closeable;
+
@@ -9,0 +11 @@ import java.util.Map.Entry;
+import java.util.Optional;
@@ -12 +13,0 @@ import net.minecraft.client.Minecraft;
-import net.minecraft.client.renderer.StitcherException;
@@ -17 +17,0 @@ import net.minecraft.crash.CrashReportCategory;
-import net.minecraft.crash.ICrashReportDetail;
@@ -21 +20,0 @@ import net.minecraft.util.math.MathHelper;
-import org.apache.commons.io.IOUtils;
@@ -25,2 +24,4 @@ import org.apache.logging.log4j.Logger;
-public class TextureMap extends AbstractTexture implements ITickableTextureObject
-{
+/**
+ * Generates a texture atlas through what's honestly too complicated of a process, then uploads that texture to the GPU
+ */
+public class TextureMap extends AbstractTexture implements ITickableTextureObject {
@@ -36,0 +38 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
+    private Optional<TextureAtlasSprite> whiteImage = Optional.empty();
@@ -38,3 +40,5 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public TextureMap(String basePathIn)
-    {
-        this(basePathIn, (ITextureMapPopulator)null);
+    private int width;
+    private int height;
+
+    public TextureMap(String basePathIn) {
+        this(basePathIn, null);
@@ -43,2 +47 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public TextureMap(String basePathIn, @Nullable ITextureMapPopulator iconCreatorIn)
-    {
+    public TextureMap(String basePathIn, @Nullable ITextureMapPopulator iconCreatorIn) {
@@ -53,3 +56,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    private void initMissingImage()
-    {
-        int[] aint = TextureUtil.MISSING_TEXTURE_DATA;
+    private void initMissingImage() {
+        int[] missingTextureData = TextureUtil.MISSING_TEXTURE_DATA;
@@ -58,3 +60,3 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        int[][] aint1 = new int[this.mipmapLevels + 1][];
-        aint1[0] = aint;
-        this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][][] {aint1}));
+        int[][] textureData = new int[this.mipmapLevels + 1][];
+        textureData[0] = missingTextureData;
+        this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][][] {textureData}));
@@ -63,4 +65,3 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public void loadTexture(IResourceManager resourceManager) throws IOException
-    {
-        if (this.iconCreator != null)
-        {
+    @Override
+    public void loadTexture(IResourceManager resourceManager) throws IOException {
+        if (this.iconCreator != null) {
@@ -71,2 +72,6 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public void loadSprites(IResourceManager resourceManager, ITextureMapPopulator iconCreatorIn)
-    {
+    /**
+     * To any future maintainers of Nova: USE THIS METHOD! Do not use #loadTexture(IResourceManager) from above, it is a
+     * horrible method. It will not work unless you've called #TextureMap(String, ITextureMapPopulator) even though you
+     * might think it would work. Save yourself the trouble and never call #loadTexture(IResourceManager)
+     */
+    public void loadSprites(IResourceManager resourceManager, ITextureMapPopulator iconCreatorIn) {
@@ -80,2 +85 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public void loadTextureAtlas(IResourceManager resourceManager)
-    {
+    private void loadTextureAtlas(IResourceManager resourceManager) {
@@ -87 +91 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        int k = 1 << this.mipmapLevels;
+        int mipLevel0Size = 1 << this.mipmapLevels;
@@ -89,27 +93,4 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        for (Entry<String, TextureAtlasSprite> entry : this.mapRegisteredSprites.entrySet())
-        {
-            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
-            ResourceLocation resourcelocation = this.getResourceLocation(textureatlassprite);
-            IResource iresource = null;
-
-            try
-            {
-                PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
-                iresource = resourceManager.getResource(resourcelocation);
-                boolean flag = iresource.getMetadata("animation") != null;
-                textureatlassprite.loadSprite(pngsizeinfo, flag);
-            }
-            catch (RuntimeException runtimeexception)
-            {
-                LOGGER.error("Unable to parse metadata from {}", new Object[] {resourcelocation, runtimeexception});
-                continue;
-            }
-            catch (IOException ioexception)
-            {
-                LOGGER.error("Using missing texture, unable to load {}", new Object[] {resourcelocation, ioexception});
-                continue;
-            }
-            finally
-            {
-                IOUtils.closeQuietly((Closeable)iresource);
-            }
+        for(Entry<String, TextureAtlasSprite> entry : this.mapRegisteredSprites.entrySet()) {
+            TextureAtlasSprite sprite = entry.getValue();
+            ResourceLocation spriteLocation = this.getResourceLocation(sprite);
+            sprite.setLocation(spriteLocation);
@@ -117,2 +98,4 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            j = Math.min(j, Math.min(textureatlassprite.getIconWidth(), textureatlassprite.getIconHeight()));
-            int lvt_11_2_ = Math.min(Integer.lowestOneBit(textureatlassprite.getIconWidth()), Integer.lowestOneBit(textureatlassprite.getIconHeight()));
+            try(IResource spriteResource = resourceManager.getResource(spriteLocation)) {
+                PngSizeInfo spriteSizeInfo = PngSizeInfo.makeFromResource(spriteResource);
+                boolean isAnimated = spriteResource.getMetadata("animation") != null;
+                sprite.setAndValidateSize(spriteSizeInfo, isAnimated);
@@ -120,5 +103,8 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            if (lvt_11_2_ < k)
-            {
-                LOGGER.warn("Texture {} with size {}x{} limits mip level from {} to {}", new Object[] {resourcelocation, Integer.valueOf(textureatlassprite.getIconWidth()), Integer.valueOf(textureatlassprite.getIconHeight()), Integer.valueOf(MathHelper.calculateLogBaseTwo(k)), Integer.valueOf(MathHelper.calculateLogBaseTwo(lvt_11_2_))});
-                k = lvt_11_2_;
-            }
+                // Moved this code up to remove the continue statements
+                j = Math.min(j, Math.min(sprite.getIconWidth(), sprite.getIconHeight()));
+                int lvt_11_2_ = Math.min(Integer.lowestOneBit(sprite.getIconWidth()), Integer.lowestOneBit(sprite.getIconHeight()));
+
+                if (lvt_11_2_ < mipLevel0Size) {
+                    LOGGER.warn("Texture {} with size {}x{} limits mip level from {} to {}", spriteLocation, sprite.getIconWidth(), sprite.getIconHeight(), MathHelper.calculateLogBaseTwo(mipLevel0Size), MathHelper.calculateLogBaseTwo(lvt_11_2_));
+                    mipLevel0Size = lvt_11_2_;
+                }
@@ -126 +112,9 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            stitcher.addSprite(textureatlassprite);
+                stitcher.addSprite(sprite);
+
+            } catch (RuntimeException runtimeexception) {
+                LOGGER.error("Unable to parse metadata from {}", spriteLocation, runtimeexception);
+
+            } catch (IOException ioexception) {
+                LOGGER.error("Using missing texture, unable to load {}", spriteLocation, ioexception);
+
+            }
@@ -129 +123 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        int l = Math.min(j, k);
+        int l = Math.min(j, mipLevel0Size);
@@ -132,3 +126,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        if (i1 < this.mipmapLevels)
-        {
-            LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(i1), Integer.valueOf(l)});
+        if (i1 < this.mipmapLevels) {
+            LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.basePath, this.mipmapLevels, i1, l);
@@ -141,8 +134 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        try
-        {
-            stitcher.doStitch();
-        }
-        catch (StitcherException stitcherexception)
-        {
-            throw stitcherexception;
-        }
+        whiteImage.ifPresent(stitcher::addSprite);
@@ -150 +136,6 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        LOGGER.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.getCurrentWidth()), Integer.valueOf(stitcher.getCurrentHeight()), this.basePath});
+        stitcher.doStitch();
+
+        width = stitcher.getCurrentWidth();
+        height = stitcher.getCurrentHeight();
+
+        LOGGER.info("Created: {}x{} {}-atlas", stitcher.getCurrentWidth(), stitcher.getCurrentHeight(), this.basePath);
@@ -154,4 +145,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        for (TextureAtlasSprite textureatlassprite1 : stitcher.getStichSlots())
-        {
-            if (textureatlassprite1 == this.missingImage || this.generateMipmaps(resourceManager, textureatlassprite1))
-            {
+        for (TextureAtlasSprite textureatlassprite1 : stitcher.getStichSlots()) {
+            if (textureatlassprite1 == this.missingImage || this.generateMipmaps(resourceManager, textureatlassprite1)) {
@@ -162,15 +151 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-                try
-                {
-                    TextureUtil.uploadTextureMipmap(textureatlassprite1.getFrameTextureData(0), textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight(), textureatlassprite1.getOriginX(), textureatlassprite1.getOriginY(), false, false);
-                }
-                catch (Throwable throwable)
-                {
-                    CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
-                    CrashReportCategory crashreportcategory = crashreport.makeCategory("Texture being stitched together");
-                    crashreportcategory.addCrashSection("Atlas path", this.basePath);
-                    crashreportcategory.addCrashSection("Sprite", textureatlassprite1);
-                    throw new ReportedException(crashreport);
-                }
-
-                if (textureatlassprite1.hasAnimationMetadata())
-                {
+                if (textureatlassprite1.hasAnimationMetadata()) {
@@ -182,2 +157 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        for (TextureAtlasSprite textureatlassprite2 : map.values())
-        {
+        for (TextureAtlasSprite textureatlassprite2 : map.values()) {
@@ -188,2 +162 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    private boolean generateMipmaps(IResourceManager resourceManager, final TextureAtlasSprite texture)
-    {
+    private boolean generateMipmaps(IResourceManager resourceManager, final TextureAtlasSprite texture) {
@@ -191 +163,0 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        IResource iresource = null;
@@ -196,3 +168 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            try
-            {
-                iresource = resourceManager.getResource(resourcelocation);
+            try(IResource iresource = resourceManager.getResource(resourcelocation)) {
@@ -201,4 +171,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            }
-            catch (RuntimeException runtimeexception)
-            {
-                LOGGER.error("Unable to parse metadata from {}", new Object[] {resourcelocation, runtimeexception});
+            } catch (RuntimeException runtimeexception) {
+                LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
@@ -206,4 +174,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            }
-            catch (IOException ioexception)
-            {
-                LOGGER.error("Using missing texture, unable to load {}", new Object[] {resourcelocation, ioexception});
+            } catch (IOException ioexception) {
+                LOGGER.error("Using missing texture, unable to load {}", resourcelocation, ioexception);
@@ -213,4 +178,0 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            finally
-            {
-                IOUtils.closeQuietly((Closeable)iresource);
-            }
@@ -221,2 +183 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        try
-        {
+        try {
@@ -225,3 +186 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
@@ -230,22 +189,4 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            crashreportcategory.func_189529_a("Sprite name", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
-                    return texture.getIconName();
-                }
-            });
-            crashreportcategory.func_189529_a("Sprite size", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
-                    return texture.getIconWidth() + " x " + texture.getIconHeight();
-                }
-            });
-            crashreportcategory.func_189529_a("Sprite frames", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
-                    return texture.getFrameCount() + " frames";
-                }
-            });
-            crashreportcategory.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
+            crashreportcategory.func_189529_a("Sprite name", texture::getIconName);
+            crashreportcategory.func_189529_a("Sprite size", () -> texture.getIconWidth() + " x " + texture.getIconHeight());
+            crashreportcategory.func_189529_a("Sprite frames", () -> texture.getFrameCount() + " frames");
+            crashreportcategory.addCrashSection("Mipmap levels", this.mipmapLevels);
@@ -256,4 +197,3 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    private ResourceLocation getResourceLocation(TextureAtlasSprite p_184396_1_)
-    {
-        ResourceLocation resourcelocation = new ResourceLocation(p_184396_1_.getIconName());
-        return new ResourceLocation(resourcelocation.getResourceDomain(), String.format("%s/%s%s", new Object[] {this.basePath, resourcelocation.getResourcePath(), ".png"}));
+    private ResourceLocation getResourceLocation(TextureAtlasSprite sprite) {
+        ResourceLocation resourcelocation = new ResourceLocation(sprite.getIconName());
+        return new ResourceLocation(resourcelocation.getResourceDomain(), String.format("%s/%s%s", this.basePath, resourcelocation.getResourcePath(), ".png"));
@@ -262,3 +202,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public TextureAtlasSprite getAtlasSprite(String iconName)
-    {
-        TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.mapUploadedSprites.get(iconName);
+    public TextureAtlasSprite getAtlasSprite(String iconName) {
+        TextureAtlasSprite textureatlassprite = this.mapUploadedSprites.get(iconName);
@@ -266,2 +205 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        if (textureatlassprite == null)
-        {
+        if (textureatlassprite == null) {
@@ -274,2 +212 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public void updateAnimations()
-    {
+    private void updateAnimations() {
@@ -278,2 +215 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        for (TextureAtlasSprite textureatlassprite : this.listAnimatedSprites)
-        {
+        for (TextureAtlasSprite textureatlassprite : this.listAnimatedSprites) {
@@ -284,4 +220,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public TextureAtlasSprite registerSprite(ResourceLocation location)
-    {
-        if (location == null)
-        {
+    public TextureAtlasSprite registerSprite(ResourceLocation location) {
+        if(location == null) {
@@ -289,4 +222,0 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-        }
-        else
-        {
-            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.mapRegisteredSprites.get(location);
@@ -294,2 +224,4 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-            if (textureatlassprite == null)
-            {
+        } else {
+            TextureAtlasSprite textureatlassprite = this.mapRegisteredSprites.get(location.toString());
+
+            if(textureatlassprite == null) {
@@ -304,2 +236,2 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
-    public void tick()
-    {
+    @Override
+    public void tick() {
@@ -317,0 +250,34 @@ public class TextureMap extends AbstractTexture implements ITickableTextureObjec
+
+    public int getWidth() {
+        return width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void createWhiteTexture(ResourceLocation textureName) {
+        whiteImage = Optional.of(new MemoryTextureAtlasSprite(textureName.toString()));
+        whiteImage.ifPresent(whiteSprite -> {
+            whiteSprite.setIconHeight(16);
+            whiteSprite.setIconWidth(16);
+
+            int[][] data = new int[mipmapLevels + 1][];
+            for(int mipLevel = 0; mipLevel < mipmapLevels + 1; mipLevel++) {
+                data[mipLevel] = new int[256];
+                for(int i = 0; i < 256; i++) {
+                    data[mipLevel][i] = 0xFFFFFFFF;
+                }
+            }
+
+            whiteSprite.setFramesTextureData(Lists.newArrayList(new int[][][]{data}));
+        });
+    }
+
+    public Optional<TextureAtlasSprite> getWhiteImage() {
+        return whiteImage;
+    }
+
+    public Map<String,TextureAtlasSprite> getMapUploadedSprites() {
+        return mapUploadedSprites;
+    }
diff --git a/minecraft/client/renderer/texture/TextureUtil.java b/minecraft/client/renderer/texture/TextureUtil.java
index b0a0490..2e985b4 100644
--- a/minecraft/client/renderer/texture/TextureUtil.java
+++ b/minecraft/client/renderer/texture/TextureUtil.java
@@ -18,0 +19,4 @@ import org.apache.logging.log4j.Logger;
+import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
+import static org.lwjgl.opengl.GL12.GL_BGRA;
+import static org.lwjgl.opengl.GL12.GL_UNSIGNED_INT_8_8_8_8_REV;
+
@@ -35 +39 @@ public class TextureUtil
-        return GlStateManager.generateTexture();
+        return 0;//GlStateManager.generateTexture();
@@ -48 +52 @@ public class TextureUtil
-    public static void uploadTexture(int textureId, int[] p_110988_1_, int p_110988_2_, int p_110988_3_)
+    public static void uploadTexture(int textureId, int[] data, int width, int height)
@@ -51 +55 @@ public class TextureUtil
-        uploadTextureSub(0, p_110988_1_, p_110988_2_, p_110988_3_, 0, 0, false, false, false);
+        uploadTextureSub(0, data, width, height, 0, 0, false, false, false);
@@ -54 +58 @@ public class TextureUtil
-    public static int[][] generateMipmapData(int p_147949_0_, int p_147949_1_, int[][] p_147949_2_)
+    public static int[][] generateMipmapData(int mipLevel, int width, int[][] imageData)
@@ -56,2 +60,2 @@ public class TextureUtil
-        int[][] aint = new int[p_147949_0_ + 1][];
-        aint[0] = p_147949_2_[0];
+        int[][] aint = new int[mipLevel + 1][];
+        aint[0] = imageData[0];
@@ -59 +63 @@ public class TextureUtil
-        if (p_147949_0_ > 0)
+        if (mipLevel > 0)
@@ -63 +67 @@ public class TextureUtil
-            for (int i = 0; i < p_147949_2_.length; ++i)
+            for (int i = 0; i < imageData.length; ++i)
@@ -65 +69 @@ public class TextureUtil
-                if (p_147949_2_[0][i] >> 24 == 0)
+                if (imageData[0][i] >> 24 == 0)
@@ -72 +76 @@ public class TextureUtil
-            for (int l1 = 1; l1 <= p_147949_0_; ++l1)
+            for (int l1 = 1; l1 <= mipLevel; ++l1)
@@ -74 +78 @@ public class TextureUtil
-                if (p_147949_2_[l1] != null)
+                if (imageData[l1] != null)
@@ -76 +80 @@ public class TextureUtil
-                    aint[l1] = p_147949_2_[l1];
+                    aint[l1] = imageData[l1];
@@ -82 +86 @@ public class TextureUtil
-                    int j = p_147949_1_ >> l1;
+                    int j = width >> l1;
@@ -163 +167 @@ public class TextureUtil
-    public static void uploadTextureMipmap(int[][] p_147955_0_, int p_147955_1_, int p_147955_2_, int p_147955_3_, int p_147955_4_, boolean p_147955_5_, boolean p_147955_6_)
+    public static void uploadTextureMipmap(int[][] textureData, int iconWidth, int iconHeight, int originX, int originY, boolean p_147955_5_, boolean p_147955_6_)
@@ -165 +169 @@ public class TextureUtil
-        for (int i = 0; i < p_147955_0_.length; ++i)
+        for (int i = 0; i < textureData.length; ++i)
@@ -167,2 +171,2 @@ public class TextureUtil
-            int[] aint = p_147955_0_[i];
-            uploadTextureSub(i, aint, p_147955_1_ >> i, p_147955_2_ >> i, p_147955_3_ >> i, p_147955_4_ >> i, p_147955_5_, p_147955_6_, p_147955_0_.length > 1);
+            int[] aint = textureData[i];
+            uploadTextureSub(i, aint, iconWidth >> i, iconHeight >> i, originX >> i, originY >> i, p_147955_5_, p_147955_6_, textureData.length > 1);
@@ -172 +176 @@ public class TextureUtil
-    private static void uploadTextureSub(int p_147947_0_, int[] p_147947_1_, int p_147947_2_, int p_147947_3_, int p_147947_4_, int p_147947_5_, boolean p_147947_6_, boolean p_147947_7_, boolean p_147947_8_)
+    private static void uploadTextureSub(int mipLevelMaybe, int[] textureData, int width, int heigth, int x, int y, boolean p_147947_6_, boolean clamped, boolean p_147947_8_)
@@ -174 +178 @@ public class TextureUtil
-        int i = 4194304 / p_147947_2_;
+        int i = 4194304 / width;
@@ -176 +180 @@ public class TextureUtil
-        setTextureClamped(p_147947_7_);
+        setTextureClamped(clamped);
@@ -179 +183 @@ public class TextureUtil
-        for (int j = 0; j < p_147947_2_ * p_147947_3_; j += p_147947_2_ * l)
+        for (int j = 0; j < width * heigth; j += width * l)
@@ -181,5 +185,5 @@ public class TextureUtil
-            int k = j / p_147947_2_;
-            l = Math.min(i, p_147947_3_ - k);
-            int i1 = p_147947_2_ * l;
-            copyToBufferPos(p_147947_1_, j, i1);
-            GlStateManager.glTexSubImage2D(3553, p_147947_0_, p_147947_4_, p_147947_5_ + k, p_147947_2_, l, 32993, 33639, DATA_BUFFER);
+            int k = j / width;
+            l = Math.min(i, heigth - k);
+            int i1 = width * l;
+            copyToBufferPos(textureData, j, i1);
+            GlStateManager.glTexSubImage2D(GL_TEXTURE_2D, mipLevelMaybe, x, y + k, width, l, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, DATA_BUFFER);
@@ -200,4 +204,3 @@ public class TextureUtil
-    public static void allocateTextureImpl(int p_180600_0_, int p_180600_1_, int p_180600_2_, int p_180600_3_)
-    {
-        deleteTexture(p_180600_0_);
-        bindTexture(p_180600_0_);
+    public static void allocateTextureImpl(int glTextureName, int mipmapLevels, int width, int height) {
+        deleteTexture(glTextureName);
+        bindTexture(glTextureName);
@@ -205,3 +208,2 @@ public class TextureUtil
-        if (p_180600_1_ >= 0)
-        {
-            GlStateManager.glTexParameteri(3553, 33085, p_180600_1_);
+        if(mipmapLevels >= 0) {
+            GlStateManager.glTexParameteri(3553, 33085, mipmapLevels);
@@ -209 +211 @@ public class TextureUtil
-            GlStateManager.glTexParameteri(3553, 33083, p_180600_1_);
+            GlStateManager.glTexParameteri(3553, 33083, mipmapLevels);
@@ -213,3 +215,2 @@ public class TextureUtil
-        for (int i = 0; i <= p_180600_1_; ++i)
-        {
-            GlStateManager.glTexImage2D(3553, i, 6408, p_180600_2_ >> i, p_180600_3_ >> i, 0, 32993, 33639, (IntBuffer)null);
+        for(int i = 0; i <= mipmapLevels; ++i) {
+            GlStateManager.glTexImage2D(3553, i, 6408, width >> i, height >> i, 0, 32993, 33639, (IntBuffer)null);
@@ -326,2 +327 @@ public class TextureUtil
-    public static BufferedImage readBufferedImage(InputStream imageStream) throws IOException
-    {
+    public static BufferedImage readBufferedImage(InputStream imageStream) throws IOException {
@@ -330,2 +330 @@ public class TextureUtil
-        try
-        {
+        try {
@@ -333,3 +332 @@ public class TextureUtil
-        }
-        finally
-        {
+        } finally {
@@ -342,2 +339 @@ public class TextureUtil
-    public static int[] updateAnaglyph(int[] p_110985_0_)
-    {
+    public static int[] updateAnaglyph(int[] p_110985_0_) {
@@ -346,2 +342 @@ public class TextureUtil
-        for (int i = 0; i < p_110985_0_.length; ++i)
-        {
+        for (int i = 0; i < p_110985_0_.length; ++i) {
@@ -354,10 +349,9 @@ public class TextureUtil
-    public static int anaglyphColor(int p_177054_0_)
-    {
-        int i = p_177054_0_ >> 24 & 255;
-        int j = p_177054_0_ >> 16 & 255;
-        int k = p_177054_0_ >> 8 & 255;
-        int l = p_177054_0_ & 255;
-        int i1 = (j * 30 + k * 59 + l * 11) / 100;
-        int j1 = (j * 30 + k * 70) / 100;
-        int k1 = (j * 30 + l * 70) / 100;
-        return i << 24 | i1 << 16 | j1 << 8 | k1;
+    public static int anaglyphColor(int color) {
+        int alpha = color >> 24 & 255;
+        int red = color >> 16 & 255;
+        int green = color >> 8 & 255;
+        int blue = color & 255;
+        int redOut = (red * 30 + green * 59 + blue * 11) / 100;
+        int greenOut = (red * 30 + green * 70) / 100;
+        int blueOut = (red * 30 + blue * 70) / 100;
+        return alpha << 24 | redOut << 16 | greenOut << 8 | blueOut;
@@ -366,2 +360 @@ public class TextureUtil
-    public static void processPixelValues(int[] p_147953_0_, int p_147953_1_, int p_147953_2_)
-    {
+    public static void processPixelValues(int[] p_147953_0_, int p_147953_1_, int p_147953_2_) {
@@ -371,2 +364 @@ public class TextureUtil
-        for (int j = 0; j < i; ++j)
-        {
+        for (int j = 0; j < i; ++j) {
diff --git a/minecraft/client/renderer/tileentity/TileEntityItemStackRenderer.java b/minecraft/client/renderer/tileentity/TileEntityItemStackRenderer.java
index 3a8257f..b1e3b5e 100644
--- a/minecraft/client/renderer/tileentity/TileEntityItemStackRenderer.java
+++ b/minecraft/client/renderer/tileentity/TileEntityItemStackRenderer.java
@@ -44 +44 @@ public class TileEntityItemStackRenderer
-                Minecraft.getMinecraft().getTextureManager().bindTexture(BannerTextures.SHIELD_DESIGNS.getResourceLocation(this.banner.getPatternResourceLocation(), this.banner.getPatternList(), this.banner.getColorList()));
+                Minecraft.getMinecraft().getRenderEngine().bindTexture(BannerTextures.SHIELD_DESIGNS.getResourceLocation(this.banner.getPatternResourceLocation(), this.banner.getPatternList(), this.banner.getColorList()));
@@ -48 +48 @@ public class TileEntityItemStackRenderer
-                Minecraft.getMinecraft().getTextureManager().bindTexture(BannerTextures.SHIELD_BASE_TEXTURE);
+                Minecraft.getMinecraft().getRenderEngine().bindTexture(BannerTextures.SHIELD_BASE_TEXTURE);
diff --git a/minecraft/client/resources/DefaultResourcePack.java b/minecraft/client/resources/DefaultResourcePack.java
index a1adb4b..c4df3ef 100644
--- a/minecraft/client/resources/DefaultResourcePack.java
+++ b/minecraft/client/resources/DefaultResourcePack.java
@@ -30 +29,0 @@ public class DefaultResourcePack implements IResourcePack
-
@@ -35,3 +33,0 @@ public class DefaultResourcePack implements IResourcePack
-        else
-        {
-            InputStream inputstream1 = this.getInputStreamAssets(location);
@@ -39,8 +35,4 @@ public class DefaultResourcePack implements IResourcePack
-            if (inputstream1 != null)
-            {
-                return inputstream1;
-            }
-            else
-            {
-                throw new FileNotFoundException(location.getResourcePath());
-            }
+        inputstream = this.getInputStreamAssets(location);
+        if (inputstream != null)
+        {
+            return inputstream;
@@ -47,0 +40,2 @@ public class DefaultResourcePack implements IResourcePack
+
+        return new FileResource(location).getInputStream();
diff --git a/minecraft/client/resources/FallbackResourceManager.java b/minecraft/client/resources/FallbackResourceManager.java
index 3ff1b01..ca7b0c6 100644
--- a/minecraft/client/resources/FallbackResourceManager.java
+++ b/minecraft/client/resources/FallbackResourceManager.java
@@ -8,0 +9 @@ import java.io.PrintStream;
+import java.util.Arrays;
@@ -10,0 +12,2 @@ import java.util.Set;
+import java.util.Stack;
+
@@ -12,0 +16 @@ import net.minecraft.util.ResourceLocation;
+import org.apache.commons.lang3.StringUtils;
@@ -111,0 +116,11 @@ public class FallbackResourceManager implements IResourceManager
+    /**
+     * I guess like it makes a stack trace of where it was created so that if #finalize ever gets called then it'll
+     * log that it was leaked? Not entirely sure. I do know that it's considered bad practice to rely on #finalize
+     * cause like some GCs won't call it? But then we have to get into JVM GCs and I've stayed away from them for six
+     * years and I'm not going to stop that now
+     *
+     * <p>But yeah I don't really get this class. It seems like all the resource InputStreams are wrapped in this class
+     * so I guess Mojang ran into a lot of resource leaks and they're trying to catch them all</p>
+     *
+     * <p>This class wraps InputStream, which is fine, but it also extends InputStream. Why?</p>
+     */
diff --git a/minecraft/client/resources/FileResource.java b/minecraft/client/resources/FileResource.java
new file mode 100644
index 0000000..984b3e7
--- /dev/null
+++ b/minecraft/client/resources/FileResource.java
@@ -0,0 +1,65 @@
+package net.minecraft.client.resources;
+
+import net.minecraft.client.resources.data.IMetadataSection;
+import net.minecraft.util.ResourceLocation;
+
+import javax.annotation.Nullable;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+
+/**
+ * Created by Tobias Schulz on 1/31/2017.
+ */
+public class FileResource implements IResource {
+    ResourceLocation location;
+
+    public FileResource(ResourceLocation location) {
+        this.location = location;
+    }
+
+    public ResourceLocation getResourceLocation() {
+        return location;
+    }
+
+    public InputStream getInputStream() {
+        String[] assetPaths = new String[] {
+                "assets",
+                "temp/src/minecraft/assets/minecraft",
+                "../assets",
+                "../temp/src/minecraft/assets/minecraft",
+        };
+
+        InputStream inputstream;
+
+        for (String assetPath : assetPaths) {
+            //System.out.println(location.getResourcePath());
+            try {
+                inputstream = new FileInputStream(assetPath + "/" + location.getResourcePath());
+                if (inputstream != null) {
+                    return inputstream;
+                }
+            } catch (Exception ex) {}
+        }
+        //System.out.println("not found"+location.getResourcePath());
+
+        return null;
+        // throw new FileNotFoundException(location.getResourcePath());
+    }
+
+    public boolean hasMetadata() {
+        return false;
+    }
+
+    @Nullable
+    public <T extends IMetadataSection> T getMetadata(String sectionName) {
+        return null;
+    }
+
+    public String getResourcePackName() {
+        return "";
+    }
+
+    public void close() {
+    }
+}
diff --git a/minecraft/client/resources/ResourcePackListEntry.java b/minecraft/client/resources/ResourcePackListEntry.java
index f55f8fc..f2c0e7c 100644
--- a/minecraft/client/resources/ResourcePackListEntry.java
+++ b/minecraft/client/resources/ResourcePackListEntry.java
@@ -48 +48 @@ public abstract class ResourcePackListEntry implements GuiListExtended.IGuiListE
-            this.mc.getTextureManager().bindTexture(RESOURCE_PACKS_TEXTURE);
+            this.mc.getRenderEngine().bindTexture(RESOURCE_PACKS_TEXTURE);
diff --git a/minecraft/client/resources/ResourcePackListEntryFound.java b/minecraft/client/resources/ResourcePackListEntryFound.java
index 02cb62c..b386d0b 100644
--- a/minecraft/client/resources/ResourcePackListEntryFound.java
+++ b/minecraft/client/resources/ResourcePackListEntryFound.java
@@ -17 +17 @@ public class ResourcePackListEntryFound extends ResourcePackListEntry
-        this.resourcePackEntry.bindTexturePackIcon(this.mc.getTextureManager());
+        this.resourcePackEntry.bindTexturePackIcon(this.mc.getRenderEngine());
diff --git a/minecraft/client/resources/ResourcePackListEntryServer.java b/minecraft/client/resources/ResourcePackListEntryServer.java
index 3ec5b72..4d40193 100644
--- a/minecraft/client/resources/ResourcePackListEntryServer.java
+++ b/minecraft/client/resources/ResourcePackListEntryServer.java
@@ -35 +35 @@ public class ResourcePackListEntryServer extends ResourcePackListEntry
-        this.resourcePackIcon = this.mc.getTextureManager().getDynamicTextureLocation("texturepackicon", dynamictexture);
+        this.resourcePackIcon = this.mc.getRenderEngine().getDynamicTextureLocation("texturepackicon", dynamictexture);
@@ -93 +93 @@ public class ResourcePackListEntryServer extends ResourcePackListEntry
-        this.mc.getTextureManager().bindTexture(this.resourcePackIcon);
+        this.mc.getRenderEngine().bindTexture(this.resourcePackIcon);
diff --git a/minecraft/client/resources/SimpleReloadableResourceManager.java b/minecraft/client/resources/SimpleReloadableResourceManager.java
index 85ca400..e905295 100644
--- a/minecraft/client/resources/SimpleReloadableResourceManager.java
+++ b/minecraft/client/resources/SimpleReloadableResourceManager.java
@@ -11,3 +11,2 @@ import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.nio.file.FileStore;
+import java.util.*;
@@ -62 +61,5 @@ public class SimpleReloadableResourceManager implements IReloadableResourceManag
-            return iresourcemanager.getResource(location);
+            try {
+                return iresourcemanager.getResource(location);
+            } catch (IOException ex) {
+                return new FileResource(location);
+            }
@@ -66 +69 @@ public class SimpleReloadableResourceManager implements IReloadableResourceManag
-            throw new FileNotFoundException(location.toString());
+            return new FileResource(location);
@@ -76 +79,5 @@ public class SimpleReloadableResourceManager implements IReloadableResourceManag
-            return iresourcemanager.getAllResources(location);
+            try {
+                return iresourcemanager.getAllResources(location);
+            } catch (IOException ex) {
+                return Collections.singletonList(new FileResource(location));
+            }
@@ -80 +87 @@ public class SimpleReloadableResourceManager implements IReloadableResourceManag
-            throw new FileNotFoundException(location.toString());
+            return Collections.singletonList(new FileResource(location));
diff --git a/minecraft/client/resources/SimpleResource.java b/minecraft/client/resources/SimpleResource.java
index 5db0ced..2dfd556 100644
--- a/minecraft/client/resources/SimpleResource.java
+++ b/minecraft/client/resources/SimpleResource.java
@@ -6,8 +5,0 @@ import com.google.gson.JsonParser;
-import java.io.BufferedReader;
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.util.Map;
-import javax.annotation.Nullable;
@@ -17,0 +10,7 @@ import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
+import java.io.*;
+import java.util.Map;
@@ -18,0 +18 @@ import org.apache.commons.io.IOUtils;
+@SuppressWarnings("ALL")
@@ -20,0 +21,2 @@ public class SimpleResource implements IResource, Closeable
+    private static final Logger LOG = LogManager.getLogger(SimpleResource.class);
+
diff --git a/minecraft/client/settings/GameSettings.java b/minecraft/client/settings/GameSettings.java
index 206bf51..ad384fe 100644
--- a/minecraft/client/settings/GameSettings.java
+++ b/minecraft/client/settings/GameSettings.java
@@ -38,2 +38,2 @@ import org.apache.logging.log4j.Logger;
-import org.lwjgl.input.Keyboard;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.input.Keyboard;
+import com.continuum.nova.input.Mouse;
@@ -298 +298 @@ public class GameSettings
-                this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+                this.mc.getRenderEngine().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
diff --git a/minecraft/client/settings/KeyBinding.java b/minecraft/client/settings/KeyBinding.java
index b4047b4..6178d2f 100644
--- a/minecraft/client/settings/KeyBinding.java
+++ b/minecraft/client/settings/KeyBinding.java
@@ -9 +9 @@ import net.minecraft.util.IntHashMap;
-import org.lwjgl.input.Keyboard;
+import com.continuum.nova.input.Keyboard;
diff --git a/minecraft/entity/Entity.java b/minecraft/entity/Entity.java
index 40eb661..66260a0 100644
--- a/minecraft/entity/Entity.java
+++ b/minecraft/entity/Entity.java
@@ -78,0 +79 @@ import org.apache.logging.log4j.Logger;
+@SuppressWarnings("ALL")
diff --git a/minecraft/realms/RealmsScreen.java b/minecraft/realms/RealmsScreen.java
index eb26abb..70860b2 100644
--- a/minecraft/realms/RealmsScreen.java
+++ b/minecraft/realms/RealmsScreen.java
@@ -127 +127 @@ public class RealmsScreen
-        Minecraft.getMinecraft().getTextureManager().bindTexture(resourcelocation);
+        Minecraft.getMinecraft().getRenderEngine().bindTexture(resourcelocation);
@@ -133 +133 @@ public class RealmsScreen
-        Minecraft.getMinecraft().getTextureManager().bindTexture(resourcelocation);
+        Minecraft.getMinecraft().getRenderEngine().bindTexture(resourcelocation);
diff --git a/minecraft/realms/RealmsSliderButton.java b/minecraft/realms/RealmsSliderButton.java
index 5689591..259ef8e 100644
--- a/minecraft/realms/RealmsSliderButton.java
+++ b/minecraft/realms/RealmsSliderButton.java
@@ -80 +80 @@ public class RealmsSliderButton extends RealmsButton
-            Minecraft.getMinecraft().getTextureManager().bindTexture(WIDGETS_LOCATION);
+            Minecraft.getMinecraft().getRenderEngine().bindTexture(WIDGETS_LOCATION);
diff --git a/minecraft/server/MinecraftServer.java b/minecraft/server/MinecraftServer.java
index e93d28d..b0206c7 100644
--- a/minecraft/server/MinecraftServer.java
+++ b/minecraft/server/MinecraftServer.java
@@ -216,0 +217 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+                @Override
@@ -219,0 +221 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+                @Override
@@ -222,0 +225 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+                @Override
@@ -230,0 +234 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+                @Override
@@ -233,0 +238 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+                @Override
@@ -510,0 +516 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -900,0 +907 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+            @Override
@@ -910,0 +918 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+                @Override
@@ -977,0 +986 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -985,0 +995 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -993,0 +1004 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1129,0 +1141 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1170,0 +1183 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1181,0 +1195 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1334,0 +1349 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1343,0 +1359 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1352,0 +1369 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1360,0 +1378 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1398,0 +1417 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1455,0 +1475 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1460,0 +1481 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1467,0 +1489 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1504,0 +1527 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
@@ -1510,0 +1534 @@ public abstract class MinecraftServer implements Runnable, ICommandSender, IThre
+    @Override
diff --git a/minecraft/server/integrated/IntegratedServer.java b/minecraft/server/integrated/IntegratedServer.java
index b4d740e..c2383f1 100644
--- a/minecraft/server/integrated/IntegratedServer.java
+++ b/minecraft/server/integrated/IntegratedServer.java
@@ -62,0 +63 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -67,0 +69 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -133,0 +136 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -151,0 +155 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -209,0 +214 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -214,0 +220 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -222,0 +229 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -230,0 +238 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -238,0 +247 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -246,0 +256 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -254,0 +265 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -259,0 +271 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -264,0 +277 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -273,0 +287 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -281,0 +296 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -289,0 +305 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -294,0 +311 @@ public class IntegratedServer extends MinecraftServer
+            @Override
@@ -301,0 +319 @@ public class IntegratedServer extends MinecraftServer
+            @Override
@@ -319,0 +338 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -329,0 +349 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -338,0 +359 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -346,0 +368 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -385,0 +408 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -399,0 +423 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -403,0 +428 @@ public class IntegratedServer extends MinecraftServer
+            @Override
@@ -431,0 +457 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -440,0 +467 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -445,0 +473 @@ public class IntegratedServer extends MinecraftServer
+    @Override
@@ -460,0 +489 @@ public class IntegratedServer extends MinecraftServer
+                @Override
diff --git a/minecraft/util/MouseHelper.java b/minecraft/util/MouseHelper.java
index b1f84cc..b59f0e2 100644
--- a/minecraft/util/MouseHelper.java
+++ b/minecraft/util/MouseHelper.java
@@ -3 +3,4 @@ package net.minecraft.util;
-import org.lwjgl.input.Mouse;
+import com.continuum.nova.NovaNative;
+import com.continuum.nova.input.Mouse;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
@@ -7,0 +11 @@ public class MouseHelper
+    private static final Logger LOG = LogManager.getLogger(MouseHelper.class);
diff --git a/minecraft/util/ResourceLocation.java b/minecraft/util/ResourceLocation.java
index 0bdece0..74bea80 100644
--- a/minecraft/util/ResourceLocation.java
+++ b/minecraft/util/ResourceLocation.java
@@ -5,2 +5 @@ import org.apache.commons.lang3.Validate;
-public class ResourceLocation
-{
+public class ResourceLocation {
@@ -10,2 +9 @@ public class ResourceLocation
-    protected ResourceLocation(int unused, String... resourceName)
-    {
+    protected ResourceLocation(int unused, String... resourceName) {
@@ -17,2 +15 @@ public class ResourceLocation
-    public ResourceLocation(String resourceName)
-    {
+    public ResourceLocation(String resourceName) {
@@ -22,3 +19,2 @@ public class ResourceLocation
-    public ResourceLocation(String resourceDomainIn, String resourcePathIn)
-    {
-        this(0, new String[] {resourceDomainIn, resourcePathIn});
+    public ResourceLocation(String resourceDomainIn, String resourcePathIn) {
+        this(0, resourceDomainIn, resourcePathIn);
@@ -31,2 +27 @@ public class ResourceLocation
-    protected static String[] splitObjectName(String toSplit)
-    {
+    protected static String[] splitObjectName(String toSplit) {
@@ -36,2 +31 @@ public class ResourceLocation
-        if (i >= 0)
-        {
+        if (i >= 0) {
@@ -40,2 +34 @@ public class ResourceLocation
-            if (i > 1)
-            {
+            if (i > 1) {
@@ -58,0 +52 @@ public class ResourceLocation
+    @Override
@@ -64,4 +58,3 @@ public class ResourceLocation
-    public boolean equals(Object p_equals_1_)
-    {
-        if (this == p_equals_1_)
-        {
+    @Override
+    public boolean equals(Object other) {
+        if (this == other) {
@@ -69,3 +62 @@ public class ResourceLocation
-        }
-        else if (!(p_equals_1_ instanceof ResourceLocation))
-        {
+        } else if (!(other instanceof ResourceLocation)) {
@@ -73,4 +64,2 @@ public class ResourceLocation
-        }
-        else
-        {
-            ResourceLocation resourcelocation = (ResourceLocation)p_equals_1_;
+        } else {
+            ResourceLocation resourcelocation = (ResourceLocation)other;
@@ -80,0 +70 @@ public class ResourceLocation
+    @Override
diff --git a/minecraft/util/registry/RegistryNamespacedDefaultedByKey.java b/minecraft/util/registry/RegistryNamespacedDefaultedByKey.java
index f07e16d..3d9d403 100644
--- a/minecraft/util/registry/RegistryNamespacedDefaultedByKey.java
+++ b/minecraft/util/registry/RegistryNamespacedDefaultedByKey.java
@@ -7,0 +8 @@ import org.apache.commons.lang3.Validate;
+@SuppressWarnings("ALL")
diff --git a/minecraft/util/registry/RegistrySimple.java b/minecraft/util/registry/RegistrySimple.java
index 2444c5f..a68557f 100644
--- a/minecraft/util/registry/RegistrySimple.java
+++ b/minecraft/util/registry/RegistrySimple.java
@@ -10,0 +11,4 @@ import javax.annotation.Nullable;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.util.ResourceLocation;
diff --git a/minecraft/util/text/translation/LanguageMap.java b/minecraft/util/text/translation/LanguageMap.java
index 04931bb..68c4fcf 100644
--- a/minecraft/util/text/translation/LanguageMap.java
+++ b/minecraft/util/text/translation/LanguageMap.java
@@ -40,0 +41 @@ public class LanguageMap
+            if (inputstream == null) return;
diff --git a/minecraft/world/World.java b/minecraft/world/World.java
index 69679f6..3d607cd 100644
--- a/minecraft/world/World.java
+++ b/minecraft/world/World.java
@@ -1499 +1499 @@ public abstract class World implements IBlockAccess
-    public float getSunBrightness(float p_72971_1_)
+    public float getSunBrightness(float timeOfDay)
@@ -1501,2 +1501,2 @@ public abstract class World implements IBlockAccess
-        float f = this.getCelestialAngle(p_72971_1_);
-        float f1 = 1.0F - (MathHelper.cos(f * ((float)Math.PI * 2F)) * 2.0F + 0.2F);
+        float sunAngle = this.getCelestialAngle(timeOfDay);
+        float f1 = 1.0F - (MathHelper.cos(sunAngle * ((float)Math.PI * 2F)) * 2.0F + 0.2F);
@@ -1505,2 +1505,2 @@ public abstract class World implements IBlockAccess
-        f1 = (float)((double)f1 * (1.0D - (double)(this.getRainStrength(p_72971_1_) * 5.0F) / 16.0D));
-        f1 = (float)((double)f1 * (1.0D - (double)(this.getThunderStrength(p_72971_1_) * 5.0F) / 16.0D));
+        f1 = (float)((double)f1 * (1.0D - (double)(this.getRainStrength(timeOfDay) * 5.0F) / 16.0D));
+        f1 = (float)((double)f1 * (1.0D - (double)(this.getThunderStrength(timeOfDay) * 5.0F) / 16.0D));
diff --git a/minecraft/world/WorldProvider.java b/minecraft/world/WorldProvider.java
index 58842ff..2d91f02 100644
--- a/minecraft/world/WorldProvider.java
+++ b/minecraft/world/WorldProvider.java
@@ -115,2 +115,2 @@ public abstract class WorldProvider
-        int i = (int)(worldTime % 24000L);
-        float f = ((float)i + partialTicks) / 24000.0F - 0.25F;
+        int timeOfDay = (int)(worldTime % 24000L);
+        float exactTime = ((float)timeOfDay + partialTicks) / 24000.0F - 0.25F;
@@ -118 +118 @@ public abstract class WorldProvider
-        if (f < 0.0F)
+        if (exactTime < 0.0F)
@@ -120 +120 @@ public abstract class WorldProvider
-            ++f;
+            ++exactTime;
@@ -123 +123 @@ public abstract class WorldProvider
-        if (f > 1.0F)
+        if (exactTime > 1.0F)
@@ -125 +125 @@ public abstract class WorldProvider
-            --f;
+            --exactTime;
@@ -128,3 +128,3 @@ public abstract class WorldProvider
-        float f1 = 1.0F - (float)((Math.cos((double)f * Math.PI) + 1.0D) / 2.0D);
-        f = f + (f1 - f) / 3.0F;
-        return f;
+        float f1 = 1.0F - (float)((Math.cos((double)exactTime * Math.PI) + 1.0D) / 2.0D);
+        exactTime = exactTime + (f1 - exactTime) / 3.0F;
+        return exactTime;
diff --git a/minecraft/world/biome/BiomeColorHelper.java b/minecraft/world/biome/BiomeColorHelper.java
index df75c83..f642522 100644
--- a/minecraft/world/biome/BiomeColorHelper.java
+++ b/minecraft/world/biome/BiomeColorHelper.java
@@ -36 +36 @@ public class BiomeColorHelper
-        for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(pos.add(-1, 0, -1), pos.add(1, 0, 1)))
+        for (BlockPos.MutableBlockPos blockPos : BlockPos.getAllInBoxMutable(pos.add(-1, 0, -1), pos.add(1, 0, 1)))
@@ -38 +38 @@ public class BiomeColorHelper
-            int l = colorResolver.getColorAtPos(blockAccess.getBiomeGenForCoords(blockpos$mutableblockpos), blockpos$mutableblockpos);
+            int l = colorResolver.getColorAtPos(blockAccess.getBiomeGenForCoords(blockPos), blockPos);

